/*! For license information please see main.js.LICENSE.txt */
(()=>{var t={272:t=>{t.exports=(t,e,s,i)=>{const a=document.createElement(t);e&&a.setAttribute("class",e),s&&(a.textContent=s);for(let t in i)a.setAttribute(t,i[t]);return a}},7091:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),e.hash&&(t+=e.hash),e.maybeNeedQuotes&&/[\t\n\f\r "'=<>`]/.test(t)?'"'.concat(t,'"'):t):t}},2786:function(t,e,s){!function(t){"use strict";t.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(t){return/^nm$/i.test(t)},meridiem:function(t,e,s){return t<12?s?"vm":"VM":s?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}})}(s(381))},4130:function(t,e,s){!function(t){"use strict";var e=function(t){return 0===t?0:1===t?1:2===t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5},s={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(t){return function(i,a,n,r){var o=e(i),d=s[t][e(i)];return 2===o&&(d=d[a?0:1]),d.replace(/%d/i,i)}},a=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];t.defineLocale("ar-dz",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(t){return"م"===t},meridiem:function(t,e,s){return t<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:0,doy:4}})}(s(381))},6135:function(t,e,s){!function(t){"use strict";t.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(s(381))},6440:function(t,e,s){!function(t){"use strict";var e={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},s=function(t){return 0===t?0:1===t?1:2===t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5},i={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(t){return function(e,a,n,r){var o=s(e),d=i[t][s(e)];return 2===o&&(d=d[a?0:1]),d.replace(/%d/i,e)}},n=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];t.defineLocale("ar-ly",{months:n,monthsShort:n,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(t){return"م"===t},meridiem:function(t,e,s){return t<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(s(381))},7702:function(t,e,s){!function(t){"use strict";t.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(s(381))},6040:function(t,e,s){!function(t){"use strict";var e={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},s={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};t.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(t){return"م"===t},meridiem:function(t,e,s){return t<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(t){return t.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(t){return s[t]})).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(s(381))},7100:function(t,e,s){!function(t){"use strict";t.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(s(381))},867:function(t,e,s){!function(t){"use strict";var e={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},s={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},i=function(t){return 0===t?0:1===t?1:2===t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},n=function(t){return function(e,s,n,r){var o=i(e),d=a[t][i(e)];return 2===o&&(d=d[s?0:1]),d.replace(/%d/i,e)}},r=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];t.defineLocale("ar",{months:r,monthsShort:r,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(t){return"م"===t},meridiem:function(t,e,s){return t<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:n("s"),ss:n("s"),m:n("m"),mm:n("m"),h:n("h"),hh:n("h"),d:n("d"),dd:n("d"),M:n("M"),MM:n("M"),y:n("y"),yy:n("y")},preparse:function(t){return t.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(t){return s[t]})).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(s(381))},1083:function(t,e,s){!function(t){"use strict";var e={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};t.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(t){return/^(gündüz|axşam)$/.test(t)},meridiem:function(t,e,s){return t<4?"gecə":t<12?"səhər":t<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(t){if(0===t)return t+"-ıncı";var s=t%10;return t+(e[s]||e[t%100-s]||e[t>=100?100:null])},week:{dow:1,doy:7}})}(s(381))},9808:function(t,e,s){!function(t){"use strict";function e(t,e,s){return"m"===s?e?"хвіліна":"хвіліну":"h"===s?e?"гадзіна":"гадзіну":t+" "+(i=+t,a={ss:e?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:e?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:e?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[s].split("_"),i%10==1&&i%100!=11?a[0]:i%10>=2&&i%10<=4&&(i%100<10||i%100>=20)?a[1]:a[2]);var i,a}t.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:e,mm:e,h:e,hh:e,d:"дзень",dd:e,M:"месяц",MM:e,y:"год",yy:e},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(t){return/^(дня|вечара)$/.test(t)},meridiem:function(t,e,s){return t<4?"ночы":t<12?"раніцы":t<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(t,e){switch(e){case"M":case"d":case"DDD":case"w":case"W":return t%10!=2&&t%10!=3||t%100==12||t%100==13?t+"-ы":t+"-і";case"D":return t+"-га";default:return t}},week:{dow:1,doy:7}})}(s(381))},8338:function(t,e,s){!function(t){"use strict";t.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(t){var e=t%10,s=t%100;return 0===t?t+"-ев":0===s?t+"-ен":s>10&&s<20?t+"-ти":1===e?t+"-ви":2===e?t+"-ри":7===e||8===e?t+"-ми":t+"-ти"},week:{dow:1,doy:7}})}(s(381))},7438:function(t,e,s){!function(t){"use strict";t.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(s(381))},6225:function(t,e,s){!function(t){"use strict";var e={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},s={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};t.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(t){return t.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(t){return s[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(t,e){return 12===t&&(t=0),"রাত"===e?t<4?t:t+12:"ভোর"===e||"সকাল"===e?t:"দুপুর"===e?t>=3?t:t+12:"বিকাল"===e||"সন্ধ্যা"===e?t+12:void 0},meridiem:function(t,e,s){return t<4?"রাত":t<6?"ভোর":t<12?"সকাল":t<15?"দুপুর":t<18?"বিকাল":t<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(s(381))},8905:function(t,e,s){!function(t){"use strict";var e={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},s={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};t.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(t){return t.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(t){return s[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(t,e){return 12===t&&(t=0),"রাত"===e&&t>=4||"দুপুর"===e&&t<5||"বিকাল"===e?t+12:t},meridiem:function(t,e,s){return t<4?"রাত":t<10?"সকাল":t<17?"দুপুর":t<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(s(381))},1560:function(t,e,s){!function(t){"use strict";var e={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},s={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};t.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(t){return t.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(t){return s[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(t,e){return 12===t&&(t=0),"མཚན་མོ"===e&&t>=4||"ཉིན་གུང"===e&&t<5||"དགོང་དག"===e?t+12:t},meridiem:function(t,e,s){return t<4?"མཚན་མོ":t<10?"ཞོགས་ཀས":t<17?"ཉིན་གུང":t<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(s(381))},1278:function(t,e,s){!function(t){"use strict";function e(t,e,s){return t+" "+function(t,e){return 2===e?function(t){var e={m:"v",b:"v",d:"z"};return void 0===e[t.charAt(0)]?t:e[t.charAt(0)]+t.substring(1)}(t):t}({mm:"munutenn",MM:"miz",dd:"devezh"}[s],t)}function s(t){return t>9?s(t%10):t}var i=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],a=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,n=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];t.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:n,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:e,h:"un eur",hh:"%d eur",d:"un devezh",dd:e,M:"ur miz",MM:e,y:"ur bloaz",yy:function(t){switch(s(t)){case 1:case 3:case 4:case 5:case 9:return t+" bloaz";default:return t+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(t){return t+(1===t?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(t){return"g.m."===t},meridiem:function(t,e,s){return t<12?"a.m.":"g.m."}})}(s(381))},622:function(t,e,s){!function(t){"use strict";function e(t,e,s){var i=t+" ";switch(s){case"ss":return i+(1===t?"sekunda":2===t||3===t||4===t?"sekunde":"sekundi");case"m":return e?"jedna minuta":"jedne minute";case"mm":return i+(1===t?"minuta":2===t||3===t||4===t?"minute":"minuta");case"h":return e?"jedan sat":"jednog sata";case"hh":return i+(1===t?"sat":2===t||3===t||4===t?"sata":"sati");case"dd":return i+(1===t?"dan":"dana");case"MM":return i+(1===t?"mjesec":2===t||3===t||4===t?"mjeseca":"mjeseci");case"yy":return i+(1===t?"godina":2===t||3===t||4===t?"godine":"godina")}}t.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:e,m:e,mm:e,h:e,hh:e,d:"dan",dd:e,M:"mjesec",MM:e,y:"godinu",yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(s(381))},2468:function(t,e,s){!function(t){"use strict";t.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(t,e){var s=1===t?"r":2===t?"n":3===t?"r":4===t?"t":"è";return"w"!==e&&"W"!==e||(s="a"),t+s},week:{dow:1,doy:4}})}(s(381))},5822:function(t,e,s){!function(t){"use strict";var e={format:"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),standalone:"ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince".split("_")},s="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),i=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function n(t){return t>1&&t<5&&1!=~~(t/10)}function r(t,e,s,i){var a=t+" ";switch(s){case"s":return e||i?"pár sekund":"pár sekundami";case"ss":return e||i?a+(n(t)?"sekundy":"sekund"):a+"sekundami";case"m":return e?"minuta":i?"minutu":"minutou";case"mm":return e||i?a+(n(t)?"minuty":"minut"):a+"minutami";case"h":return e?"hodina":i?"hodinu":"hodinou";case"hh":return e||i?a+(n(t)?"hodiny":"hodin"):a+"hodinami";case"d":return e||i?"den":"dnem";case"dd":return e||i?a+(n(t)?"dny":"dní"):a+"dny";case"M":return e||i?"měsíc":"měsícem";case"MM":return e||i?a+(n(t)?"měsíce":"měsíců"):a+"měsíci";case"y":return e||i?"rok":"rokem";case"yy":return e||i?a+(n(t)?"roky":"let"):a+"lety"}}t.defineLocale("cs",{months:e,monthsShort:s,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},877:function(t,e,s){!function(t){"use strict";t.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(t){return t+(/сехет$/i.exec(t)?"рен":/ҫул$/i.exec(t)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(s(381))},7373:function(t,e,s){!function(t){"use strict";t.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(t){var e="";return t>20?e=40===t||50===t||60===t||80===t||100===t?"fed":"ain":t>0&&(e=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][t]),t+e},week:{dow:1,doy:4}})}(s(381))},4780:function(t,e,s){!function(t){"use strict";t.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},217:function(t,e,s){!function(t){"use strict";function e(t,e,s,i){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[t+" Tage",t+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[t+" Monate",t+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[t+" Jahre",t+" Jahren"]};return e?a[s][0]:a[s][1]}t.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:e,mm:"%d Minuten",h:e,hh:"%d Stunden",d:e,dd:e,w:e,ww:"%d Wochen",M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},894:function(t,e,s){!function(t){"use strict";function e(t,e,s,i){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[t+" Tage",t+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[t+" Monate",t+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[t+" Jahre",t+" Jahren"]};return e?a[s][0]:a[s][1]}t.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:e,mm:"%d Minuten",h:e,hh:"%d Stunden",d:e,dd:e,w:e,ww:"%d Wochen",M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},9740:function(t,e,s){!function(t){"use strict";function e(t,e,s,i){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[t+" Tage",t+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[t+" Monate",t+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[t+" Jahre",t+" Jahren"]};return e?a[s][0]:a[s][1]}t.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:e,mm:"%d Minuten",h:e,hh:"%d Stunden",d:e,dd:e,w:e,ww:"%d Wochen",M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},5300:function(t,e,s){!function(t){"use strict";var e=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],s=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];t.defineLocale("dv",{months:e,monthsShort:e,weekdays:s,weekdaysShort:s,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(t){return"މފ"===t},meridiem:function(t,e,s){return t<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:7,doy:12}})}(s(381))},837:function(t,e,s){!function(t){"use strict";t.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(t,e){return t?"string"==typeof e&&/D/.test(e.substring(0,e.indexOf("MMMM")))?this._monthsGenitiveEl[t.month()]:this._monthsNominativeEl[t.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(t,e,s){return t>11?s?"μμ":"ΜΜ":s?"πμ":"ΠΜ"},isPM:function(t){return"μ"===(t+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){return 6===this.day()?"[το προηγούμενο] dddd [{}] LT":"[την προηγούμενη] dddd [{}] LT"},sameElse:"L"},calendar:function(t,e){var s,i=this._calendarEl[t],a=e&&e.hours();return s=i,("undefined"!=typeof Function&&s instanceof Function||"[object Function]"===Object.prototype.toString.call(s))&&(i=i.apply(e)),i.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(s(381))},8348:function(t,e,s){!function(t){"use strict";t.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:0,doy:4}})}(s(381))},7925:function(t,e,s){!function(t){"use strict";t.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")}})}(s(381))},2243:function(t,e,s){!function(t){"use strict";t.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(s(381))},6436:function(t,e,s){!function(t){"use strict";t.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(s(381))},7207:function(t,e,s){!function(t){"use strict";t.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")}})}(s(381))},4175:function(t,e,s){!function(t){"use strict";t.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:0,doy:6}})}(s(381))},6319:function(t,e,s){!function(t){"use strict";t.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(s(381))},1662:function(t,e,s){!function(t){"use strict";t.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(s(381))},2915:function(t,e,s){!function(t){"use strict";t.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(t){return"p"===t.charAt(0).toLowerCase()},meridiem:function(t,e,s){return t>11?s?"p.t.m.":"P.T.M.":s?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(s(381))},5251:function(t,e,s){!function(t){"use strict";var e="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),s="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),i=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;t.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(t,i){return t?/-MMM-/.test(i)?s[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(s(381))},6112:function(t,e,s){!function(t){"use strict";var e="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),s="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),i=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;t.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(t,i){return t?/-MMM-/.test(i)?s[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(s(381))},1146:function(t,e,s){!function(t){"use strict";var e="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),s="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),i=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;t.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(t,i){return t?/-MMM-/.test(i)?s[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(s(381))},5655:function(t,e,s){!function(t){"use strict";var e="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),s="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),i=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;t.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(t,i){return t?/-MMM-/.test(i)?s[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(s(381))},5603:function(t,e,s){!function(t){"use strict";function e(t,e,s,i){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[t+"sekundi",t+"sekundit"],m:["ühe minuti","üks minut"],mm:[t+" minuti",t+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[t+" tunni",t+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[t+" kuu",t+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[t+" aasta",t+" aastat"]};return e?a[s][2]?a[s][2]:a[s][1]:i?a[s][0]:a[s][1]}t.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:"%d päeva",M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},7763:function(t,e,s){!function(t){"use strict";t.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(s(381))},6959:function(t,e,s){!function(t){"use strict";var e={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},s={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};t.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(t){return/بعد از ظهر/.test(t)},meridiem:function(t,e,s){return t<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(t){return t.replace(/[۰-۹]/g,(function(t){return s[t]})).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(s(381))},1897:function(t,e,s){!function(t){"use strict";var e="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),s=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",e[7],e[8],e[9]];function i(t,i,a,n){var r="";switch(a){case"s":return n?"muutaman sekunnin":"muutama sekunti";case"ss":r=n?"sekunnin":"sekuntia";break;case"m":return n?"minuutin":"minuutti";case"mm":r=n?"minuutin":"minuuttia";break;case"h":return n?"tunnin":"tunti";case"hh":r=n?"tunnin":"tuntia";break;case"d":return n?"päivän":"päivä";case"dd":r=n?"päivän":"päivää";break;case"M":return n?"kuukauden":"kuukausi";case"MM":r=n?"kuukauden":"kuukautta";break;case"y":return n?"vuoden":"vuosi";case"yy":r=n?"vuoden":"vuotta"}return function(t,i){return t<10?i?s[t]:e[t]:t}(t,n)+" "+r}t.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:i,ss:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},2549:function(t,e,s){!function(t){"use strict";t.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(t){return t},week:{dow:1,doy:4}})}(s(381))},4694:function(t,e,s){!function(t){"use strict";t.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},3049:function(t,e,s){!function(t){"use strict";t.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(t,e){switch(e){default:case"M":case"Q":case"D":case"DDD":case"d":return t+(1===t?"er":"e");case"w":case"W":return t+(1===t?"re":"e")}}})}(s(381))},2330:function(t,e,s){!function(t){"use strict";t.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(t,e){switch(e){default:case"M":case"Q":case"D":case"DDD":case"d":return t+(1===t?"er":"e");case"w":case"W":return t+(1===t?"re":"e")}},week:{dow:1,doy:4}})}(s(381))},4470:function(t,e,s){!function(t){"use strict";var e=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,s=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];t.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:e,monthsShortRegex:e,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:s,longMonthsParse:s,shortMonthsParse:s,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(t,e){switch(e){case"D":return t+(1===t?"er":"");default:case"M":case"Q":case"DDD":case"d":return t+(1===t?"er":"e");case"w":case"W":return t+(1===t?"re":"e")}},week:{dow:1,doy:4}})}(s(381))},5044:function(t,e,s){!function(t){"use strict";var e="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),s="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");t.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(t,i){return t?/-MMM-/.test(i)?s[t.month()]:e[t.month()]:e},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}})}(s(381))},9295:function(t,e,s){!function(t){"use strict";t.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(t){return t+(1===t?"d":t%10==2?"na":"mh")},week:{dow:1,doy:4}})}(s(381))},2101:function(t,e,s){!function(t){"use strict";t.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(t){return t+(1===t?"d":t%10==2?"na":"mh")},week:{dow:1,doy:4}})}(s(381))},8794:function(t,e,s){!function(t){"use strict";t.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(t){return 0===t.indexOf("un")?"n"+t:"en "+t},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(s(381))},7884:function(t,e,s){!function(t){"use strict";function e(t,e,s,i){var a={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[t+" सॅकंडांनी",t+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[t+" मिणटांनी",t+" मिणटां"],h:["एका वरान","एक वर"],hh:[t+" वरांनी",t+" वरां"],d:["एका दिसान","एक दीस"],dd:[t+" दिसांनी",t+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[t+" म्हयन्यानी",t+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[t+" वर्सांनी",t+" वर्सां"]};return i?a[s][0]:a[s][1]}t.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(t,e){return"D"===e?t+"वेर":t},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(t,e){return 12===t&&(t=0),"राती"===e?t<4?t:t+12:"सकाळीं"===e?t:"दनपारां"===e?t>12?t:t+12:"सांजे"===e?t+12:void 0},meridiem:function(t,e,s){return t<4?"राती":t<12?"सकाळीं":t<16?"दनपारां":t<20?"सांजे":"राती"}})}(s(381))},3168:function(t,e,s){!function(t){"use strict";function e(t,e,s,i){var a={s:["thoddea sekondamni","thodde sekond"],ss:[t+" sekondamni",t+" sekond"],m:["eka mintan","ek minut"],mm:[t+" mintamni",t+" mintam"],h:["eka voran","ek vor"],hh:[t+" voramni",t+" voram"],d:["eka disan","ek dis"],dd:[t+" disamni",t+" dis"],M:["eka mhoinean","ek mhoino"],MM:[t+" mhoineamni",t+" mhoine"],y:["eka vorsan","ek voros"],yy:[t+" vorsamni",t+" vorsam"]};return i?a[s][0]:a[s][1]}t.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(t,e){return"D"===e?t+"er":t},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(t,e){return 12===t&&(t=0),"rati"===e?t<4?t:t+12:"sokallim"===e?t:"donparam"===e?t>12?t:t+12:"sanje"===e?t+12:void 0},meridiem:function(t,e,s){return t<4?"rati":t<12?"sokallim":t<16?"donparam":t<20?"sanje":"rati"}})}(s(381))},5349:function(t,e,s){!function(t){"use strict";var e={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},s={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};t.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(t){return t.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(t){return s[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(t,e){return 12===t&&(t=0),"રાત"===e?t<4?t:t+12:"સવાર"===e?t:"બપોર"===e?t>=10?t:t+12:"સાંજ"===e?t+12:void 0},meridiem:function(t,e,s){return t<4?"રાત":t<10?"સવાર":t<17?"બપોર":t<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(s(381))},4206:function(t,e,s){!function(t){"use strict";t.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(t){return 2===t?"שעתיים":t+" שעות"},d:"יום",dd:function(t){return 2===t?"יומיים":t+" ימים"},M:"חודש",MM:function(t){return 2===t?"חודשיים":t+" חודשים"},y:"שנה",yy:function(t){return 2===t?"שנתיים":t%10==0&&10!==t?t+" שנה":t+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(t){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(t)},meridiem:function(t,e,s){return t<5?"לפנות בוקר":t<10?"בבוקר":t<12?s?'לפנה"צ':"לפני הצהריים":t<18?s?'אחה"צ':"אחרי הצהריים":"בערב"}})}(s(381))},94:function(t,e,s){!function(t){"use strict";var e={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},s={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},i=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];t.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:i,longMonthsParse:i,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(t){return t.replace(/[१२३४५६७८९०]/g,(function(t){return s[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(t,e){return 12===t&&(t=0),"रात"===e?t<4?t:t+12:"सुबह"===e?t:"दोपहर"===e?t>=10?t:t+12:"शाम"===e?t+12:void 0},meridiem:function(t,e,s){return t<4?"रात":t<10?"सुबह":t<17?"दोपहर":t<20?"शाम":"रात"},week:{dow:0,doy:6}})}(s(381))},316:function(t,e,s){!function(t){"use strict";function e(t,e,s){var i=t+" ";switch(s){case"ss":return i+(1===t?"sekunda":2===t||3===t||4===t?"sekunde":"sekundi");case"m":return e?"jedna minuta":"jedne minute";case"mm":return i+(1===t?"minuta":2===t||3===t||4===t?"minute":"minuta");case"h":return e?"jedan sat":"jednog sata";case"hh":return i+(1===t?"sat":2===t||3===t||4===t?"sata":"sati");case"dd":return i+(1===t?"dan":"dana");case"MM":return i+(1===t?"mjesec":2===t||3===t||4===t?"mjeseca":"mjeseci");case"yy":return i+(1===t?"godina":2===t||3===t||4===t?"godine":"godina")}}t.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:e,m:e,mm:e,h:e,hh:e,d:"dan",dd:e,M:"mjesec",MM:e,y:"godinu",yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(s(381))},2138:function(t,e,s){!function(t){"use strict";var e="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function s(t,e,s,i){var a=t;switch(s){case"s":return i||e?"néhány másodperc":"néhány másodperce";case"ss":return a+(i||e)?" másodperc":" másodperce";case"m":return"egy"+(i||e?" perc":" perce");case"mm":return a+(i||e?" perc":" perce");case"h":return"egy"+(i||e?" óra":" órája");case"hh":return a+(i||e?" óra":" órája");case"d":return"egy"+(i||e?" nap":" napja");case"dd":return a+(i||e?" nap":" napja");case"M":return"egy"+(i||e?" hónap":" hónapja");case"MM":return a+(i||e?" hónap":" hónapja");case"y":return"egy"+(i||e?" év":" éve");case"yy":return a+(i||e?" év":" éve")}return""}function i(t){return(t?"":"[múlt] ")+"["+e[this.day()]+"] LT[-kor]"}t.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(t){return"u"===t.charAt(1).toLowerCase()},meridiem:function(t,e,s){return t<12?!0===s?"de":"DE":!0===s?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return i.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return i.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},1423:function(t,e,s){!function(t){"use strict";t.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(t){return/^(ցերեկվա|երեկոյան)$/.test(t)},meridiem:function(t){return t<4?"գիշերվա":t<12?"առավոտվա":t<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(t,e){switch(e){case"DDD":case"w":case"W":case"DDDo":return 1===t?t+"-ին":t+"-րդ";default:return t}},week:{dow:1,doy:7}})}(s(381))},9218:function(t,e,s){!function(t){"use strict";t.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(t,e){return 12===t&&(t=0),"pagi"===e?t:"siang"===e?t>=11?t:t+12:"sore"===e||"malam"===e?t+12:void 0},meridiem:function(t,e,s){return t<11?"pagi":t<15?"siang":t<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(s(381))},135:function(t,e,s){!function(t){"use strict";function e(t){return t%100==11||t%10!=1}function s(t,s,i,a){var n=t+" ";switch(i){case"s":return s||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return e(t)?n+(s||a?"sekúndur":"sekúndum"):n+"sekúnda";case"m":return s?"mínúta":"mínútu";case"mm":return e(t)?n+(s||a?"mínútur":"mínútum"):s?n+"mínúta":n+"mínútu";case"hh":return e(t)?n+(s||a?"klukkustundir":"klukkustundum"):n+"klukkustund";case"d":return s?"dagur":a?"dag":"degi";case"dd":return e(t)?s?n+"dagar":n+(a?"daga":"dögum"):s?n+"dagur":n+(a?"dag":"degi");case"M":return s?"mánuður":a?"mánuð":"mánuði";case"MM":return e(t)?s?n+"mánuðir":n+(a?"mánuði":"mánuðum"):s?n+"mánuður":n+(a?"mánuð":"mánuði");case"y":return s||a?"ár":"ári";case"yy":return e(t)?n+(s||a?"ár":"árum"):n+(s||a?"ár":"ári")}}t.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s,ss:s,m:s,mm:s,h:"klukkustund",hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},150:function(t,e,s){!function(t){"use strict";t.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){return 0===this.day()?"[la scorsa] dddd [alle] LT":"[lo scorso] dddd [alle] LT"},sameElse:"L"},relativeTime:{future:function(t){return(/^[0-9].+$/.test(t)?"tra":"in")+" "+t},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(s(381))},626:function(t,e,s){!function(t){"use strict";t.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){return 0===this.day()?"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT":"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(s(381))},9183:function(t,e,s){!function(t){"use strict";t.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(t,e){return"元"===e[1]?1:parseInt(e[1]||t,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(t){return"午後"===t},meridiem:function(t,e,s){return t<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(t){return t.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(t){return this.week()!==t.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(t,e){switch(e){case"y":return 1===t?"元年":t+"年";case"d":case"D":case"DDD":return t+"日";default:return t}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(s(381))},4286:function(t,e,s){!function(t){"use strict";t.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(t,e){return 12===t&&(t=0),"enjing"===e?t:"siyang"===e?t>=11?t:t+12:"sonten"===e||"ndalu"===e?t+12:void 0},meridiem:function(t,e,s){return t<11?"enjing":t<15?"siyang":t<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(s(381))},2105:function(t,e,s){!function(t){"use strict";t.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(t){return t.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(t,e,s){return"ი"===s?e+"ში":e+s+"ში"}))},past:function(t){return/(წამი|წუთი|საათი|დღე|თვე)/.test(t)?t.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(t)?t.replace(/წელი$/,"წლის წინ"):t},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(t){return 0===t?t:1===t?t+"-ლი":t<20||t<=100&&t%20==0||t%100==0?"მე-"+t:t+"-ე"},week:{dow:1,doy:7}})}(s(381))},7772:function(t,e,s){!function(t){"use strict";var e={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};t.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(t){return t+(e[t]||e[t%10]||e[t>=100?100:null])},week:{dow:1,doy:7}})}(s(381))},8758:function(t,e,s){!function(t){"use strict";var e={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},s={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};t.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(t){return"ល្ងាច"===t},meridiem:function(t,e,s){return t<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(t){return t.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(t){return s[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},week:{dow:1,doy:4}})}(s(381))},9282:function(t,e,s){!function(t){"use strict";var e={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},s={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};t.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(t){return t.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(t){return s[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(t,e){return 12===t&&(t=0),"ರಾತ್ರಿ"===e?t<4?t:t+12:"ಬೆಳಿಗ್ಗೆ"===e?t:"ಮಧ್ಯಾಹ್ನ"===e?t>=10?t:t+12:"ಸಂಜೆ"===e?t+12:void 0},meridiem:function(t,e,s){return t<4?"ರಾತ್ರಿ":t<10?"ಬೆಳಿಗ್ಗೆ":t<17?"ಮಧ್ಯಾಹ್ನ":t<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(t){return t+"ನೇ"},week:{dow:0,doy:6}})}(s(381))},3730:function(t,e,s){!function(t){"use strict";t.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"일";case"M":return t+"월";case"w":case"W":return t+"주";default:return t}},meridiemParse:/오전|오후/,isPM:function(t){return"오후"===t},meridiem:function(t,e,s){return t<12?"오전":"오후"}})}(s(381))},1408:function(t,e,s){!function(t){"use strict";var e={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},s={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},i=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];t.defineLocale("ku",{months:i,monthsShort:i,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(t){return/ئێواره‌/.test(t)},meridiem:function(t,e,s){return t<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(t){return t.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(t){return s[t]})).replace(/،/g,",")},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(s(381))},3291:function(t,e,s){!function(t){"use strict";var e={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};t.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(t){return t+(e[t]||e[t%10]||e[t>=100?100:null])},week:{dow:1,doy:7}})}(s(381))},6841:function(t,e,s){!function(t){"use strict";function e(t,e,s,i){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return e?a[s][0]:a[s][1]}function s(t){if(t=parseInt(t,10),isNaN(t))return!1;if(t<0)return!0;if(t<10)return 4<=t&&t<=7;if(t<100){var e=t%10;return s(0===e?t/10:e)}if(t<1e4){for(;t>=10;)t/=10;return s(t)}return s(t/=1e3)}t.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(t){return s(t.substr(0,t.indexOf(" ")))?"a "+t:"an "+t},past:function(t){return s(t.substr(0,t.indexOf(" ")))?"viru "+t:"virun "+t},s:"e puer Sekonnen",ss:"%d Sekonnen",m:e,mm:"%d Minutten",h:e,hh:"%d Stonnen",d:e,dd:"%d Deeg",M:e,MM:"%d Méint",y:e,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},5466:function(t,e,s){!function(t){"use strict";t.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(t){return"ຕອນແລງ"===t},meridiem:function(t,e,s){return t<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(t){return"ທີ່"+t}})}(s(381))},7010:function(t,e,s){!function(t){"use strict";var e={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function s(t,e,s,i){return e?a(s)[0]:i?a(s)[1]:a(s)[2]}function i(t){return t%10==0||t>10&&t<20}function a(t){return e[t].split("_")}function n(t,e,n,r){var o=t+" ";return 1===t?o+s(0,e,n[0],r):e?o+(i(t)?a(n)[1]:a(n)[0]):r?o+a(n)[1]:o+(i(t)?a(n)[1]:a(n)[2])}t.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(t,e,s,i){return e?"kelios sekundės":i?"kelių sekundžių":"kelias sekundes"},ss:n,m:s,mm:n,h:s,hh:n,d:s,dd:n,M:s,MM:n,y:s,yy:n},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(t){return t+"-oji"},week:{dow:1,doy:4}})}(s(381))},7595:function(t,e,s){!function(t){"use strict";var e={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function s(t,e,s){return s?e%10==1&&e%100!=11?t[2]:t[3]:e%10==1&&e%100!=11?t[0]:t[1]}function i(t,i,a){return t+" "+s(e[a],t,i)}function a(t,i,a){return s(e[a],t,i)}t.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(t,e){return e?"dažas sekundes":"dažām sekundēm"},ss:i,m:a,mm:i,h:a,hh:i,d:a,dd:i,M:a,MM:i,y:a,yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},9861:function(t,e,s){!function(t){"use strict";var e={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(t,e){return 1===t?e[0]:t>=2&&t<=4?e[1]:e[2]},translate:function(t,s,i){var a=e.words[i];return 1===i.length?s?a[0]:a[1]:t+" "+e.correctGrammaticalCase(t,a)}};t.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:e.translate,m:e.translate,mm:e.translate,h:e.translate,hh:e.translate,d:"dan",dd:e.translate,M:"mjesec",MM:e.translate,y:"godinu",yy:e.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(s(381))},5493:function(t,e,s){!function(t){"use strict";t.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(s(381))},5966:function(t,e,s){!function(t){"use strict";t.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(t){var e=t%10,s=t%100;return 0===t?t+"-ев":0===s?t+"-ен":s>10&&s<20?t+"-ти":1===e?t+"-ви":2===e?t+"-ри":7===e||8===e?t+"-ми":t+"-ти"},week:{dow:1,doy:7}})}(s(381))},7341:function(t,e,s){!function(t){"use strict";t.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(t,e){return 12===t&&(t=0),"രാത്രി"===e&&t>=4||"ഉച്ച കഴിഞ്ഞ്"===e||"വൈകുന്നേരം"===e?t+12:t},meridiem:function(t,e,s){return t<4?"രാത്രി":t<12?"രാവിലെ":t<17?"ഉച്ച കഴിഞ്ഞ്":t<20?"വൈകുന്നേരം":"രാത്രി"}})}(s(381))},5115:function(t,e,s){!function(t){"use strict";function e(t,e,s,i){switch(s){case"s":return e?"хэдхэн секунд":"хэдхэн секундын";case"ss":return t+(e?" секунд":" секундын");case"m":case"mm":return t+(e?" минут":" минутын");case"h":case"hh":return t+(e?" цаг":" цагийн");case"d":case"dd":return t+(e?" өдөр":" өдрийн");case"M":case"MM":return t+(e?" сар":" сарын");case"y":case"yy":return t+(e?" жил":" жилийн");default:return t}}t.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(t){return"ҮХ"===t},meridiem:function(t,e,s){return t<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+" өдөр";default:return t}}})}(s(381))},370:function(t,e,s){!function(t){"use strict";var e={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},s={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function i(t,e,s,i){var a="";if(e)switch(s){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(s){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,t)}t.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:i,ss:i,m:i,mm:i,h:i,hh:i,d:i,dd:i,M:i,MM:i,y:i,yy:i},preparse:function(t){return t.replace(/[१२३४५६७८९०]/g,(function(t){return s[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(t,e){return 12===t&&(t=0),"पहाटे"===e||"सकाळी"===e?t:"दुपारी"===e||"सायंकाळी"===e||"रात्री"===e?t>=12?t:t+12:void 0},meridiem:function(t,e,s){return t>=0&&t<6?"पहाटे":t<12?"सकाळी":t<17?"दुपारी":t<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(s(381))},1237:function(t,e,s){!function(t){"use strict";t.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(t,e){return 12===t&&(t=0),"pagi"===e?t:"tengahari"===e?t>=11?t:t+12:"petang"===e||"malam"===e?t+12:void 0},meridiem:function(t,e,s){return t<11?"pagi":t<15?"tengahari":t<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(s(381))},9847:function(t,e,s){!function(t){"use strict";t.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(t,e){return 12===t&&(t=0),"pagi"===e?t:"tengahari"===e?t>=11?t:t+12:"petang"===e||"malam"===e?t+12:void 0},meridiem:function(t,e,s){return t<11?"pagi":t<15?"tengahari":t<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(s(381))},2126:function(t,e,s){!function(t){"use strict";t.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(s(381))},6165:function(t,e,s){!function(t){"use strict";var e={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},s={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};t.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(t){return t.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(t){return s[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},week:{dow:1,doy:4}})}(s(381))},4924:function(t,e,s){!function(t){"use strict";t.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},6744:function(t,e,s){!function(t){"use strict";var e={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},s={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};t.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(t){return t.replace(/[१२३४५६७८९०]/g,(function(t){return s[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(t,e){return 12===t&&(t=0),"राति"===e?t<4?t:t+12:"बिहान"===e?t:"दिउँसो"===e?t>=10?t:t+12:"साँझ"===e?t+12:void 0},meridiem:function(t,e,s){return t<3?"राति":t<12?"बिहान":t<16?"दिउँसो":t<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(s(381))},9814:function(t,e,s){!function(t){"use strict";var e="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),s="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),i=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;t.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(t,i){return t?/-MMM-/.test(i)?s[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}})}(s(381))},3901:function(t,e,s){!function(t){"use strict";var e="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),s="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),i=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;t.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(t,i){return t?/-MMM-/.test(i)?s[t.month()]:e[t.month()]:e},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(t){return t+(1===t||8===t||t>=20?"ste":"de")},week:{dow:1,doy:4}})}(s(381))},3877:function(t,e,s){!function(t){"use strict";t.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},2135:function(t,e,s){!function(t){"use strict";t.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(t,e){var s=1===t?"r":2===t?"n":3===t?"r":4===t?"t":"è";return"w"!==e&&"W"!==e||(s="a"),t+s},week:{dow:1,doy:4}})}(s(381))},5858:function(t,e,s){!function(t){"use strict";var e={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},s={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};t.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(t){return t.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(t){return s[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(t,e){return 12===t&&(t=0),"ਰਾਤ"===e?t<4?t:t+12:"ਸਵੇਰ"===e?t:"ਦੁਪਹਿਰ"===e?t>=10?t:t+12:"ਸ਼ਾਮ"===e?t+12:void 0},meridiem:function(t,e,s){return t<4?"ਰਾਤ":t<10?"ਸਵੇਰ":t<17?"ਦੁਪਹਿਰ":t<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(s(381))},4495:function(t,e,s){!function(t){"use strict";var e="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),s="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),i=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function a(t){return t%10<5&&t%10>1&&~~(t/10)%10!=1}function n(t,e,s){var i=t+" ";switch(s){case"ss":return i+(a(t)?"sekundy":"sekund");case"m":return e?"minuta":"minutę";case"mm":return i+(a(t)?"minuty":"minut");case"h":return e?"godzina":"godzinę";case"hh":return i+(a(t)?"godziny":"godzin");case"ww":return i+(a(t)?"tygodnie":"tygodni");case"MM":return i+(a(t)?"miesiące":"miesięcy");case"yy":return i+(a(t)?"lata":"lat")}}t.defineLocale("pl",{months:function(t,i){return t?/D MMMM/.test(i)?s[t.month()]:e[t.month()]:e},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:i,longMonthsParse:i,shortMonthsParse:i,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:n,m:n,mm:n,h:n,hh:n,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:n,M:"miesiąc",MM:n,y:"rok",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},7971:function(t,e,s){!function(t){"use strict";t.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(s(381))},9520:function(t,e,s){!function(t){"use strict";t.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(s(381))},6459:function(t,e,s){!function(t){"use strict";function e(t,e,s){var i=" ";return(t%100>=20||t>=100&&t%100==0)&&(i=" de "),t+i+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[s]}t.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:e,m:"un minut",mm:e,h:"o oră",hh:e,d:"o zi",dd:e,w:"o săptămână",ww:e,M:"o lună",MM:e,y:"un an",yy:e},week:{dow:1,doy:7}})}(s(381))},1793:function(t,e,s){!function(t){"use strict";function e(t,e,s){return"m"===s?e?"минута":"минуту":t+" "+(i=+t,a={ss:e?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:e?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[s].split("_"),i%10==1&&i%100!=11?a[0]:i%10>=2&&i%10<=4&&(i%100<10||i%100>=20)?a[1]:a[2]);var i,a}var s=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];t.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:s,longMonthsParse:s,shortMonthsParse:s,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(t){if(t.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(t){if(t.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:e,m:e,mm:e,h:"час",hh:e,d:"день",dd:e,w:"неделя",ww:e,M:"месяц",MM:e,y:"год",yy:e},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(t){return/^(дня|вечера)$/.test(t)},meridiem:function(t,e,s){return t<4?"ночи":t<12?"утра":t<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(t,e){switch(e){case"M":case"d":case"DDD":return t+"-й";case"D":return t+"-го";case"w":case"W":return t+"-я";default:return t}},week:{dow:1,doy:4}})}(s(381))},950:function(t,e,s){!function(t){"use strict";var e=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],s=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];t.defineLocale("sd",{months:e,monthsShort:e,weekdays:s,weekdaysShort:s,weekdaysMin:s,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(t){return"شام"===t},meridiem:function(t,e,s){return t<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:1,doy:4}})}(s(381))},490:function(t,e,s){!function(t){"use strict";t.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},124:function(t,e,s){!function(t){"use strict";t.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(t){return t+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(t){return"ප.ව."===t||"පස් වරු"===t},meridiem:function(t,e,s){return t>11?s?"ප.ව.":"පස් වරු":s?"පෙ.ව.":"පෙර වරු"}})}(s(381))},4249:function(t,e,s){!function(t){"use strict";var e="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),s="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function i(t){return t>1&&t<5}function a(t,e,s,a){var n=t+" ";switch(s){case"s":return e||a?"pár sekúnd":"pár sekundami";case"ss":return e||a?n+(i(t)?"sekundy":"sekúnd"):n+"sekundami";case"m":return e?"minúta":a?"minútu":"minútou";case"mm":return e||a?n+(i(t)?"minúty":"minút"):n+"minútami";case"h":return e?"hodina":a?"hodinu":"hodinou";case"hh":return e||a?n+(i(t)?"hodiny":"hodín"):n+"hodinami";case"d":return e||a?"deň":"dňom";case"dd":return e||a?n+(i(t)?"dni":"dní"):n+"dňami";case"M":return e||a?"mesiac":"mesiacom";case"MM":return e||a?n+(i(t)?"mesiace":"mesiacov"):n+"mesiacmi";case"y":return e||a?"rok":"rokom";case"yy":return e||a?n+(i(t)?"roky":"rokov"):n+"rokmi"}}t.defineLocale("sk",{months:e,monthsShort:s,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:case 4:case 5:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},4985:function(t,e,s){!function(t){"use strict";function e(t,e,s,i){var a=t+" ";switch(s){case"s":return e||i?"nekaj sekund":"nekaj sekundami";case"ss":return a+(1===t?e?"sekundo":"sekundi":2===t?e||i?"sekundi":"sekundah":t<5?e||i?"sekunde":"sekundah":"sekund");case"m":return e?"ena minuta":"eno minuto";case"mm":return a+(1===t?e?"minuta":"minuto":2===t?e||i?"minuti":"minutama":t<5?e||i?"minute":"minutami":e||i?"minut":"minutami");case"h":return e?"ena ura":"eno uro";case"hh":return a+(1===t?e?"ura":"uro":2===t?e||i?"uri":"urama":t<5?e||i?"ure":"urami":e||i?"ur":"urami");case"d":return e||i?"en dan":"enim dnem";case"dd":return a+(1===t?e||i?"dan":"dnem":2===t?e||i?"dni":"dnevoma":e||i?"dni":"dnevi");case"M":return e||i?"en mesec":"enim mesecem";case"MM":return a+(1===t?e||i?"mesec":"mesecem":2===t?e||i?"meseca":"mesecema":t<5?e||i?"mesece":"meseci":e||i?"mesecev":"meseci");case"y":return e||i?"eno leto":"enim letom";case"yy":return a+(1===t?e||i?"leto":"letom":2===t?e||i?"leti":"letoma":t<5?e||i?"leta":"leti":e||i?"let":"leti")}}t.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(s(381))},1104:function(t,e,s){!function(t){"use strict";t.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(t){return"M"===t.charAt(0)},meridiem:function(t,e,s){return t<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},9915:function(t,e,s){!function(t){"use strict";var e={words:{ss:["секунда","секунде","секунди"],m:["један минут","једног минута"],mm:["минут","минута","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],d:["један дан","једног дана"],dd:["дан","дана","дана"],M:["један месец","једног месеца"],MM:["месец","месеца","месеци"],y:["једну годину","једне године"],yy:["годину","године","година"]},correctGrammaticalCase:function(t,e){return t%10>=1&&t%10<=4&&(t%100<10||t%100>=20)?t%10==1?e[0]:e[1]:e[2]},translate:function(t,s,i,a){var n,r=e.words[i];return 1===i.length?"y"===i&&s?"једна година":a||s?r[0]:r[1]:(n=e.correctGrammaticalCase(t,r),"yy"===i&&s&&"годину"===n?t+" година":t+" "+n)}};t.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:e.translate,m:e.translate,mm:e.translate,h:e.translate,hh:e.translate,d:e.translate,dd:e.translate,M:e.translate,MM:e.translate,y:e.translate,yy:e.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(s(381))},9131:function(t,e,s){!function(t){"use strict";var e={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],d:["jedan dan","jednog dana"],dd:["dan","dana","dana"],M:["jedan mesec","jednog meseca"],MM:["mesec","meseca","meseci"],y:["jednu godinu","jedne godine"],yy:["godinu","godine","godina"]},correctGrammaticalCase:function(t,e){return t%10>=1&&t%10<=4&&(t%100<10||t%100>=20)?t%10==1?e[0]:e[1]:e[2]},translate:function(t,s,i,a){var n,r=e.words[i];return 1===i.length?"y"===i&&s?"jedna godina":a||s?r[0]:r[1]:(n=e.correctGrammaticalCase(t,r),"yy"===i&&s&&"godinu"===n?t+" godina":t+" "+n)}};t.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:e.translate,m:e.translate,mm:e.translate,h:e.translate,hh:e.translate,d:e.translate,dd:e.translate,M:e.translate,MM:e.translate,y:e.translate,yy:e.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(s(381))},5893:function(t,e,s){!function(t){"use strict";t.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(t,e,s){return t<11?"ekuseni":t<15?"emini":t<19?"entsambama":"ebusuku"},meridiemHour:function(t,e){return 12===t&&(t=0),"ekuseni"===e?t:"emini"===e?t>=11?t:t+12:"entsambama"===e||"ebusuku"===e?0===t?0:t+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(s(381))},8760:function(t,e,s){!function(t){"use strict";t.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?":e":1===e||2===e?":a":":e")},week:{dow:1,doy:4}})}(s(381))},1172:function(t,e,s){!function(t){"use strict";t.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(s(381))},7333:function(t,e,s){!function(t){"use strict";var e={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},s={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};t.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(t){return t+"வது"},preparse:function(t){return t.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(t){return s[t]}))},postformat:function(t){return t.replace(/\d/g,(function(t){return e[t]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(t,e,s){return t<2?" யாமம்":t<6?" வைகறை":t<10?" காலை":t<14?" நண்பகல்":t<18?" எற்பாடு":t<22?" மாலை":" யாமம்"},meridiemHour:function(t,e){return 12===t&&(t=0),"யாமம்"===e?t<2?t:t+12:"வைகறை"===e||"காலை"===e||"நண்பகல்"===e&&t>=10?t:t+12},week:{dow:0,doy:6}})}(s(381))},3110:function(t,e,s){!function(t){"use strict";t.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(t,e){return 12===t&&(t=0),"రాత్రి"===e?t<4?t:t+12:"ఉదయం"===e?t:"మధ్యాహ్నం"===e?t>=10?t:t+12:"సాయంత్రం"===e?t+12:void 0},meridiem:function(t,e,s){return t<4?"రాత్రి":t<10?"ఉదయం":t<17?"మధ్యాహ్నం":t<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(s(381))},2095:function(t,e,s){!function(t){"use strict";t.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(s(381))},7321:function(t,e,s){!function(t){"use strict";var e={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};t.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(t,e){return 12===t&&(t=0),"шаб"===e?t<4?t:t+12:"субҳ"===e?t:"рӯз"===e?t>=11?t:t+12:"бегоҳ"===e?t+12:void 0},meridiem:function(t,e,s){return t<4?"шаб":t<11?"субҳ":t<16?"рӯз":t<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(t){return t+(e[t]||e[t%10]||e[t>=100?100:null])},week:{dow:1,doy:7}})}(s(381))},9041:function(t,e,s){!function(t){"use strict";t.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(t){return"หลังเที่ยง"===t},meridiem:function(t,e,s){return t<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(s(381))},9005:function(t,e,s){!function(t){"use strict";var e={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};t.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(t,s){switch(s){case"d":case"D":case"Do":case"DD":return t;default:if(0===t)return t+"'unjy";var i=t%10;return t+(e[i]||e[t%100-i]||e[t>=100?100:null])}},week:{dow:1,doy:7}})}(s(381))},5768:function(t,e,s){!function(t){"use strict";t.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(t){return t},week:{dow:1,doy:4}})}(s(381))},9444:function(t,e,s){!function(t){"use strict";var e="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function s(t,s,i,a){var n=function(t){var s=Math.floor(t%1e3/100),i=Math.floor(t%100/10),a=t%10,n="";return s>0&&(n+=e[s]+"vatlh"),i>0&&(n+=(""!==n?" ":"")+e[i]+"maH"),a>0&&(n+=(""!==n?" ":"")+e[a]),""===n?"pagh":n}(t);switch(i){case"ss":return n+" lup";case"mm":return n+" tup";case"hh":return n+" rep";case"dd":return n+" jaj";case"MM":return n+" jar";case"yy":return n+" DIS"}}t.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(t){var e=t;return-1!==t.indexOf("jaj")?e.slice(0,-3)+"leS":-1!==t.indexOf("jar")?e.slice(0,-3)+"waQ":-1!==t.indexOf("DIS")?e.slice(0,-3)+"nem":e+" pIq"},past:function(t){var e=t;return-1!==t.indexOf("jaj")?e.slice(0,-3)+"Hu’":-1!==t.indexOf("jar")?e.slice(0,-3)+"wen":-1!==t.indexOf("DIS")?e.slice(0,-3)+"ben":e+" ret"},s:"puS lup",ss:s,m:"wa’ tup",mm:s,h:"wa’ rep",hh:s,d:"wa’ jaj",dd:s,M:"wa’ jar",MM:s,y:"wa’ DIS",yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},2397:function(t,e,s){!function(t){"use strict";var e={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};t.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pzt_Sal_Çar_Per_Cum_Cmt".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(t,e,s){return t<12?s?"öö":"ÖÖ":s?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(t){return"ös"===t||"ÖS"===t},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(t,s){switch(s){case"d":case"D":case"Do":case"DD":return t;default:if(0===t)return t+"'ıncı";var i=t%10;return t+(e[i]||e[t%100-i]||e[t>=100?100:null])}},week:{dow:1,doy:7}})}(s(381))},8254:function(t,e,s){!function(t){"use strict";function e(t,e,s,i){var a={s:["viensas secunds","'iensas secunds"],ss:[t+" secunds",t+" secunds"],m:["'n míut","'iens míut"],mm:[t+" míuts",t+" míuts"],h:["'n þora","'iensa þora"],hh:[t+" þoras",t+" þoras"],d:["'n ziua","'iensa ziua"],dd:[t+" ziuas",t+" ziuas"],M:["'n mes","'iens mes"],MM:[t+" mesen",t+" mesen"],y:["'n ar","'iens ar"],yy:[t+" ars",t+" ars"]};return i||e?a[s][0]:a[s][1]}t.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(t){return"d'o"===t.toLowerCase()},meridiem:function(t,e,s){return t>11?s?"d'o":"D'O":s?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:e,ss:e,m:e,mm:e,h:e,hh:e,d:e,dd:e,M:e,MM:e,y:e,yy:e},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(s(381))},699:function(t,e,s){!function(t){"use strict";t.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(s(381))},1106:function(t,e,s){!function(t){"use strict";t.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(s(381))},9288:function(t,e,s){!function(t){"use strict";t.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(t,e){return 12===t&&(t=0),"يېرىم كېچە"===e||"سەھەر"===e||"چۈشتىن بۇرۇن"===e?t:"چۈشتىن كېيىن"===e||"كەچ"===e?t+12:t>=11?t:t+12},meridiem:function(t,e,s){var i=100*t+e;return i<600?"يېرىم كېچە":i<900?"سەھەر":i<1130?"چۈشتىن بۇرۇن":i<1230?"چۈش":i<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"-كۈنى";case"w":case"W":return t+"-ھەپتە";default:return t}},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:1,doy:7}})}(s(381))},7691:function(t,e,s){!function(t){"use strict";function e(t,e,s){return"m"===s?e?"хвилина":"хвилину":"h"===s?e?"година":"годину":t+" "+(i=+t,a={ss:e?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:e?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:e?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[s].split("_"),i%10==1&&i%100!=11?a[0]:i%10>=2&&i%10<=4&&(i%100<10||i%100>=20)?a[1]:a[2]);var i,a}function s(t){return function(){return t+"о"+(11===this.hours()?"б":"")+"] LT"}}t.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(t,e){var s={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===t?s.nominative.slice(1,7).concat(s.nominative.slice(0,1)):t?s[/(\[[ВвУу]\]) ?dddd/.test(e)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(e)?"genitive":"nominative"][t.day()]:s.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:s("[Сьогодні "),nextDay:s("[Завтра "),lastDay:s("[Вчора "),nextWeek:s("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return s("[Минулої] dddd [").call(this);case 1:case 2:case 4:return s("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:e,m:e,mm:e,h:"годину",hh:e,d:"день",dd:e,M:"місяць",MM:e,y:"рік",yy:e},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(t){return/^(дня|вечора)$/.test(t)},meridiem:function(t,e,s){return t<4?"ночі":t<12?"ранку":t<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(t,e){switch(e){case"M":case"d":case"DDD":case"w":case"W":return t+"-й";case"D":return t+"-го";default:return t}},week:{dow:1,doy:7}})}(s(381))},3795:function(t,e,s){!function(t){"use strict";var e=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],s=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];t.defineLocale("ur",{months:e,monthsShort:e,weekdays:s,weekdaysShort:s,weekdaysMin:s,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(t){return"شام"===t},meridiem:function(t,e,s){return t<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(t){return t.replace(/،/g,",")},postformat:function(t){return t.replace(/,/g,"،")},week:{dow:1,doy:4}})}(s(381))},588:function(t,e,s){!function(t){"use strict";t.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(s(381))},6791:function(t,e,s){!function(t){"use strict";t.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(s(381))},5666:function(t,e,s){!function(t){"use strict";t.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(t){return/^ch$/i.test(t)},meridiem:function(t,e,s){return t<12?s?"sa":"SA":s?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(t){return t},week:{dow:1,doy:4}})}(s(381))},4378:function(t,e,s){!function(t){"use strict";t.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10;return t+(1==~~(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")},week:{dow:1,doy:4}})}(s(381))},5805:function(t,e,s){!function(t){"use strict";t.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(s(381))},3839:function(t,e,s){!function(t){"use strict";t.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(t,e){return 12===t&&(t=0),"凌晨"===e||"早上"===e||"上午"===e?t:"下午"===e||"晚上"===e?t+12:t>=11?t:t+12},meridiem:function(t,e,s){var i=100*t+e;return i<600?"凌晨":i<900?"早上":i<1130?"上午":i<1230?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(t){return t.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(t){return this.week()!==t.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";case"M":return t+"月";case"w":case"W":return t+"周";default:return t}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(s(381))},5726:function(t,e,s){!function(t){"use strict";t.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(t,e){return 12===t&&(t=0),"凌晨"===e||"早上"===e||"上午"===e?t:"中午"===e?t>=11?t:t+12:"下午"===e||"晚上"===e?t+12:void 0},meridiem:function(t,e,s){var i=100*t+e;return i<600?"凌晨":i<900?"早上":i<1200?"上午":1200===i?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";case"M":return t+"月";case"w":case"W":return t+"週";default:return t}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(s(381))},9807:function(t,e,s){!function(t){"use strict";t.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(t,e){return 12===t&&(t=0),"凌晨"===e||"早上"===e||"上午"===e?t:"中午"===e?t>=11?t:t+12:"下午"===e||"晚上"===e?t+12:void 0},meridiem:function(t,e,s){var i=100*t+e;return i<600?"凌晨":i<900?"早上":i<1130?"上午":i<1230?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";case"M":return t+"月";case"w":case"W":return t+"週";default:return t}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(s(381))},4152:function(t,e,s){!function(t){"use strict";t.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(t,e){return 12===t&&(t=0),"凌晨"===e||"早上"===e||"上午"===e?t:"中午"===e?t>=11?t:t+12:"下午"===e||"晚上"===e?t+12:void 0},meridiem:function(t,e,s){var i=100*t+e;return i<600?"凌晨":i<900?"早上":i<1130?"上午":i<1230?"中午":i<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(t,e){switch(e){case"d":case"D":case"DDD":return t+"日";case"M":return t+"月";case"w":case"W":return t+"週";default:return t}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(s(381))},6700:(t,e,s)=>{var i={"./af":2786,"./af.js":2786,"./ar":867,"./ar-dz":4130,"./ar-dz.js":4130,"./ar-kw":6135,"./ar-kw.js":6135,"./ar-ly":6440,"./ar-ly.js":6440,"./ar-ma":7702,"./ar-ma.js":7702,"./ar-sa":6040,"./ar-sa.js":6040,"./ar-tn":7100,"./ar-tn.js":7100,"./ar.js":867,"./az":1083,"./az.js":1083,"./be":9808,"./be.js":9808,"./bg":8338,"./bg.js":8338,"./bm":7438,"./bm.js":7438,"./bn":8905,"./bn-bd":6225,"./bn-bd.js":6225,"./bn.js":8905,"./bo":1560,"./bo.js":1560,"./br":1278,"./br.js":1278,"./bs":622,"./bs.js":622,"./ca":2468,"./ca.js":2468,"./cs":5822,"./cs.js":5822,"./cv":877,"./cv.js":877,"./cy":7373,"./cy.js":7373,"./da":4780,"./da.js":4780,"./de":9740,"./de-at":217,"./de-at.js":217,"./de-ch":894,"./de-ch.js":894,"./de.js":9740,"./dv":5300,"./dv.js":5300,"./el":837,"./el.js":837,"./en-au":8348,"./en-au.js":8348,"./en-ca":7925,"./en-ca.js":7925,"./en-gb":2243,"./en-gb.js":2243,"./en-ie":6436,"./en-ie.js":6436,"./en-il":7207,"./en-il.js":7207,"./en-in":4175,"./en-in.js":4175,"./en-nz":6319,"./en-nz.js":6319,"./en-sg":1662,"./en-sg.js":1662,"./eo":2915,"./eo.js":2915,"./es":5655,"./es-do":5251,"./es-do.js":5251,"./es-mx":6112,"./es-mx.js":6112,"./es-us":1146,"./es-us.js":1146,"./es.js":5655,"./et":5603,"./et.js":5603,"./eu":7763,"./eu.js":7763,"./fa":6959,"./fa.js":6959,"./fi":1897,"./fi.js":1897,"./fil":2549,"./fil.js":2549,"./fo":4694,"./fo.js":4694,"./fr":4470,"./fr-ca":3049,"./fr-ca.js":3049,"./fr-ch":2330,"./fr-ch.js":2330,"./fr.js":4470,"./fy":5044,"./fy.js":5044,"./ga":9295,"./ga.js":9295,"./gd":2101,"./gd.js":2101,"./gl":8794,"./gl.js":8794,"./gom-deva":7884,"./gom-deva.js":7884,"./gom-latn":3168,"./gom-latn.js":3168,"./gu":5349,"./gu.js":5349,"./he":4206,"./he.js":4206,"./hi":94,"./hi.js":94,"./hr":316,"./hr.js":316,"./hu":2138,"./hu.js":2138,"./hy-am":1423,"./hy-am.js":1423,"./id":9218,"./id.js":9218,"./is":135,"./is.js":135,"./it":626,"./it-ch":150,"./it-ch.js":150,"./it.js":626,"./ja":9183,"./ja.js":9183,"./jv":4286,"./jv.js":4286,"./ka":2105,"./ka.js":2105,"./kk":7772,"./kk.js":7772,"./km":8758,"./km.js":8758,"./kn":9282,"./kn.js":9282,"./ko":3730,"./ko.js":3730,"./ku":1408,"./ku.js":1408,"./ky":3291,"./ky.js":3291,"./lb":6841,"./lb.js":6841,"./lo":5466,"./lo.js":5466,"./lt":7010,"./lt.js":7010,"./lv":7595,"./lv.js":7595,"./me":9861,"./me.js":9861,"./mi":5493,"./mi.js":5493,"./mk":5966,"./mk.js":5966,"./ml":7341,"./ml.js":7341,"./mn":5115,"./mn.js":5115,"./mr":370,"./mr.js":370,"./ms":9847,"./ms-my":1237,"./ms-my.js":1237,"./ms.js":9847,"./mt":2126,"./mt.js":2126,"./my":6165,"./my.js":6165,"./nb":4924,"./nb.js":4924,"./ne":6744,"./ne.js":6744,"./nl":3901,"./nl-be":9814,"./nl-be.js":9814,"./nl.js":3901,"./nn":3877,"./nn.js":3877,"./oc-lnc":2135,"./oc-lnc.js":2135,"./pa-in":5858,"./pa-in.js":5858,"./pl":4495,"./pl.js":4495,"./pt":9520,"./pt-br":7971,"./pt-br.js":7971,"./pt.js":9520,"./ro":6459,"./ro.js":6459,"./ru":1793,"./ru.js":1793,"./sd":950,"./sd.js":950,"./se":490,"./se.js":490,"./si":124,"./si.js":124,"./sk":4249,"./sk.js":4249,"./sl":4985,"./sl.js":4985,"./sq":1104,"./sq.js":1104,"./sr":9131,"./sr-cyrl":9915,"./sr-cyrl.js":9915,"./sr.js":9131,"./ss":5893,"./ss.js":5893,"./sv":8760,"./sv.js":8760,"./sw":1172,"./sw.js":1172,"./ta":7333,"./ta.js":7333,"./te":3110,"./te.js":3110,"./tet":2095,"./tet.js":2095,"./tg":7321,"./tg.js":7321,"./th":9041,"./th.js":9041,"./tk":9005,"./tk.js":9005,"./tl-ph":5768,"./tl-ph.js":5768,"./tlh":9444,"./tlh.js":9444,"./tr":2397,"./tr.js":2397,"./tzl":8254,"./tzl.js":8254,"./tzm":1106,"./tzm-latn":699,"./tzm-latn.js":699,"./tzm.js":1106,"./ug-cn":9288,"./ug-cn.js":9288,"./uk":7691,"./uk.js":7691,"./ur":3795,"./ur.js":3795,"./uz":6791,"./uz-latn":588,"./uz-latn.js":588,"./uz.js":6791,"./vi":5666,"./vi.js":5666,"./x-pseudo":4378,"./x-pseudo.js":4378,"./yo":5805,"./yo.js":5805,"./zh-cn":3839,"./zh-cn.js":3839,"./zh-hk":5726,"./zh-hk.js":5726,"./zh-mo":9807,"./zh-mo.js":9807,"./zh-tw":4152,"./zh-tw.js":4152};function a(t){var e=n(t);return s(e)}function n(t){if(!s.o(i,t)){var e=new Error("Cannot find module '"+t+"'");throw e.code="MODULE_NOT_FOUND",e}return i[t]}a.keys=function(){return Object.keys(i)},a.resolve=n,t.exports=a,a.id=6700},381:function(t,e,s){(t=s.nmd(t)).exports=function(){"use strict";var e,i;function a(){return e.apply(null,arguments)}function n(t){return t instanceof Array||"[object Array]"===Object.prototype.toString.call(t)}function r(t){return null!=t&&"[object Object]"===Object.prototype.toString.call(t)}function o(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function d(t){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(t).length;var e;for(e in t)if(o(t,e))return!1;return!0}function l(t){return void 0===t}function _(t){return"number"==typeof t||"[object Number]"===Object.prototype.toString.call(t)}function h(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function u(t,e){var s,i=[],a=t.length;for(s=0;s<a;++s)i.push(e(t[s],s));return i}function c(t,e){for(var s in e)o(e,s)&&(t[s]=e[s]);return o(e,"toString")&&(t.toString=e.toString),o(e,"valueOf")&&(t.valueOf=e.valueOf),t}function m(t,e,s,i){return ve(t,e,s,i,!0).utc()}function f(t){return null==t._pf&&(t._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),t._pf}function p(t){if(null==t._isValid){var e=f(t),s=i.call(e.parsedDateParts,(function(t){return null!=t})),a=!isNaN(t._d.getTime())&&e.overflow<0&&!e.empty&&!e.invalidEra&&!e.invalidMonth&&!e.invalidWeekday&&!e.weekdayMismatch&&!e.nullInput&&!e.invalidFormat&&!e.userInvalidated&&(!e.meridiem||e.meridiem&&s);if(t._strict&&(a=a&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour),null!=Object.isFrozen&&Object.isFrozen(t))return a;t._isValid=a}return t._isValid}function M(t){var e=m(NaN);return null!=t?c(f(e),t):f(e).userInvalidated=!0,e}i=Array.prototype.some?Array.prototype.some:function(t){var e,s=Object(this),i=s.length>>>0;for(e=0;e<i;e++)if(e in s&&t.call(this,s[e],e,s))return!0;return!1};var g=a.momentProperties=[],y=!1;function L(t,e){var s,i,a,n=g.length;if(l(e._isAMomentObject)||(t._isAMomentObject=e._isAMomentObject),l(e._i)||(t._i=e._i),l(e._f)||(t._f=e._f),l(e._l)||(t._l=e._l),l(e._strict)||(t._strict=e._strict),l(e._tzm)||(t._tzm=e._tzm),l(e._isUTC)||(t._isUTC=e._isUTC),l(e._offset)||(t._offset=e._offset),l(e._pf)||(t._pf=f(e)),l(e._locale)||(t._locale=e._locale),n>0)for(s=0;s<n;s++)l(a=e[i=g[s]])||(t[i]=a);return t}function Y(t){L(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===y&&(y=!0,a.updateOffset(this),y=!1)}function b(t){return t instanceof Y||null!=t&&null!=t._isAMomentObject}function k(t){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function D(t,e){var s=!0;return c((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,t),s){var i,n,r,d=[],l=arguments.length;for(n=0;n<l;n++){if(i="","object"==typeof arguments[n]){for(r in i+="\n["+n+"] ",arguments[0])o(arguments[0],r)&&(i+=r+": "+arguments[0][r]+", ");i=i.slice(0,-2)}else i=arguments[n];d.push(i)}k(t+"\nArguments: "+Array.prototype.slice.call(d).join("")+"\n"+(new Error).stack),s=!1}return e.apply(this,arguments)}),e)}var v,x={};function w(t,e){null!=a.deprecationHandler&&a.deprecationHandler(t,e),x[t]||(k(e),x[t]=!0)}function T(t){return"undefined"!=typeof Function&&t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}function S(t,e){var s,i=c({},t);for(s in e)o(e,s)&&(r(t[s])&&r(e[s])?(i[s]={},c(i[s],t[s]),c(i[s],e[s])):null!=e[s]?i[s]=e[s]:delete i[s]);for(s in t)o(t,s)&&!o(e,s)&&r(t[s])&&(i[s]=c({},i[s]));return i}function H(t){null!=t&&this.set(t)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,v=Object.keys?Object.keys:function(t){var e,s=[];for(e in t)o(t,e)&&s.push(e);return s};function j(t,e,s){var i=""+Math.abs(t),a=e-i.length;return(t>=0?s?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+i}var P=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,O=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,A={},C={};function E(t,e,s,i){var a=i;"string"==typeof i&&(a=function(){return this[i]()}),t&&(C[t]=a),e&&(C[e[0]]=function(){return j(a.apply(this,arguments),e[1],e[2])}),s&&(C[s]=function(){return this.localeData().ordinal(a.apply(this,arguments),t)})}function W(t,e){return t.isValid()?(e=F(e,t.localeData()),A[e]=A[e]||function(t){var e,s,i,a=t.match(P);for(e=0,s=a.length;e<s;e++)C[a[e]]?a[e]=C[a[e]]:a[e]=(i=a[e]).match(/\[[\s\S]/)?i.replace(/^\[|\]$/g,""):i.replace(/\\/g,"");return function(e){var i,n="";for(i=0;i<s;i++)n+=T(a[i])?a[i].call(e,t):a[i];return n}}(e),A[e](t)):t.localeData().invalidDate()}function F(t,e){var s=5;function i(t){return e.longDateFormat(t)||t}for(O.lastIndex=0;s>=0&&O.test(t);)t=t.replace(O,i),O.lastIndex=0,s-=1;return t}var z={};function R(t,e){var s=t.toLowerCase();z[s]=z[s+"s"]=z[e]=t}function I(t){return"string"==typeof t?z[t]||z[t.toLowerCase()]:void 0}function N(t){var e,s,i={};for(s in t)o(t,s)&&(e=I(s))&&(i[e]=t[s]);return i}var V={};function B(t,e){V[t]=e}function J(t){return t%4==0&&t%100!=0||t%400==0}function $(t){return t<0?Math.ceil(t)||0:Math.floor(t)}function U(t){var e=+t,s=0;return 0!==e&&isFinite(e)&&(s=$(e)),s}function G(t,e){return function(s){return null!=s?(K(this,t,s),a.updateOffset(this,e),this):q(this,t)}}function q(t,e){return t.isValid()?t._d["get"+(t._isUTC?"UTC":"")+e]():NaN}function K(t,e,s){t.isValid()&&!isNaN(s)&&("FullYear"===e&&J(t.year())&&1===t.month()&&29===t.date()?(s=U(s),t._d["set"+(t._isUTC?"UTC":"")+e](s,t.month(),bt(s,t.month()))):t._d["set"+(t._isUTC?"UTC":"")+e](s))}var Z,X=/\d/,Q=/\d\d/,tt=/\d{3}/,et=/\d{4}/,st=/[+-]?\d{6}/,it=/\d\d?/,at=/\d\d\d\d?/,nt=/\d\d\d\d\d\d?/,rt=/\d{1,3}/,ot=/\d{1,4}/,dt=/[+-]?\d{1,6}/,lt=/\d+/,_t=/[+-]?\d+/,ht=/Z|[+-]\d\d:?\d\d/gi,ut=/Z|[+-]\d\d(?::?\d\d)?/gi,ct=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function mt(t,e,s){Z[t]=T(e)?e:function(t,i){return t&&s?s:e}}function ft(t,e){return o(Z,t)?Z[t](e._strict,e._locale):new RegExp(pt(t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(t,e,s,i,a){return e||s||i||a}))))}function pt(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}Z={};var Mt={};function gt(t,e){var s,i,a=e;for("string"==typeof t&&(t=[t]),_(e)&&(a=function(t,s){s[e]=U(t)}),i=t.length,s=0;s<i;s++)Mt[t[s]]=a}function yt(t,e){gt(t,(function(t,s,i,a){i._w=i._w||{},e(t,i._w,i,a)}))}function Lt(t,e,s){null!=e&&o(Mt,t)&&Mt[t](e,s._a,s,t)}var Yt;function bt(t,e){if(isNaN(t)||isNaN(e))return NaN;var s,i=(e%(s=12)+s)%s;return t+=(e-i)/12,1===i?J(t)?29:28:31-i%7%2}Yt=Array.prototype.indexOf?Array.prototype.indexOf:function(t){var e;for(e=0;e<this.length;++e)if(this[e]===t)return e;return-1},E("M",["MM",2],"Mo",(function(){return this.month()+1})),E("MMM",0,0,(function(t){return this.localeData().monthsShort(this,t)})),E("MMMM",0,0,(function(t){return this.localeData().months(this,t)})),R("month","M"),B("month",8),mt("M",it),mt("MM",it,Q),mt("MMM",(function(t,e){return e.monthsShortRegex(t)})),mt("MMMM",(function(t,e){return e.monthsRegex(t)})),gt(["M","MM"],(function(t,e){e[1]=U(t)-1})),gt(["MMM","MMMM"],(function(t,e,s,i){var a=s._locale.monthsParse(t,i,s._strict);null!=a?e[1]=a:f(s).invalidMonth=t}));var kt="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Dt="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),vt=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,xt=ct,wt=ct;function Tt(t,e,s){var i,a,n,r=t.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],i=0;i<12;++i)n=m([2e3,i]),this._shortMonthsParse[i]=this.monthsShort(n,"").toLocaleLowerCase(),this._longMonthsParse[i]=this.months(n,"").toLocaleLowerCase();return s?"MMM"===e?-1!==(a=Yt.call(this._shortMonthsParse,r))?a:null:-1!==(a=Yt.call(this._longMonthsParse,r))?a:null:"MMM"===e?-1!==(a=Yt.call(this._shortMonthsParse,r))||-1!==(a=Yt.call(this._longMonthsParse,r))?a:null:-1!==(a=Yt.call(this._longMonthsParse,r))||-1!==(a=Yt.call(this._shortMonthsParse,r))?a:null}function St(t,e){var s;if(!t.isValid())return t;if("string"==typeof e)if(/^\d+$/.test(e))e=U(e);else if(!_(e=t.localeData().monthsParse(e)))return t;return s=Math.min(t.date(),bt(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,s),t}function Ht(t){return null!=t?(St(this,t),a.updateOffset(this,!0),this):q(this,"Month")}function jt(){function t(t,e){return e.length-t.length}var e,s,i=[],a=[],n=[];for(e=0;e<12;e++)s=m([2e3,e]),i.push(this.monthsShort(s,"")),a.push(this.months(s,"")),n.push(this.months(s,"")),n.push(this.monthsShort(s,""));for(i.sort(t),a.sort(t),n.sort(t),e=0;e<12;e++)i[e]=pt(i[e]),a[e]=pt(a[e]);for(e=0;e<24;e++)n[e]=pt(n[e]);this._monthsRegex=new RegExp("^("+n.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+i.join("|")+")","i")}function Pt(t){return J(t)?366:365}E("Y",0,0,(function(){var t=this.year();return t<=9999?j(t,4):"+"+t})),E(0,["YY",2],0,(function(){return this.year()%100})),E(0,["YYYY",4],0,"year"),E(0,["YYYYY",5],0,"year"),E(0,["YYYYYY",6,!0],0,"year"),R("year","y"),B("year",1),mt("Y",_t),mt("YY",it,Q),mt("YYYY",ot,et),mt("YYYYY",dt,st),mt("YYYYYY",dt,st),gt(["YYYYY","YYYYYY"],0),gt("YYYY",(function(t,e){e[0]=2===t.length?a.parseTwoDigitYear(t):U(t)})),gt("YY",(function(t,e){e[0]=a.parseTwoDigitYear(t)})),gt("Y",(function(t,e){e[0]=parseInt(t,10)})),a.parseTwoDigitYear=function(t){return U(t)+(U(t)>68?1900:2e3)};var Ot=G("FullYear",!0);function At(t,e,s,i,a,n,r){var o;return t<100&&t>=0?(o=new Date(t+400,e,s,i,a,n,r),isFinite(o.getFullYear())&&o.setFullYear(t)):o=new Date(t,e,s,i,a,n,r),o}function Ct(t){var e,s;return t<100&&t>=0?((s=Array.prototype.slice.call(arguments))[0]=t+400,e=new Date(Date.UTC.apply(null,s)),isFinite(e.getUTCFullYear())&&e.setUTCFullYear(t)):e=new Date(Date.UTC.apply(null,arguments)),e}function Et(t,e,s){var i=7+e-s;return-(7+Ct(t,0,i).getUTCDay()-e)%7+i-1}function Wt(t,e,s,i,a){var n,r,o=1+7*(e-1)+(7+s-i)%7+Et(t,i,a);return o<=0?r=Pt(n=t-1)+o:o>Pt(t)?(n=t+1,r=o-Pt(t)):(n=t,r=o),{year:n,dayOfYear:r}}function Ft(t,e,s){var i,a,n=Et(t.year(),e,s),r=Math.floor((t.dayOfYear()-n-1)/7)+1;return r<1?i=r+zt(a=t.year()-1,e,s):r>zt(t.year(),e,s)?(i=r-zt(t.year(),e,s),a=t.year()+1):(a=t.year(),i=r),{week:i,year:a}}function zt(t,e,s){var i=Et(t,e,s),a=Et(t+1,e,s);return(Pt(t)-i+a)/7}E("w",["ww",2],"wo","week"),E("W",["WW",2],"Wo","isoWeek"),R("week","w"),R("isoWeek","W"),B("week",5),B("isoWeek",5),mt("w",it),mt("ww",it,Q),mt("W",it),mt("WW",it,Q),yt(["w","ww","W","WW"],(function(t,e,s,i){e[i.substr(0,1)]=U(t)}));function Rt(t,e){return t.slice(e,7).concat(t.slice(0,e))}E("d",0,"do","day"),E("dd",0,0,(function(t){return this.localeData().weekdaysMin(this,t)})),E("ddd",0,0,(function(t){return this.localeData().weekdaysShort(this,t)})),E("dddd",0,0,(function(t){return this.localeData().weekdays(this,t)})),E("e",0,0,"weekday"),E("E",0,0,"isoWeekday"),R("day","d"),R("weekday","e"),R("isoWeekday","E"),B("day",11),B("weekday",11),B("isoWeekday",11),mt("d",it),mt("e",it),mt("E",it),mt("dd",(function(t,e){return e.weekdaysMinRegex(t)})),mt("ddd",(function(t,e){return e.weekdaysShortRegex(t)})),mt("dddd",(function(t,e){return e.weekdaysRegex(t)})),yt(["dd","ddd","dddd"],(function(t,e,s,i){var a=s._locale.weekdaysParse(t,i,s._strict);null!=a?e.d=a:f(s).invalidWeekday=t})),yt(["d","e","E"],(function(t,e,s,i){e[i]=U(t)}));var It="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Nt="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Vt="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Bt=ct,Jt=ct,$t=ct;function Ut(t,e,s){var i,a,n,r=t.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],i=0;i<7;++i)n=m([2e3,1]).day(i),this._minWeekdaysParse[i]=this.weekdaysMin(n,"").toLocaleLowerCase(),this._shortWeekdaysParse[i]=this.weekdaysShort(n,"").toLocaleLowerCase(),this._weekdaysParse[i]=this.weekdays(n,"").toLocaleLowerCase();return s?"dddd"===e?-1!==(a=Yt.call(this._weekdaysParse,r))?a:null:"ddd"===e?-1!==(a=Yt.call(this._shortWeekdaysParse,r))?a:null:-1!==(a=Yt.call(this._minWeekdaysParse,r))?a:null:"dddd"===e?-1!==(a=Yt.call(this._weekdaysParse,r))||-1!==(a=Yt.call(this._shortWeekdaysParse,r))||-1!==(a=Yt.call(this._minWeekdaysParse,r))?a:null:"ddd"===e?-1!==(a=Yt.call(this._shortWeekdaysParse,r))||-1!==(a=Yt.call(this._weekdaysParse,r))||-1!==(a=Yt.call(this._minWeekdaysParse,r))?a:null:-1!==(a=Yt.call(this._minWeekdaysParse,r))||-1!==(a=Yt.call(this._weekdaysParse,r))||-1!==(a=Yt.call(this._shortWeekdaysParse,r))?a:null}function Gt(){function t(t,e){return e.length-t.length}var e,s,i,a,n,r=[],o=[],d=[],l=[];for(e=0;e<7;e++)s=m([2e3,1]).day(e),i=pt(this.weekdaysMin(s,"")),a=pt(this.weekdaysShort(s,"")),n=pt(this.weekdays(s,"")),r.push(i),o.push(a),d.push(n),l.push(i),l.push(a),l.push(n);r.sort(t),o.sort(t),d.sort(t),l.sort(t),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+r.join("|")+")","i")}function qt(){return this.hours()%12||12}function Kt(t,e){E(t,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)}))}function Zt(t,e){return e._meridiemParse}E("H",["HH",2],0,"hour"),E("h",["hh",2],0,qt),E("k",["kk",2],0,(function(){return this.hours()||24})),E("hmm",0,0,(function(){return""+qt.apply(this)+j(this.minutes(),2)})),E("hmmss",0,0,(function(){return""+qt.apply(this)+j(this.minutes(),2)+j(this.seconds(),2)})),E("Hmm",0,0,(function(){return""+this.hours()+j(this.minutes(),2)})),E("Hmmss",0,0,(function(){return""+this.hours()+j(this.minutes(),2)+j(this.seconds(),2)})),Kt("a",!0),Kt("A",!1),R("hour","h"),B("hour",13),mt("a",Zt),mt("A",Zt),mt("H",it),mt("h",it),mt("k",it),mt("HH",it,Q),mt("hh",it,Q),mt("kk",it,Q),mt("hmm",at),mt("hmmss",nt),mt("Hmm",at),mt("Hmmss",nt),gt(["H","HH"],3),gt(["k","kk"],(function(t,e,s){var i=U(t);e[3]=24===i?0:i})),gt(["a","A"],(function(t,e,s){s._isPm=s._locale.isPM(t),s._meridiem=t})),gt(["h","hh"],(function(t,e,s){e[3]=U(t),f(s).bigHour=!0})),gt("hmm",(function(t,e,s){var i=t.length-2;e[3]=U(t.substr(0,i)),e[4]=U(t.substr(i)),f(s).bigHour=!0})),gt("hmmss",(function(t,e,s){var i=t.length-4,a=t.length-2;e[3]=U(t.substr(0,i)),e[4]=U(t.substr(i,2)),e[5]=U(t.substr(a)),f(s).bigHour=!0})),gt("Hmm",(function(t,e,s){var i=t.length-2;e[3]=U(t.substr(0,i)),e[4]=U(t.substr(i))})),gt("Hmmss",(function(t,e,s){var i=t.length-4,a=t.length-2;e[3]=U(t.substr(0,i)),e[4]=U(t.substr(i,2)),e[5]=U(t.substr(a))}));var Xt=G("Hours",!0);var Qt,te={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:kt,monthsShort:Dt,week:{dow:0,doy:6},weekdays:It,weekdaysMin:Vt,weekdaysShort:Nt,meridiemParse:/[ap]\.?m?\.?/i},ee={},se={};function ie(t,e){var s,i=Math.min(t.length,e.length);for(s=0;s<i;s+=1)if(t[s]!==e[s])return s;return i}function ae(t){return t?t.toLowerCase().replace("_","-"):t}function ne(e){var i=null;if(void 0===ee[e]&&t&&t.exports&&function(t){return null!=t.match("^[^/\\\\]*$")}(e))try{i=Qt._abbr,s(6700)("./"+e),re(i)}catch(t){ee[e]=null}return ee[e]}function re(t,e){var s;return t&&((s=l(e)?de(t):oe(t,e))?Qt=s:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+t+" not found. Did you forget to load it?")),Qt._abbr}function oe(t,e){if(null!==e){var s,i=te;if(e.abbr=t,null!=ee[t])w("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),i=ee[t]._config;else if(null!=e.parentLocale)if(null!=ee[e.parentLocale])i=ee[e.parentLocale]._config;else{if(null==(s=ne(e.parentLocale)))return se[e.parentLocale]||(se[e.parentLocale]=[]),se[e.parentLocale].push({name:t,config:e}),null;i=s._config}return ee[t]=new H(S(i,e)),se[t]&&se[t].forEach((function(t){oe(t.name,t.config)})),re(t),ee[t]}return delete ee[t],null}function de(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return Qt;if(!n(t)){if(e=ne(t))return e;t=[t]}return function(t){for(var e,s,i,a,n=0;n<t.length;){for(e=(a=ae(t[n]).split("-")).length,s=(s=ae(t[n+1]))?s.split("-"):null;e>0;){if(i=ne(a.slice(0,e).join("-")))return i;if(s&&s.length>=e&&ie(a,s)>=e-1)break;e--}n++}return Qt}(t)}function le(t){var e,s=t._a;return s&&-2===f(t).overflow&&(e=s[1]<0||s[1]>11?1:s[2]<1||s[2]>bt(s[0],s[1])?2:s[3]<0||s[3]>24||24===s[3]&&(0!==s[4]||0!==s[5]||0!==s[6])?3:s[4]<0||s[4]>59?4:s[5]<0||s[5]>59?5:s[6]<0||s[6]>999?6:-1,f(t)._overflowDayOfYear&&(e<0||e>2)&&(e=2),f(t)._overflowWeeks&&-1===e&&(e=7),f(t)._overflowWeekday&&-1===e&&(e=8),f(t).overflow=e),t}var _e=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,he=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ue=/Z|[+-]\d\d(?::?\d\d)?/,ce=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],me=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],fe=/^\/?Date\((-?\d+)/i,pe=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,Me={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function ge(t){var e,s,i,a,n,r,o=t._i,d=_e.exec(o)||he.exec(o),l=ce.length,_=me.length;if(d){for(f(t).iso=!0,e=0,s=l;e<s;e++)if(ce[e][1].exec(d[1])){a=ce[e][0],i=!1!==ce[e][2];break}if(null==a)return void(t._isValid=!1);if(d[3]){for(e=0,s=_;e<s;e++)if(me[e][1].exec(d[3])){n=(d[2]||" ")+me[e][0];break}if(null==n)return void(t._isValid=!1)}if(!i&&null!=n)return void(t._isValid=!1);if(d[4]){if(!ue.exec(d[4]))return void(t._isValid=!1);r="Z"}t._f=a+(n||"")+(r||""),ke(t)}else t._isValid=!1}function ye(t){var e=parseInt(t,10);return e<=49?2e3+e:e<=999?1900+e:e}function Le(t){var e,s,i,a,n,r,o,d,l=pe.exec(t._i.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(s=l[4],i=l[3],a=l[2],n=l[5],r=l[6],o=l[7],d=[ye(s),Dt.indexOf(i),parseInt(a,10),parseInt(n,10),parseInt(r,10)],o&&d.push(parseInt(o,10)),e=d,!function(t,e,s){return!t||Nt.indexOf(t)===new Date(e[0],e[1],e[2]).getDay()||(f(s).weekdayMismatch=!0,s._isValid=!1,!1)}(l[1],e,t))return;t._a=e,t._tzm=function(t,e,s){if(t)return Me[t];if(e)return 0;var i=parseInt(s,10),a=i%100;return(i-a)/100*60+a}(l[8],l[9],l[10]),t._d=Ct.apply(null,t._a),t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),f(t).rfc2822=!0}else t._isValid=!1}function Ye(t,e,s){return null!=t?t:null!=e?e:s}function be(t){var e,s,i,n,r,o=[];if(!t._d){for(i=function(t){var e=new Date(a.now());return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}(t),t._w&&null==t._a[2]&&null==t._a[1]&&function(t){var e,s,i,a,n,r,o,d,l;null!=(e=t._w).GG||null!=e.W||null!=e.E?(n=1,r=4,s=Ye(e.GG,t._a[0],Ft(xe(),1,4).year),i=Ye(e.W,1),((a=Ye(e.E,1))<1||a>7)&&(d=!0)):(n=t._locale._week.dow,r=t._locale._week.doy,l=Ft(xe(),n,r),s=Ye(e.gg,t._a[0],l.year),i=Ye(e.w,l.week),null!=e.d?((a=e.d)<0||a>6)&&(d=!0):null!=e.e?(a=e.e+n,(e.e<0||e.e>6)&&(d=!0)):a=n),i<1||i>zt(s,n,r)?f(t)._overflowWeeks=!0:null!=d?f(t)._overflowWeekday=!0:(o=Wt(s,i,a,n,r),t._a[0]=o.year,t._dayOfYear=o.dayOfYear)}(t),null!=t._dayOfYear&&(r=Ye(t._a[0],i[0]),(t._dayOfYear>Pt(r)||0===t._dayOfYear)&&(f(t)._overflowDayOfYear=!0),s=Ct(r,0,t._dayOfYear),t._a[1]=s.getUTCMonth(),t._a[2]=s.getUTCDate()),e=0;e<3&&null==t._a[e];++e)t._a[e]=o[e]=i[e];for(;e<7;e++)t._a[e]=o[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[3]&&0===t._a[4]&&0===t._a[5]&&0===t._a[6]&&(t._nextDay=!0,t._a[3]=0),t._d=(t._useUTC?Ct:At).apply(null,o),n=t._useUTC?t._d.getUTCDay():t._d.getDay(),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[3]=24),t._w&&void 0!==t._w.d&&t._w.d!==n&&(f(t).weekdayMismatch=!0)}}function ke(t){if(t._f!==a.ISO_8601)if(t._f!==a.RFC_2822){t._a=[],f(t).empty=!0;var e,s,i,n,r,o,d,l=""+t._i,_=l.length,h=0;for(d=(i=F(t._f,t._locale).match(P)||[]).length,e=0;e<d;e++)n=i[e],(s=(l.match(ft(n,t))||[])[0])&&((r=l.substr(0,l.indexOf(s))).length>0&&f(t).unusedInput.push(r),l=l.slice(l.indexOf(s)+s.length),h+=s.length),C[n]?(s?f(t).empty=!1:f(t).unusedTokens.push(n),Lt(n,s,t)):t._strict&&!s&&f(t).unusedTokens.push(n);f(t).charsLeftOver=_-h,l.length>0&&f(t).unusedInput.push(l),t._a[3]<=12&&!0===f(t).bigHour&&t._a[3]>0&&(f(t).bigHour=void 0),f(t).parsedDateParts=t._a.slice(0),f(t).meridiem=t._meridiem,t._a[3]=function(t,e,s){var i;return null==s?e:null!=t.meridiemHour?t.meridiemHour(e,s):null!=t.isPM?((i=t.isPM(s))&&e<12&&(e+=12),i||12!==e||(e=0),e):e}(t._locale,t._a[3],t._meridiem),null!==(o=f(t).era)&&(t._a[0]=t._locale.erasConvertYear(o,t._a[0])),be(t),le(t)}else Le(t);else ge(t)}function De(t){var e=t._i,s=t._f;return t._locale=t._locale||de(t._l),null===e||void 0===s&&""===e?M({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),b(e)?new Y(le(e)):(h(e)?t._d=e:n(s)?function(t){var e,s,i,a,n,r,o=!1,d=t._f.length;if(0===d)return f(t).invalidFormat=!0,void(t._d=new Date(NaN));for(a=0;a<d;a++)n=0,r=!1,e=L({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[a],ke(e),p(e)&&(r=!0),n+=f(e).charsLeftOver,n+=10*f(e).unusedTokens.length,f(e).score=n,o?n<i&&(i=n,s=e):(null==i||n<i||r)&&(i=n,s=e,r&&(o=!0));c(t,s||e)}(t):s?ke(t):function(t){var e=t._i;l(e)?t._d=new Date(a.now()):h(e)?t._d=new Date(e.valueOf()):"string"==typeof e?function(t){var e=fe.exec(t._i);null===e?(ge(t),!1===t._isValid&&(delete t._isValid,Le(t),!1===t._isValid&&(delete t._isValid,t._strict?t._isValid=!1:a.createFromInputFallback(t)))):t._d=new Date(+e[1])}(t):n(e)?(t._a=u(e.slice(0),(function(t){return parseInt(t,10)})),be(t)):r(e)?function(t){if(!t._d){var e=N(t._i),s=void 0===e.day?e.date:e.day;t._a=u([e.year,e.month,s,e.hour,e.minute,e.second,e.millisecond],(function(t){return t&&parseInt(t,10)})),be(t)}}(t):_(e)?t._d=new Date(e):a.createFromInputFallback(t)}(t),p(t)||(t._d=null),t))}function ve(t,e,s,i,a){var o,l={};return!0!==e&&!1!==e||(i=e,e=void 0),!0!==s&&!1!==s||(i=s,s=void 0),(r(t)&&d(t)||n(t)&&0===t.length)&&(t=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=a,l._l=s,l._i=t,l._f=e,l._strict=i,(o=new Y(le(De(l))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function xe(t,e,s,i){return ve(t,e,s,i,!1)}a.createFromInputFallback=D("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var we=D("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var t=xe.apply(null,arguments);return this.isValid()&&t.isValid()?t<this?this:t:M()})),Te=D("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var t=xe.apply(null,arguments);return this.isValid()&&t.isValid()?t>this?this:t:M()}));function Se(t,e){var s,i;if(1===e.length&&n(e[0])&&(e=e[0]),!e.length)return xe();for(s=e[0],i=1;i<e.length;++i)e[i].isValid()&&!e[i][t](s)||(s=e[i]);return s}var He=["year","quarter","month","week","day","hour","minute","second","millisecond"];function je(t){var e=N(t),s=e.year||0,i=e.quarter||0,a=e.month||0,n=e.week||e.isoWeek||0,r=e.day||0,d=e.hour||0,l=e.minute||0,_=e.second||0,h=e.millisecond||0;this._isValid=function(t){var e,s,i=!1,a=He.length;for(e in t)if(o(t,e)&&(-1===Yt.call(He,e)||null!=t[e]&&isNaN(t[e])))return!1;for(s=0;s<a;++s)if(t[He[s]]){if(i)return!1;parseFloat(t[He[s]])!==U(t[He[s]])&&(i=!0)}return!0}(e),this._milliseconds=+h+1e3*_+6e4*l+1e3*d*60*60,this._days=+r+7*n,this._months=+a+3*i+12*s,this._data={},this._locale=de(),this._bubble()}function Pe(t){return t instanceof je}function Oe(t){return t<0?-1*Math.round(-1*t):Math.round(t)}function Ae(t,e){E(t,0,0,(function(){var t=this.utcOffset(),s="+";return t<0&&(t=-t,s="-"),s+j(~~(t/60),2)+e+j(~~t%60,2)}))}Ae("Z",":"),Ae("ZZ",""),mt("Z",ut),mt("ZZ",ut),gt(["Z","ZZ"],(function(t,e,s){s._useUTC=!0,s._tzm=Ee(ut,t)}));var Ce=/([\+\-]|\d\d)/gi;function Ee(t,e){var s,i,a=(e||"").match(t);return null===a?null:0===(i=60*(s=((a[a.length-1]||[])+"").match(Ce)||["-",0,0])[1]+U(s[2]))?0:"+"===s[0]?i:-i}function We(t,e){var s,i;return e._isUTC?(s=e.clone(),i=(b(t)||h(t)?t.valueOf():xe(t).valueOf())-s.valueOf(),s._d.setTime(s._d.valueOf()+i),a.updateOffset(s,!1),s):xe(t).local()}function Fe(t){return-Math.round(t._d.getTimezoneOffset())}function ze(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var Re=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Ie=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Ne(t,e){var s,i,a,n,r,d,l=t,h=null;return Pe(t)?l={ms:t._milliseconds,d:t._days,M:t._months}:_(t)||!isNaN(+t)?(l={},e?l[e]=+t:l.milliseconds=+t):(h=Re.exec(t))?(s="-"===h[1]?-1:1,l={y:0,d:U(h[2])*s,h:U(h[3])*s,m:U(h[4])*s,s:U(h[5])*s,ms:U(Oe(1e3*h[6]))*s}):(h=Ie.exec(t))?(s="-"===h[1]?-1:1,l={y:Ve(h[2],s),M:Ve(h[3],s),w:Ve(h[4],s),d:Ve(h[5],s),h:Ve(h[6],s),m:Ve(h[7],s),s:Ve(h[8],s)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(n=xe(l.from),r=xe(l.to),a=n.isValid()&&r.isValid()?(r=We(r,n),n.isBefore(r)?d=Be(n,r):((d=Be(r,n)).milliseconds=-d.milliseconds,d.months=-d.months),d):{milliseconds:0,months:0},(l={}).ms=a.milliseconds,l.M=a.months),i=new je(l),Pe(t)&&o(t,"_locale")&&(i._locale=t._locale),Pe(t)&&o(t,"_isValid")&&(i._isValid=t._isValid),i}function Ve(t,e){var s=t&&parseFloat(t.replace(",","."));return(isNaN(s)?0:s)*e}function Be(t,e){var s={};return s.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(s.months,"M").isAfter(e)&&--s.months,s.milliseconds=+e-+t.clone().add(s.months,"M"),s}function Je(t,e){return function(s,i){var a;return null===i||isNaN(+i)||(w(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=s,s=i,i=a),$e(this,Ne(s,i),t),this}}function $e(t,e,s,i){var n=e._milliseconds,r=Oe(e._days),o=Oe(e._months);t.isValid()&&(i=null==i||i,o&&St(t,q(t,"Month")+o*s),r&&K(t,"Date",q(t,"Date")+r*s),n&&t._d.setTime(t._d.valueOf()+n*s),i&&a.updateOffset(t,r||o))}Ne.fn=je.prototype,Ne.invalid=function(){return Ne(NaN)};var Ue=Je(1,"add"),Ge=Je(-1,"subtract");function qe(t){return"string"==typeof t||t instanceof String}function Ke(t){return b(t)||h(t)||qe(t)||_(t)||function(t){var e=n(t),s=!1;return e&&(s=0===t.filter((function(e){return!_(e)&&qe(t)})).length),e&&s}(t)||function(t){var e,s,i=r(t)&&!d(t),a=!1,n=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"],l=n.length;for(e=0;e<l;e+=1)s=n[e],a=a||o(t,s);return i&&a}(t)||null==t}function Ze(t){var e,s=r(t)&&!d(t),i=!1,a=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(e=0;e<a.length;e+=1)i=i||o(t,a[e]);return s&&i}function Xe(t,e){if(t.date()<e.date())return-Xe(e,t);var s=12*(e.year()-t.year())+(e.month()-t.month()),i=t.clone().add(s,"months");return-(s+(e-i<0?(e-i)/(i-t.clone().add(s-1,"months")):(e-i)/(t.clone().add(s+1,"months")-i)))||0}function Qe(t){var e;return void 0===t?this._locale._abbr:(null!=(e=de(t))&&(this._locale=e),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var ts=D("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(t){return void 0===t?this.localeData():this.locale(t)}));function es(){return this._locale}var ss=1e3,is=6e4,as=36e5,ns=126227808e5;function rs(t,e){return(t%e+e)%e}function os(t,e,s){return t<100&&t>=0?new Date(t+400,e,s)-ns:new Date(t,e,s).valueOf()}function ds(t,e,s){return t<100&&t>=0?Date.UTC(t+400,e,s)-ns:Date.UTC(t,e,s)}function ls(t,e){return e.erasAbbrRegex(t)}function _s(){var t,e,s=[],i=[],a=[],n=[],r=this.eras();for(t=0,e=r.length;t<e;++t)i.push(pt(r[t].name)),s.push(pt(r[t].abbr)),a.push(pt(r[t].narrow)),n.push(pt(r[t].name)),n.push(pt(r[t].abbr)),n.push(pt(r[t].narrow));this._erasRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+i.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+s.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+a.join("|")+")","i")}function hs(t,e){E(0,[t,t.length],0,e)}function us(t,e,s,i,a){var n;return null==t?Ft(this,i,a).year:(e>(n=zt(t,i,a))&&(e=n),cs.call(this,t,e,s,i,a))}function cs(t,e,s,i,a){var n=Wt(t,e,s,i,a),r=Ct(n.year,0,n.dayOfYear);return this.year(r.getUTCFullYear()),this.month(r.getUTCMonth()),this.date(r.getUTCDate()),this}E("N",0,0,"eraAbbr"),E("NN",0,0,"eraAbbr"),E("NNN",0,0,"eraAbbr"),E("NNNN",0,0,"eraName"),E("NNNNN",0,0,"eraNarrow"),E("y",["y",1],"yo","eraYear"),E("y",["yy",2],0,"eraYear"),E("y",["yyy",3],0,"eraYear"),E("y",["yyyy",4],0,"eraYear"),mt("N",ls),mt("NN",ls),mt("NNN",ls),mt("NNNN",(function(t,e){return e.erasNameRegex(t)})),mt("NNNNN",(function(t,e){return e.erasNarrowRegex(t)})),gt(["N","NN","NNN","NNNN","NNNNN"],(function(t,e,s,i){var a=s._locale.erasParse(t,i,s._strict);a?f(s).era=a:f(s).invalidEra=t})),mt("y",lt),mt("yy",lt),mt("yyy",lt),mt("yyyy",lt),mt("yo",(function(t,e){return e._eraYearOrdinalRegex||lt})),gt(["y","yy","yyy","yyyy"],0),gt(["yo"],(function(t,e,s,i){var a;s._locale._eraYearOrdinalRegex&&(a=t.match(s._locale._eraYearOrdinalRegex)),s._locale.eraYearOrdinalParse?e[0]=s._locale.eraYearOrdinalParse(t,a):e[0]=parseInt(t,10)})),E(0,["gg",2],0,(function(){return this.weekYear()%100})),E(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),hs("gggg","weekYear"),hs("ggggg","weekYear"),hs("GGGG","isoWeekYear"),hs("GGGGG","isoWeekYear"),R("weekYear","gg"),R("isoWeekYear","GG"),B("weekYear",1),B("isoWeekYear",1),mt("G",_t),mt("g",_t),mt("GG",it,Q),mt("gg",it,Q),mt("GGGG",ot,et),mt("gggg",ot,et),mt("GGGGG",dt,st),mt("ggggg",dt,st),yt(["gggg","ggggg","GGGG","GGGGG"],(function(t,e,s,i){e[i.substr(0,2)]=U(t)})),yt(["gg","GG"],(function(t,e,s,i){e[i]=a.parseTwoDigitYear(t)})),E("Q",0,"Qo","quarter"),R("quarter","Q"),B("quarter",7),mt("Q",X),gt("Q",(function(t,e){e[1]=3*(U(t)-1)})),E("D",["DD",2],"Do","date"),R("date","D"),B("date",9),mt("D",it),mt("DD",it,Q),mt("Do",(function(t,e){return t?e._dayOfMonthOrdinalParse||e._ordinalParse:e._dayOfMonthOrdinalParseLenient})),gt(["D","DD"],2),gt("Do",(function(t,e){e[2]=U(t.match(it)[0])}));var ms=G("Date",!0);E("DDD",["DDDD",3],"DDDo","dayOfYear"),R("dayOfYear","DDD"),B("dayOfYear",4),mt("DDD",rt),mt("DDDD",tt),gt(["DDD","DDDD"],(function(t,e,s){s._dayOfYear=U(t)})),E("m",["mm",2],0,"minute"),R("minute","m"),B("minute",14),mt("m",it),mt("mm",it,Q),gt(["m","mm"],4);var fs=G("Minutes",!1);E("s",["ss",2],0,"second"),R("second","s"),B("second",15),mt("s",it),mt("ss",it,Q),gt(["s","ss"],5);var ps,Ms,gs=G("Seconds",!1);for(E("S",0,0,(function(){return~~(this.millisecond()/100)})),E(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),E(0,["SSS",3],0,"millisecond"),E(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),E(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),E(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),E(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),E(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),E(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),R("millisecond","ms"),B("millisecond",16),mt("S",rt,X),mt("SS",rt,Q),mt("SSS",rt,tt),ps="SSSS";ps.length<=9;ps+="S")mt(ps,lt);function ys(t,e){e[6]=U(1e3*("0."+t))}for(ps="S";ps.length<=9;ps+="S")gt(ps,ys);Ms=G("Milliseconds",!1),E("z",0,0,"zoneAbbr"),E("zz",0,0,"zoneName");var Ls=Y.prototype;function Ys(t){return t}Ls.add=Ue,Ls.calendar=function(t,e){1===arguments.length&&(arguments[0]?Ke(arguments[0])?(t=arguments[0],e=void 0):Ze(arguments[0])&&(e=arguments[0],t=void 0):(t=void 0,e=void 0));var s=t||xe(),i=We(s,this).startOf("day"),n=a.calendarFormat(this,i)||"sameElse",r=e&&(T(e[n])?e[n].call(this,s):e[n]);return this.format(r||this.localeData().calendar(n,this,xe(s)))},Ls.clone=function(){return new Y(this)},Ls.diff=function(t,e,s){var i,a,n;if(!this.isValid())return NaN;if(!(i=We(t,this)).isValid())return NaN;switch(a=6e4*(i.utcOffset()-this.utcOffset()),e=I(e)){case"year":n=Xe(this,i)/12;break;case"month":n=Xe(this,i);break;case"quarter":n=Xe(this,i)/3;break;case"second":n=(this-i)/1e3;break;case"minute":n=(this-i)/6e4;break;case"hour":n=(this-i)/36e5;break;case"day":n=(this-i-a)/864e5;break;case"week":n=(this-i-a)/6048e5;break;default:n=this-i}return s?n:$(n)},Ls.endOf=function(t){var e,s;if(void 0===(t=I(t))||"millisecond"===t||!this.isValid())return this;switch(s=this._isUTC?ds:os,t){case"year":e=s(this.year()+1,0,1)-1;break;case"quarter":e=s(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":e=s(this.year(),this.month()+1,1)-1;break;case"week":e=s(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":e=s(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":e=s(this.year(),this.month(),this.date()+1)-1;break;case"hour":e=this._d.valueOf(),e+=as-rs(e+(this._isUTC?0:this.utcOffset()*is),as)-1;break;case"minute":e=this._d.valueOf(),e+=is-rs(e,is)-1;break;case"second":e=this._d.valueOf(),e+=ss-rs(e,ss)-1}return this._d.setTime(e),a.updateOffset(this,!0),this},Ls.format=function(t){t||(t=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var e=W(this,t);return this.localeData().postformat(e)},Ls.from=function(t,e){return this.isValid()&&(b(t)&&t.isValid()||xe(t).isValid())?Ne({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},Ls.fromNow=function(t){return this.from(xe(),t)},Ls.to=function(t,e){return this.isValid()&&(b(t)&&t.isValid()||xe(t).isValid())?Ne({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},Ls.toNow=function(t){return this.to(xe(),t)},Ls.get=function(t){return T(this[t=I(t)])?this[t]():this},Ls.invalidAt=function(){return f(this).overflow},Ls.isAfter=function(t,e){var s=b(t)?t:xe(t);return!(!this.isValid()||!s.isValid())&&("millisecond"===(e=I(e)||"millisecond")?this.valueOf()>s.valueOf():s.valueOf()<this.clone().startOf(e).valueOf())},Ls.isBefore=function(t,e){var s=b(t)?t:xe(t);return!(!this.isValid()||!s.isValid())&&("millisecond"===(e=I(e)||"millisecond")?this.valueOf()<s.valueOf():this.clone().endOf(e).valueOf()<s.valueOf())},Ls.isBetween=function(t,e,s,i){var a=b(t)?t:xe(t),n=b(e)?e:xe(e);return!!(this.isValid()&&a.isValid()&&n.isValid())&&("("===(i=i||"()")[0]?this.isAfter(a,s):!this.isBefore(a,s))&&(")"===i[1]?this.isBefore(n,s):!this.isAfter(n,s))},Ls.isSame=function(t,e){var s,i=b(t)?t:xe(t);return!(!this.isValid()||!i.isValid())&&("millisecond"===(e=I(e)||"millisecond")?this.valueOf()===i.valueOf():(s=i.valueOf(),this.clone().startOf(e).valueOf()<=s&&s<=this.clone().endOf(e).valueOf()))},Ls.isSameOrAfter=function(t,e){return this.isSame(t,e)||this.isAfter(t,e)},Ls.isSameOrBefore=function(t,e){return this.isSame(t,e)||this.isBefore(t,e)},Ls.isValid=function(){return p(this)},Ls.lang=ts,Ls.locale=Qe,Ls.localeData=es,Ls.max=Te,Ls.min=we,Ls.parsingFlags=function(){return c({},f(this))},Ls.set=function(t,e){if("object"==typeof t){var s,i=function(t){var e,s=[];for(e in t)o(t,e)&&s.push({unit:e,priority:V[e]});return s.sort((function(t,e){return t.priority-e.priority})),s}(t=N(t)),a=i.length;for(s=0;s<a;s++)this[i[s].unit](t[i[s].unit])}else if(T(this[t=I(t)]))return this[t](e);return this},Ls.startOf=function(t){var e,s;if(void 0===(t=I(t))||"millisecond"===t||!this.isValid())return this;switch(s=this._isUTC?ds:os,t){case"year":e=s(this.year(),0,1);break;case"quarter":e=s(this.year(),this.month()-this.month()%3,1);break;case"month":e=s(this.year(),this.month(),1);break;case"week":e=s(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":e=s(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":e=s(this.year(),this.month(),this.date());break;case"hour":e=this._d.valueOf(),e-=rs(e+(this._isUTC?0:this.utcOffset()*is),as);break;case"minute":e=this._d.valueOf(),e-=rs(e,is);break;case"second":e=this._d.valueOf(),e-=rs(e,ss)}return this._d.setTime(e),a.updateOffset(this,!0),this},Ls.subtract=Ge,Ls.toArray=function(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]},Ls.toObject=function(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}},Ls.toDate=function(){return new Date(this.valueOf())},Ls.toISOString=function(t){if(!this.isValid())return null;var e=!0!==t,s=e?this.clone().utc():this;return s.year()<0||s.year()>9999?W(s,e?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):T(Date.prototype.toISOString)?e?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",W(s,"Z")):W(s,e?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},Ls.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var t,e,s,i="moment",a="";return this.isLocal()||(i=0===this.utcOffset()?"moment.utc":"moment.parseZone",a="Z"),t="["+i+'("]',e=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY","-MM-DD[T]HH:mm:ss.SSS",s=a+'[")]',this.format(t+e+"-MM-DD[T]HH:mm:ss.SSS"+s)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(Ls[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),Ls.toJSON=function(){return this.isValid()?this.toISOString():null},Ls.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Ls.unix=function(){return Math.floor(this.valueOf()/1e3)},Ls.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Ls.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Ls.eraName=function(){var t,e,s,i=this.localeData().eras();for(t=0,e=i.length;t<e;++t){if(s=this.clone().startOf("day").valueOf(),i[t].since<=s&&s<=i[t].until)return i[t].name;if(i[t].until<=s&&s<=i[t].since)return i[t].name}return""},Ls.eraNarrow=function(){var t,e,s,i=this.localeData().eras();for(t=0,e=i.length;t<e;++t){if(s=this.clone().startOf("day").valueOf(),i[t].since<=s&&s<=i[t].until)return i[t].narrow;if(i[t].until<=s&&s<=i[t].since)return i[t].narrow}return""},Ls.eraAbbr=function(){var t,e,s,i=this.localeData().eras();for(t=0,e=i.length;t<e;++t){if(s=this.clone().startOf("day").valueOf(),i[t].since<=s&&s<=i[t].until)return i[t].abbr;if(i[t].until<=s&&s<=i[t].since)return i[t].abbr}return""},Ls.eraYear=function(){var t,e,s,i,n=this.localeData().eras();for(t=0,e=n.length;t<e;++t)if(s=n[t].since<=n[t].until?1:-1,i=this.clone().startOf("day").valueOf(),n[t].since<=i&&i<=n[t].until||n[t].until<=i&&i<=n[t].since)return(this.year()-a(n[t].since).year())*s+n[t].offset;return this.year()},Ls.year=Ot,Ls.isLeapYear=function(){return J(this.year())},Ls.weekYear=function(t){return us.call(this,t,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},Ls.isoWeekYear=function(t){return us.call(this,t,this.isoWeek(),this.isoWeekday(),1,4)},Ls.quarter=Ls.quarters=function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},Ls.month=Ht,Ls.daysInMonth=function(){return bt(this.year(),this.month())},Ls.week=Ls.weeks=function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},Ls.isoWeek=Ls.isoWeeks=function(t){var e=Ft(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},Ls.weeksInYear=function(){var t=this.localeData()._week;return zt(this.year(),t.dow,t.doy)},Ls.weeksInWeekYear=function(){var t=this.localeData()._week;return zt(this.weekYear(),t.dow,t.doy)},Ls.isoWeeksInYear=function(){return zt(this.year(),1,4)},Ls.isoWeeksInISOWeekYear=function(){return zt(this.isoWeekYear(),1,4)},Ls.date=ms,Ls.day=Ls.days=function(t){if(!this.isValid())return null!=t?this:NaN;var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=function(t,e){return"string"!=typeof t?t:isNaN(t)?"number"==typeof(t=e.weekdaysParse(t))?t:null:parseInt(t,10)}(t,this.localeData()),this.add(t-e,"d")):e},Ls.weekday=function(t){if(!this.isValid())return null!=t?this:NaN;var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")},Ls.isoWeekday=function(t){if(!this.isValid())return null!=t?this:NaN;if(null!=t){var e=function(t,e){return"string"==typeof t?e.weekdaysParse(t)%7||7:isNaN(t)?null:t}(t,this.localeData());return this.day(this.day()%7?e:e-7)}return this.day()||7},Ls.dayOfYear=function(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},Ls.hour=Ls.hours=Xt,Ls.minute=Ls.minutes=fs,Ls.second=Ls.seconds=gs,Ls.millisecond=Ls.milliseconds=Ms,Ls.utcOffset=function(t,e,s){var i,n=this._offset||0;if(!this.isValid())return null!=t?this:NaN;if(null!=t){if("string"==typeof t){if(null===(t=Ee(ut,t)))return this}else Math.abs(t)<16&&!s&&(t*=60);return!this._isUTC&&e&&(i=Fe(this)),this._offset=t,this._isUTC=!0,null!=i&&this.add(i,"m"),n!==t&&(!e||this._changeInProgress?$e(this,Ne(t-n,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?n:Fe(this)},Ls.utc=function(t){return this.utcOffset(0,t)},Ls.local=function(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(Fe(this),"m")),this},Ls.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var t=Ee(ht,this._i);null!=t?this.utcOffset(t):this.utcOffset(0,!0)}return this},Ls.hasAlignedHourOffset=function(t){return!!this.isValid()&&(t=t?xe(t).utcOffset():0,(this.utcOffset()-t)%60==0)},Ls.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Ls.isLocal=function(){return!!this.isValid()&&!this._isUTC},Ls.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Ls.isUtc=ze,Ls.isUTC=ze,Ls.zoneAbbr=function(){return this._isUTC?"UTC":""},Ls.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Ls.dates=D("dates accessor is deprecated. Use date instead.",ms),Ls.months=D("months accessor is deprecated. Use month instead",Ht),Ls.years=D("years accessor is deprecated. Use year instead",Ot),Ls.zone=D("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()})),Ls.isDSTShifted=D("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var t,e={};return L(e,this),(e=De(e))._a?(t=e._isUTC?m(e._a):xe(e._a),this._isDSTShifted=this.isValid()&&function(t,e,s){var i,a=Math.min(t.length,e.length),n=Math.abs(t.length-e.length),r=0;for(i=0;i<a;i++)(s&&t[i]!==e[i]||!s&&U(t[i])!==U(e[i]))&&r++;return r+n}(e._a,t.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var bs=H.prototype;function ks(t,e,s,i){var a=de(),n=m().set(i,e);return a[s](n,t)}function Ds(t,e,s){if(_(t)&&(e=t,t=void 0),t=t||"",null!=e)return ks(t,e,s,"month");var i,a=[];for(i=0;i<12;i++)a[i]=ks(t,i,s,"month");return a}function vs(t,e,s,i){"boolean"==typeof t?(_(e)&&(s=e,e=void 0),e=e||""):(s=e=t,t=!1,_(e)&&(s=e,e=void 0),e=e||"");var a,n=de(),r=t?n._week.dow:0,o=[];if(null!=s)return ks(e,(s+r)%7,i,"day");for(a=0;a<7;a++)o[a]=ks(e,(a+r)%7,i,"day");return o}bs.calendar=function(t,e,s){var i=this._calendar[t]||this._calendar.sameElse;return T(i)?i.call(e,s):i},bs.longDateFormat=function(t){var e=this._longDateFormat[t],s=this._longDateFormat[t.toUpperCase()];return e||!s?e:(this._longDateFormat[t]=s.match(P).map((function(t){return"MMMM"===t||"MM"===t||"DD"===t||"dddd"===t?t.slice(1):t})).join(""),this._longDateFormat[t])},bs.invalidDate=function(){return this._invalidDate},bs.ordinal=function(t){return this._ordinal.replace("%d",t)},bs.preparse=Ys,bs.postformat=Ys,bs.relativeTime=function(t,e,s,i){var a=this._relativeTime[s];return T(a)?a(t,e,s,i):a.replace(/%d/i,t)},bs.pastFuture=function(t,e){var s=this._relativeTime[t>0?"future":"past"];return T(s)?s(e):s.replace(/%s/i,e)},bs.set=function(t){var e,s;for(s in t)o(t,s)&&(T(e=t[s])?this[s]=e:this["_"+s]=e);this._config=t,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},bs.eras=function(t,e){var s,i,n,r=this._eras||de("en")._eras;for(s=0,i=r.length;s<i;++s)switch("string"==typeof r[s].since&&(n=a(r[s].since).startOf("day"),r[s].since=n.valueOf()),typeof r[s].until){case"undefined":r[s].until=1/0;break;case"string":n=a(r[s].until).startOf("day").valueOf(),r[s].until=n.valueOf()}return r},bs.erasParse=function(t,e,s){var i,a,n,r,o,d=this.eras();for(t=t.toUpperCase(),i=0,a=d.length;i<a;++i)if(n=d[i].name.toUpperCase(),r=d[i].abbr.toUpperCase(),o=d[i].narrow.toUpperCase(),s)switch(e){case"N":case"NN":case"NNN":if(r===t)return d[i];break;case"NNNN":if(n===t)return d[i];break;case"NNNNN":if(o===t)return d[i]}else if([n,r,o].indexOf(t)>=0)return d[i]},bs.erasConvertYear=function(t,e){var s=t.since<=t.until?1:-1;return void 0===e?a(t.since).year():a(t.since).year()+(e-t.offset)*s},bs.erasAbbrRegex=function(t){return o(this,"_erasAbbrRegex")||_s.call(this),t?this._erasAbbrRegex:this._erasRegex},bs.erasNameRegex=function(t){return o(this,"_erasNameRegex")||_s.call(this),t?this._erasNameRegex:this._erasRegex},bs.erasNarrowRegex=function(t){return o(this,"_erasNarrowRegex")||_s.call(this),t?this._erasNarrowRegex:this._erasRegex},bs.months=function(t,e){return t?n(this._months)?this._months[t.month()]:this._months[(this._months.isFormat||vt).test(e)?"format":"standalone"][t.month()]:n(this._months)?this._months:this._months.standalone},bs.monthsShort=function(t,e){return t?n(this._monthsShort)?this._monthsShort[t.month()]:this._monthsShort[vt.test(e)?"format":"standalone"][t.month()]:n(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},bs.monthsParse=function(t,e,s){var i,a,n;if(this._monthsParseExact)return Tt.call(this,t,e,s);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),i=0;i<12;i++){if(a=m([2e3,i]),s&&!this._longMonthsParse[i]&&(this._longMonthsParse[i]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[i]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),s||this._monthsParse[i]||(n="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[i]=new RegExp(n.replace(".",""),"i")),s&&"MMMM"===e&&this._longMonthsParse[i].test(t))return i;if(s&&"MMM"===e&&this._shortMonthsParse[i].test(t))return i;if(!s&&this._monthsParse[i].test(t))return i}},bs.monthsRegex=function(t){return this._monthsParseExact?(o(this,"_monthsRegex")||jt.call(this),t?this._monthsStrictRegex:this._monthsRegex):(o(this,"_monthsRegex")||(this._monthsRegex=wt),this._monthsStrictRegex&&t?this._monthsStrictRegex:this._monthsRegex)},bs.monthsShortRegex=function(t){return this._monthsParseExact?(o(this,"_monthsRegex")||jt.call(this),t?this._monthsShortStrictRegex:this._monthsShortRegex):(o(this,"_monthsShortRegex")||(this._monthsShortRegex=xt),this._monthsShortStrictRegex&&t?this._monthsShortStrictRegex:this._monthsShortRegex)},bs.week=function(t){return Ft(t,this._week.dow,this._week.doy).week},bs.firstDayOfYear=function(){return this._week.doy},bs.firstDayOfWeek=function(){return this._week.dow},bs.weekdays=function(t,e){var s=n(this._weekdays)?this._weekdays:this._weekdays[t&&!0!==t&&this._weekdays.isFormat.test(e)?"format":"standalone"];return!0===t?Rt(s,this._week.dow):t?s[t.day()]:s},bs.weekdaysMin=function(t){return!0===t?Rt(this._weekdaysMin,this._week.dow):t?this._weekdaysMin[t.day()]:this._weekdaysMin},bs.weekdaysShort=function(t){return!0===t?Rt(this._weekdaysShort,this._week.dow):t?this._weekdaysShort[t.day()]:this._weekdaysShort},bs.weekdaysParse=function(t,e,s){var i,a,n;if(this._weekdaysParseExact)return Ut.call(this,t,e,s);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),i=0;i<7;i++){if(a=m([2e3,1]).day(i),s&&!this._fullWeekdaysParse[i]&&(this._fullWeekdaysParse[i]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[i]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[i]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[i]||(n="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[i]=new RegExp(n.replace(".",""),"i")),s&&"dddd"===e&&this._fullWeekdaysParse[i].test(t))return i;if(s&&"ddd"===e&&this._shortWeekdaysParse[i].test(t))return i;if(s&&"dd"===e&&this._minWeekdaysParse[i].test(t))return i;if(!s&&this._weekdaysParse[i].test(t))return i}},bs.weekdaysRegex=function(t){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Gt.call(this),t?this._weekdaysStrictRegex:this._weekdaysRegex):(o(this,"_weekdaysRegex")||(this._weekdaysRegex=Bt),this._weekdaysStrictRegex&&t?this._weekdaysStrictRegex:this._weekdaysRegex)},bs.weekdaysShortRegex=function(t){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Gt.call(this),t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(o(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Jt),this._weekdaysShortStrictRegex&&t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},bs.weekdaysMinRegex=function(t){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||Gt.call(this),t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(o(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=$t),this._weekdaysMinStrictRegex&&t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},bs.isPM=function(t){return"p"===(t+"").toLowerCase().charAt(0)},bs.meridiem=function(t,e,s){return t>11?s?"pm":"PM":s?"am":"AM"},re("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10;return t+(1===U(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th")}}),a.lang=D("moment.lang is deprecated. Use moment.locale instead.",re),a.langData=D("moment.langData is deprecated. Use moment.localeData instead.",de);var xs=Math.abs;function ws(t,e,s,i){var a=Ne(e,s);return t._milliseconds+=i*a._milliseconds,t._days+=i*a._days,t._months+=i*a._months,t._bubble()}function Ts(t){return t<0?Math.floor(t):Math.ceil(t)}function Ss(t){return 4800*t/146097}function Hs(t){return 146097*t/4800}function js(t){return function(){return this.as(t)}}var Ps=js("ms"),Os=js("s"),As=js("m"),Cs=js("h"),Es=js("d"),Ws=js("w"),Fs=js("M"),zs=js("Q"),Rs=js("y");function Is(t){return function(){return this.isValid()?this._data[t]:NaN}}var Ns=Is("milliseconds"),Vs=Is("seconds"),Bs=Is("minutes"),Js=Is("hours"),$s=Is("days"),Us=Is("months"),Gs=Is("years");var qs=Math.round,Ks={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function Zs(t,e,s,i,a){return a.relativeTime(e||1,!!s,t,i)}var Xs=Math.abs;function Qs(t){return(t>0)-(t<0)||+t}function ti(){if(!this.isValid())return this.localeData().invalidDate();var t,e,s,i,a,n,r,o,d=Xs(this._milliseconds)/1e3,l=Xs(this._days),_=Xs(this._months),h=this.asSeconds();return h?(t=$(d/60),e=$(t/60),d%=60,t%=60,s=$(_/12),_%=12,i=d?d.toFixed(3).replace(/\.?0+$/,""):"",a=h<0?"-":"",n=Qs(this._months)!==Qs(h)?"-":"",r=Qs(this._days)!==Qs(h)?"-":"",o=Qs(this._milliseconds)!==Qs(h)?"-":"",a+"P"+(s?n+s+"Y":"")+(_?n+_+"M":"")+(l?r+l+"D":"")+(e||t||d?"T":"")+(e?o+e+"H":"")+(t?o+t+"M":"")+(d?o+i+"S":"")):"P0D"}var ei=je.prototype;return ei.isValid=function(){return this._isValid},ei.abs=function(){var t=this._data;return this._milliseconds=xs(this._milliseconds),this._days=xs(this._days),this._months=xs(this._months),t.milliseconds=xs(t.milliseconds),t.seconds=xs(t.seconds),t.minutes=xs(t.minutes),t.hours=xs(t.hours),t.months=xs(t.months),t.years=xs(t.years),this},ei.add=function(t,e){return ws(this,t,e,1)},ei.subtract=function(t,e){return ws(this,t,e,-1)},ei.as=function(t){if(!this.isValid())return NaN;var e,s,i=this._milliseconds;if("month"===(t=I(t))||"quarter"===t||"year"===t)switch(e=this._days+i/864e5,s=this._months+Ss(e),t){case"month":return s;case"quarter":return s/3;case"year":return s/12}else switch(e=this._days+Math.round(Hs(this._months)),t){case"week":return e/7+i/6048e5;case"day":return e+i/864e5;case"hour":return 24*e+i/36e5;case"minute":return 1440*e+i/6e4;case"second":return 86400*e+i/1e3;case"millisecond":return Math.floor(864e5*e)+i;default:throw new Error("Unknown unit "+t)}},ei.asMilliseconds=Ps,ei.asSeconds=Os,ei.asMinutes=As,ei.asHours=Cs,ei.asDays=Es,ei.asWeeks=Ws,ei.asMonths=Fs,ei.asQuarters=zs,ei.asYears=Rs,ei.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*U(this._months/12):NaN},ei._bubble=function(){var t,e,s,i,a,n=this._milliseconds,r=this._days,o=this._months,d=this._data;return n>=0&&r>=0&&o>=0||n<=0&&r<=0&&o<=0||(n+=864e5*Ts(Hs(o)+r),r=0,o=0),d.milliseconds=n%1e3,t=$(n/1e3),d.seconds=t%60,e=$(t/60),d.minutes=e%60,s=$(e/60),d.hours=s%24,r+=$(s/24),o+=a=$(Ss(r)),r-=Ts(Hs(a)),i=$(o/12),o%=12,d.days=r,d.months=o,d.years=i,this},ei.clone=function(){return Ne(this)},ei.get=function(t){return t=I(t),this.isValid()?this[t+"s"]():NaN},ei.milliseconds=Ns,ei.seconds=Vs,ei.minutes=Bs,ei.hours=Js,ei.days=$s,ei.weeks=function(){return $(this.days()/7)},ei.months=Us,ei.years=Gs,ei.humanize=function(t,e){if(!this.isValid())return this.localeData().invalidDate();var s,i,a=!1,n=Ks;return"object"==typeof t&&(e=t,t=!1),"boolean"==typeof t&&(a=t),"object"==typeof e&&(n=Object.assign({},Ks,e),null!=e.s&&null==e.ss&&(n.ss=e.s-1)),i=function(t,e,s,i){var a=Ne(t).abs(),n=qs(a.as("s")),r=qs(a.as("m")),o=qs(a.as("h")),d=qs(a.as("d")),l=qs(a.as("M")),_=qs(a.as("w")),h=qs(a.as("y")),u=n<=s.ss&&["s",n]||n<s.s&&["ss",n]||r<=1&&["m"]||r<s.m&&["mm",r]||o<=1&&["h"]||o<s.h&&["hh",o]||d<=1&&["d"]||d<s.d&&["dd",d];return null!=s.w&&(u=u||_<=1&&["w"]||_<s.w&&["ww",_]),(u=u||l<=1&&["M"]||l<s.M&&["MM",l]||h<=1&&["y"]||["yy",h])[2]=e,u[3]=+t>0,u[4]=i,Zs.apply(null,u)}(this,!a,n,s=this.localeData()),a&&(i=s.pastFuture(+this,i)),s.postformat(i)},ei.toISOString=ti,ei.toString=ti,ei.toJSON=ti,ei.locale=Qe,ei.localeData=es,ei.toIsoString=D("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",ti),ei.lang=ts,E("X",0,0,"unix"),E("x",0,0,"valueOf"),mt("x",_t),mt("X",/[+-]?\d+(\.\d{1,3})?/),gt("X",(function(t,e,s){s._d=new Date(1e3*parseFloat(t))})),gt("x",(function(t,e,s){s._d=new Date(U(t))})),a.version="2.29.4",e=xe,a.fn=Ls,a.min=function(){return Se("isBefore",[].slice.call(arguments,0))},a.max=function(){return Se("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=m,a.unix=function(t){return xe(1e3*t)},a.months=function(t,e){return Ds(t,e,"months")},a.isDate=h,a.locale=re,a.invalid=M,a.duration=Ne,a.isMoment=b,a.weekdays=function(t,e,s){return vs(t,e,s,"weekdays")},a.parseZone=function(){return xe.apply(null,arguments).parseZone()},a.localeData=de,a.isDuration=Pe,a.monthsShort=function(t,e){return Ds(t,e,"monthsShort")},a.weekdaysMin=function(t,e,s){return vs(t,e,s,"weekdaysMin")},a.defineLocale=oe,a.updateLocale=function(t,e){if(null!=e){var s,i,a=te;null!=ee[t]&&null!=ee[t].parentLocale?ee[t].set(S(ee[t]._config,e)):(null!=(i=ne(t))&&(a=i._config),e=S(a,e),null==i&&(e.abbr=t),(s=new H(e)).parentLocale=ee[t],ee[t]=s),re(t)}else null!=ee[t]&&(null!=ee[t].parentLocale?(ee[t]=ee[t].parentLocale,t===re()&&re(t)):null!=ee[t]&&delete ee[t]);return ee[t]},a.locales=function(){return v(ee)},a.weekdaysShort=function(t,e,s){return vs(t,e,s,"weekdaysShort")},a.normalizeUnits=I,a.relativeTimeRounding=function(t){return void 0===t?qs:"function"==typeof t&&(qs=t,!0)},a.relativeTimeThreshold=function(t,e){return void 0!==Ks[t]&&(void 0===e?Ks[t]:(Ks[t]=e,"s"===t&&(Ks.ss=e-1),!0))},a.calendarFormat=function(t,e){var s=t.diff(e,"days",!0);return s<-6?"sameElse":s<-1?"lastWeek":s<0?"lastDay":s<1?"sameDay":s<2?"nextDay":s<7?"nextWeek":"sameElse"},a.prototype=Ls,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()},8281:(t,e,s)=>{"use strict";t.exports=s.p+"assets/favicon/apple-touch-icon.3faeace79f8ee1226a8f.png"},2231:(t,e,s)=>{"use strict";t.exports=s.p+"assets/favicon/favicon-16x16.57adb91bfe397da6014a.png"},3750:(t,e,s)=>{"use strict";t.exports=s.p+"assets/favicon/favicon-32x32.e72a1df743db18fcbb75.png"},6969:(t,e,s)=>{"use strict";t.exports=s.p+"assets/favicon/safari-pinned-tab.b490bd3ce3012f07a787.svg"},9366:(t,e,s)=>{"use strict";t.exports=s.p+"assets/favicon/site.293166745b5664f56476.webmanifest"},9819:(t,e,s)=>{"use strict";t.exports=s.p+"assets/logo.f368e5de06911dc4f602.png"}},e={};function s(i){var a=e[i];if(void 0!==a)return a.exports;var n=e[i]={id:i,loaded:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.loaded=!0,n.exports}s.m=t,s.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return s.d(e,{a:e}),e},s.d=(t,e)=>{for(var i in e)s.o(e,i)&&!s.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t;s.g.importScripts&&(t=s.g.location+"");var e=s.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),s.p=t})(),s.b=document.baseURI||self.location.href,(()=>{"use strict";var t=s(7091),e=s.n(t),i=new URL(s(8281),s.b),a=new URL(s(3750),s.b),n=new URL(s(2231),s.b),r=new URL(s(9366),s.b),o=new URL(s(6969),s.b),d=new URL(s(9819),s.b);e()(i),e()(a),e()(n),e()(r),e()(o),e()(d);var l=s(381),_=s.n(l);const h=()=>{document.querySelectorAll("input").forEach((t=>{t.value=""}))};var u=s(272),c=s.n(u);const m=async()=>(await fetch("https://api.coingecko.com/api/v3/global",{mode:"cors"})).json(),f=["","k","M","G","T","P","E"],p="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function M(t,e,s){const i=s||(t=>Array.prototype.slice.call(t));let a=!1,n=[];return function(...s){n=i(s),a||(a=!0,p.call(window,(()=>{a=!1,t.apply(e,n)})))}}const g=t=>"start"===t?"left":"end"===t?"right":"center",y=(t,e,s)=>"start"===t?e:"end"===t?s:(e+s)/2;function L(){}const Y=function(){let t=0;return function(){return t++}}();function b(t){return null==t}function k(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.slice(0,7)&&"Array]"===e.slice(-6)}function D(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const v=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function x(t,e){return v(t)?t:e}function w(t,e){return void 0===t?e:t}const T=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function S(t,e,s){if(t&&"function"==typeof t.call)return t.apply(s,e)}function H(t,e,s,i){let a,n,r;if(k(t))if(n=t.length,i)for(a=n-1;a>=0;a--)e.call(s,t[a],a);else for(a=0;a<n;a++)e.call(s,t[a],a);else if(D(t))for(r=Object.keys(t),n=r.length,a=0;a<n;a++)e.call(s,t[r[a]],r[a])}function j(t,e){let s,i,a,n;if(!t||!e||t.length!==e.length)return!1;for(s=0,i=t.length;s<i;++s)if(a=t[s],n=e[s],a.datasetIndex!==n.datasetIndex||a.index!==n.index)return!1;return!0}function P(t){if(k(t))return t.map(P);if(D(t)){const e=Object.create(null),s=Object.keys(t),i=s.length;let a=0;for(;a<i;++a)e[s[a]]=P(t[s[a]]);return e}return t}function O(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function A(t,e,s,i){if(!O(t))return;const a=e[t],n=s[t];D(a)&&D(n)?C(a,n,i):e[t]=P(n)}function C(t,e,s){const i=k(e)?e:[e],a=i.length;if(!D(t))return t;const n=(s=s||{}).merger||A;for(let r=0;r<a;++r){if(!D(e=i[r]))continue;const a=Object.keys(e);for(let i=0,r=a.length;i<r;++i)n(a[i],t,e,s)}return t}function E(t,e){return C(t,e,{merger:W})}function W(t,e,s){if(!O(t))return;const i=e[t],a=s[t];D(i)&&D(a)?E(i,a):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=P(a))}function F(t,e){const s=t.indexOf(".",e);return-1===s?t.length:s}function z(t,e){if(""===e)return t;let s=0,i=F(e,s);for(;t&&i>s;)t=t[e.slice(s,i)],s=i+1,i=F(e,s);return t}function R(t){return t.charAt(0).toUpperCase()+t.slice(1)}const I=t=>void 0!==t,N=t=>"function"==typeof t,V=(t,e)=>{if(t.size!==e.size)return!1;for(const s of t)if(!e.has(s))return!1;return!0},B=Math.PI,J=2*B,$=J+B,U=Number.POSITIVE_INFINITY,G=B/180,q=B/2,K=B/4,Z=2*B/3,X=Math.log10,Q=Math.sign;function tt(t){const e=Math.round(t);t=st(t,e,t/1e3)?e:t;const s=Math.pow(10,Math.floor(X(t))),i=t/s;return(i<=1?1:i<=2?2:i<=5?5:10)*s}function et(t){return!isNaN(parseFloat(t))&&isFinite(t)}function st(t,e,s){return Math.abs(t-e)<s}function it(t,e,s){let i,a,n;for(i=0,a=t.length;i<a;i++)n=t[i][s],isNaN(n)||(e.min=Math.min(e.min,n),e.max=Math.max(e.max,n))}function at(t){return t*(B/180)}function nt(t){return t*(180/B)}function rt(t){if(!v(t))return;let e=1,s=0;for(;Math.round(t*e)/e!==t;)e*=10,s++;return s}function ot(t,e){const s=e.x-t.x,i=e.y-t.y,a=Math.sqrt(s*s+i*i);let n=Math.atan2(i,s);return n<-.5*B&&(n+=J),{angle:n,distance:a}}function dt(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function lt(t,e){return(t-e+$)%J-B}function _t(t){return(t%J+J)%J}function ht(t,e,s,i){const a=_t(t),n=_t(e),r=_t(s),o=_t(n-a),d=_t(r-a),l=_t(a-n),_=_t(a-r);return a===n||a===r||i&&n===r||o>d&&l<_}function ut(t,e,s){return Math.max(e,Math.min(s,t))}function ct(t,e,s,i=1e-6){return t>=Math.min(e,s)-i&&t<=Math.max(e,s)+i}const mt=t=>0===t||1===t,ft=(t,e,s)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*J/s),pt=(t,e,s)=>Math.pow(2,-10*t)*Math.sin((t-e)*J/s)+1,Mt={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*q),easeOutSine:t=>Math.sin(t*q),easeInOutSine:t=>-.5*(Math.cos(B*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>mt(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>mt(t)?t:ft(t,.075,.3),easeOutElastic:t=>mt(t)?t:pt(t,.075,.3),easeInOutElastic(t){const e=.1125;return mt(t)?t:t<.5?.5*ft(2*t,e,.45):.5+.5*pt(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-Mt.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,s=2.75;return t<1/s?e*t*t:t<2/s?e*(t-=1.5/s)*t+.75:t<2.5/s?e*(t-=2.25/s)*t+.9375:e*(t-=2.625/s)*t+.984375},easeInOutBounce:t=>t<.5?.5*Mt.easeInBounce(2*t):.5*Mt.easeOutBounce(2*t-1)+.5};function gt(t){return t+.5|0}const yt=(t,e,s)=>Math.max(Math.min(t,s),e);function Lt(t){return yt(gt(2.55*t),0,255)}function Yt(t){return yt(gt(255*t),0,255)}function bt(t){return yt(gt(t/2.55)/100,0,1)}function kt(t){return yt(gt(100*t),0,100)}const Dt={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},vt=[..."0123456789ABCDEF"],xt=t=>vt[15&t],wt=t=>vt[(240&t)>>4]+vt[15&t],Tt=t=>(240&t)>>4==(15&t);const St=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Ht(t,e,s){const i=e*Math.min(s,1-s),a=(e,a=(e+t/30)%12)=>s-i*Math.max(Math.min(a-3,9-a,1),-1);return[a(0),a(8),a(4)]}function jt(t,e,s){const i=(i,a=(i+t/60)%6)=>s-s*e*Math.max(Math.min(a,4-a,1),0);return[i(5),i(3),i(1)]}function Pt(t,e,s){const i=Ht(t,1,.5);let a;for(e+s>1&&(a=1/(e+s),e*=a,s*=a),a=0;a<3;a++)i[a]*=1-e-s,i[a]+=e;return i}function Ot(t){const e=t.r/255,s=t.g/255,i=t.b/255,a=Math.max(e,s,i),n=Math.min(e,s,i),r=(a+n)/2;let o,d,l;return a!==n&&(l=a-n,d=r>.5?l/(2-a-n):l/(a+n),o=function(t,e,s,i,a){return t===a?(e-s)/i+(e<s?6:0):e===a?(s-t)/i+2:(t-e)/i+4}(e,s,i,l,a),o=60*o+.5),[0|o,d||0,r]}function At(t,e,s,i){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,s,i)).map(Yt)}function Ct(t,e,s){return At(Ht,t,e,s)}function Et(t){return(t%360+360)%360}const Wt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Ft={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let zt;const Rt=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,It=t=>t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055,Nt=t=>t<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4);function Vt(t,e,s){if(t){let i=Ot(t);i[e]=Math.max(0,Math.min(i[e]+i[e]*s,0===e?360:1)),i=Ct(i),t.r=i[0],t.g=i[1],t.b=i[2]}}function Bt(t,e){return t?Object.assign(e||{},t):t}function Jt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=Yt(t[3]))):(e=Bt(t,{r:0,g:0,b:0,a:1})).a=Yt(e.a),e}function $t(t){return"r"===t.charAt(0)?function(t){const e=Rt.exec(t);let s,i,a,n=255;if(e){if(e[7]!==s){const t=+e[7];n=e[8]?Lt(t):yt(255*t,0,255)}return s=+e[1],i=+e[3],a=+e[5],s=255&(e[2]?Lt(s):yt(s,0,255)),i=255&(e[4]?Lt(i):yt(i,0,255)),a=255&(e[6]?Lt(a):yt(a,0,255)),{r:s,g:i,b:a,a:n}}}(t):function(t){const e=St.exec(t);let s,i=255;if(!e)return;e[5]!==s&&(i=e[6]?Lt(+e[5]):Yt(+e[5]));const a=Et(+e[2]),n=+e[3]/100,r=+e[4]/100;return s="hwb"===e[1]?function(t,e,s){return At(Pt,t,e,s)}(a,n,r):"hsv"===e[1]?function(t,e,s){return At(jt,t,e,s)}(a,n,r):Ct(a,n,r),{r:s[0],g:s[1],b:s[2],a:i}}(t)}class Ut{constructor(t){if(t instanceof Ut)return t;const e=typeof t;let s;var i,a,n;"object"===e?s=Jt(t):"string"===e&&(n=(i=t).length,"#"===i[0]&&(4===n||5===n?a={r:255&17*Dt[i[1]],g:255&17*Dt[i[2]],b:255&17*Dt[i[3]],a:5===n?17*Dt[i[4]]:255}:7!==n&&9!==n||(a={r:Dt[i[1]]<<4|Dt[i[2]],g:Dt[i[3]]<<4|Dt[i[4]],b:Dt[i[5]]<<4|Dt[i[6]],a:9===n?Dt[i[7]]<<4|Dt[i[8]]:255})),s=a||function(t){zt||(zt=function(){const t={},e=Object.keys(Ft),s=Object.keys(Wt);let i,a,n,r,o;for(i=0;i<e.length;i++){for(r=o=e[i],a=0;a<s.length;a++)n=s[a],o=o.replace(n,Wt[n]);n=parseInt(Ft[r],16),t[o]=[n>>16&255,n>>8&255,255&n]}return t}(),zt.transparent=[0,0,0,0]);const e=zt[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||$t(t)),this._rgb=s,this._valid=!!s}get valid(){return this._valid}get rgb(){var t=Bt(this._rgb);return t&&(t.a=bt(t.a)),t}set rgb(t){this._rgb=Jt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${bt(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):void 0;var t}hexString(){return this._valid?(t=this._rgb,e=(t=>Tt(t.r)&&Tt(t.g)&&Tt(t.b)&&Tt(t.a))(t)?xt:wt,t?"#"+e(t.r)+e(t.g)+e(t.b)+((t,e)=>t<255?e(t):"")(t.a,e):void 0):void 0;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=Ot(t),s=e[0],i=kt(e[1]),a=kt(e[2]);return t.a<255?`hsla(${s}, ${i}%, ${a}%, ${bt(t.a)})`:`hsl(${s}, ${i}%, ${a}%)`}(this._rgb):void 0}mix(t,e){if(t){const s=this.rgb,i=t.rgb;let a;const n=e===a?.5:e,r=2*n-1,o=s.a-i.a,d=((r*o==-1?r:(r+o)/(1+r*o))+1)/2;a=1-d,s.r=255&d*s.r+a*i.r+.5,s.g=255&d*s.g+a*i.g+.5,s.b=255&d*s.b+a*i.b+.5,s.a=n*s.a+(1-n)*i.a,this.rgb=s}return this}interpolate(t,e){return t&&(this._rgb=function(t,e,s){const i=Nt(bt(t.r)),a=Nt(bt(t.g)),n=Nt(bt(t.b));return{r:Yt(It(i+s*(Nt(bt(e.r))-i))),g:Yt(It(a+s*(Nt(bt(e.g))-a))),b:Yt(It(n+s*(Nt(bt(e.b))-n))),a:t.a+s*(e.a-t.a)}}(this._rgb,t._rgb,e)),this}clone(){return new Ut(this.rgb)}alpha(t){return this._rgb.a=Yt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=gt(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Vt(this._rgb,2,t),this}darken(t){return Vt(this._rgb,2,-t),this}saturate(t){return Vt(this._rgb,1,t),this}desaturate(t){return Vt(this._rgb,1,-t),this}rotate(t){return function(t,e){var s=Ot(t);s[0]=Et(s[0]+e),s=Ct(s),t.r=s[0],t.g=s[1],t.b=s[2]}(this._rgb,t),this}}function Gt(t){return new Ut(t)}function qt(t){if(t&&"object"==typeof t){const e=t.toString();return"[object CanvasPattern]"===e||"[object CanvasGradient]"===e}return!1}function Kt(t){return qt(t)?t:Gt(t)}function Zt(t){return qt(t)?t:Gt(t).saturate(.5).darken(.1).hexString()}const Xt=Object.create(null),Qt=Object.create(null);function te(t,e){if(!e)return t;const s=e.split(".");for(let e=0,i=s.length;e<i;++e){const i=s[e];t=t[i]||(t[i]=Object.create(null))}return t}function ee(t,e,s){return"string"==typeof e?C(te(t,e),s):C(te(t,""),e)}var se=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>Zt(e.backgroundColor),this.hoverBorderColor=(t,e)=>Zt(e.borderColor),this.hoverColor=(t,e)=>Zt(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return ee(this,t,e)}get(t){return te(this,t)}describe(t,e){return ee(Qt,t,e)}override(t,e){return ee(Xt,t,e)}route(t,e,s,i){const a=te(this,t),n=te(this,s),r="_"+e;Object.defineProperties(a,{[r]:{value:a[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[r],e=n[i];return D(t)?Object.assign({},e,t):w(t,e)},set(t){this[r]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function ie(t,e,s,i,a){let n=e[a];return n||(n=e[a]=t.measureText(a).width,s.push(a)),n>i&&(i=n),i}function ae(t,e,s,i){let a=(i=i||{}).data=i.data||{},n=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(a=i.data={},n=i.garbageCollect=[],i.font=e),t.save(),t.font=e;let r=0;const o=s.length;let d,l,_,h,u;for(d=0;d<o;d++)if(h=s[d],null!=h&&!0!==k(h))r=ie(t,a,n,r,h);else if(k(h))for(l=0,_=h.length;l<_;l++)u=h[l],null==u||k(u)||(r=ie(t,a,n,r,u));t.restore();const c=n.length/2;if(c>s.length){for(d=0;d<c;d++)delete a[n[d]];n.splice(0,c)}return r}function ne(t,e,s){const i=t.currentDevicePixelRatio,a=0!==s?Math.max(s/2,.5):0;return Math.round((e-a)*i)/i+a}function re(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function oe(t,e,s,i){let a,n,r,o,d;const l=e.pointStyle,_=e.rotation,h=e.radius;let u=(_||0)*G;if(l&&"object"==typeof l&&(a=l.toString(),"[object HTMLImageElement]"===a||"[object HTMLCanvasElement]"===a))return t.save(),t.translate(s,i),t.rotate(u),t.drawImage(l,-l.width/2,-l.height/2,l.width,l.height),void t.restore();if(!(isNaN(h)||h<=0)){switch(t.beginPath(),l){default:t.arc(s,i,h,0,J),t.closePath();break;case"triangle":t.moveTo(s+Math.sin(u)*h,i-Math.cos(u)*h),u+=Z,t.lineTo(s+Math.sin(u)*h,i-Math.cos(u)*h),u+=Z,t.lineTo(s+Math.sin(u)*h,i-Math.cos(u)*h),t.closePath();break;case"rectRounded":d=.516*h,o=h-d,n=Math.cos(u+K)*o,r=Math.sin(u+K)*o,t.arc(s-n,i-r,d,u-B,u-q),t.arc(s+r,i-n,d,u-q,u),t.arc(s+n,i+r,d,u,u+q),t.arc(s-r,i+n,d,u+q,u+B),t.closePath();break;case"rect":if(!_){o=Math.SQRT1_2*h,t.rect(s-o,i-o,2*o,2*o);break}u+=K;case"rectRot":n=Math.cos(u)*h,r=Math.sin(u)*h,t.moveTo(s-n,i-r),t.lineTo(s+r,i-n),t.lineTo(s+n,i+r),t.lineTo(s-r,i+n),t.closePath();break;case"crossRot":u+=K;case"cross":n=Math.cos(u)*h,r=Math.sin(u)*h,t.moveTo(s-n,i-r),t.lineTo(s+n,i+r),t.moveTo(s+r,i-n),t.lineTo(s-r,i+n);break;case"star":n=Math.cos(u)*h,r=Math.sin(u)*h,t.moveTo(s-n,i-r),t.lineTo(s+n,i+r),t.moveTo(s+r,i-n),t.lineTo(s-r,i+n),u+=K,n=Math.cos(u)*h,r=Math.sin(u)*h,t.moveTo(s-n,i-r),t.lineTo(s+n,i+r),t.moveTo(s+r,i-n),t.lineTo(s-r,i+n);break;case"line":n=Math.cos(u)*h,r=Math.sin(u)*h,t.moveTo(s-n,i-r),t.lineTo(s+n,i+r);break;case"dash":t.moveTo(s,i),t.lineTo(s+Math.cos(u)*h,i+Math.sin(u)*h)}t.fill(),e.borderWidth>0&&t.stroke()}}function de(t,e,s){return s=s||.5,!e||t&&t.x>e.left-s&&t.x<e.right+s&&t.y>e.top-s&&t.y<e.bottom+s}function le(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function _e(t){t.restore()}function he(t,e,s,i,a){if(!e)return t.lineTo(s.x,s.y);if("middle"===a){const i=(e.x+s.x)/2;t.lineTo(i,e.y),t.lineTo(i,s.y)}else"after"===a!=!!i?t.lineTo(e.x,s.y):t.lineTo(s.x,e.y);t.lineTo(s.x,s.y)}function ue(t,e,s,i){if(!e)return t.lineTo(s.x,s.y);t.bezierCurveTo(i?e.cp1x:e.cp2x,i?e.cp1y:e.cp2y,i?s.cp2x:s.cp1x,i?s.cp2y:s.cp1y,s.x,s.y)}function ce(t,e,s,i,a,n={}){const r=k(e)?e:[e],o=n.strokeWidth>0&&""!==n.strokeColor;let d,l;for(t.save(),t.font=a.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),b(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,n),d=0;d<r.length;++d)l=r[d],o&&(n.strokeColor&&(t.strokeStyle=n.strokeColor),b(n.strokeWidth)||(t.lineWidth=n.strokeWidth),t.strokeText(l,s,i,n.maxWidth)),t.fillText(l,s,i,n.maxWidth),me(t,s,i,l,n),i+=a.lineHeight;t.restore()}function me(t,e,s,i,a){if(a.strikethrough||a.underline){const n=t.measureText(i),r=e-n.actualBoundingBoxLeft,o=e+n.actualBoundingBoxRight,d=s-n.actualBoundingBoxAscent,l=s+n.actualBoundingBoxDescent,_=a.strikethrough?(d+l)/2:l;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=a.decorationWidth||2,t.moveTo(r,_),t.lineTo(o,_),t.stroke()}}function fe(t,e){const{x:s,y:i,w:a,h:n,radius:r}=e;t.arc(s+r.topLeft,i+r.topLeft,r.topLeft,-q,B,!0),t.lineTo(s,i+n-r.bottomLeft),t.arc(s+r.bottomLeft,i+n-r.bottomLeft,r.bottomLeft,B,q,!0),t.lineTo(s+a-r.bottomRight,i+n),t.arc(s+a-r.bottomRight,i+n-r.bottomRight,r.bottomRight,q,0,!0),t.lineTo(s+a,i+r.topRight),t.arc(s+a-r.topRight,i+r.topRight,r.topRight,0,-q,!0),t.lineTo(s+r.topLeft,i)}const pe=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),Me=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function ge(t,e){const s=(""+t).match(pe);if(!s||"normal"===s[1])return 1.2*e;switch(t=+s[2],s[3]){case"px":return t;case"%":t/=100}return e*t}function ye(t,e){const s={},i=D(e),a=i?Object.keys(e):e,n=D(t)?i?s=>w(t[s],t[e[s]]):e=>t[e]:()=>t;for(const t of a)s[t]=+n(t)||0;return s}function Le(t){return ye(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Ye(t){return ye(t,["topLeft","topRight","bottomLeft","bottomRight"])}function be(t){const e=Le(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function ke(t,e){t=t||{},e=e||se.font;let s=w(t.size,e.size);"string"==typeof s&&(s=parseInt(s,10));let i=w(t.style,e.style);i&&!(""+i).match(Me)&&(console.warn('Invalid font style specified: "'+i+'"'),i="");const a={family:w(t.family,e.family),lineHeight:ge(w(t.lineHeight,e.lineHeight),s),size:s,style:i,weight:w(t.weight,e.weight),string:""};return a.string=function(t){return!t||b(t.size)||b(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(a),a}function De(t,e,s,i){let a,n,r,o=!0;for(a=0,n=t.length;a<n;++a)if(r=t[a],void 0!==r&&(void 0!==e&&"function"==typeof r&&(r=r(e),o=!1),void 0!==s&&k(r)&&(r=r[s%r.length],o=!1),void 0!==r))return i&&!o&&(i.cacheable=!1),r}function ve(t,e){return Object.assign(Object.create(t),e)}function xe(t,e,s){s=s||(s=>t[s]<e);let i,a=t.length-1,n=0;for(;a-n>1;)i=n+a>>1,s(i)?n=i:a=i;return{lo:n,hi:a}}const we=(t,e,s)=>xe(t,s,(i=>t[i][e]<s)),Te=(t,e,s)=>xe(t,s,(i=>t[i][e]>=s)),Se=["push","pop","shift","splice","unshift"];function He(t,e){const s=t._chartjs;if(!s)return;const i=s.listeners,a=i.indexOf(e);-1!==a&&i.splice(a,1),i.length>0||(Se.forEach((e=>{delete t[e]})),delete t._chartjs)}function je(t){const e=new Set;let s,i;for(s=0,i=t.length;s<i;++s)e.add(t[s]);return e.size===i?t:Array.from(e)}function Pe(t,e=[""],s=t,i,a=(()=>t[0])){I(i)||(i=Ve("_fallback",t));const n={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:s,_fallback:i,_getTarget:a,override:a=>Pe([a,...t],e,s,i)};return new Proxy(n,{deleteProperty:(e,s)=>(delete e[s],delete e._keys,delete t[0][s],!0),get:(s,i)=>We(s,i,(()=>function(t,e,s,i){let a;for(const n of e)if(a=Ve(Ce(n,t),s),I(a))return Ee(t,a)?Ie(s,i,t,a):a}(i,e,t,s))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Be(t).includes(e),ownKeys:t=>Be(t),set(t,e,s){const i=t._storage||(t._storage=a());return t[e]=i[e]=s,delete t._keys,!0}})}function Oe(t,e,s,i){const a={_cacheable:!1,_proxy:t,_context:e,_subProxy:s,_stack:new Set,_descriptors:Ae(t,i),setContext:e=>Oe(t,e,s,i),override:a=>Oe(t.override(a),e,s,i)};return new Proxy(a,{deleteProperty:(e,s)=>(delete e[s],delete t[s],!0),get:(t,e,s)=>We(t,e,(()=>function(t,e,s){const{_proxy:i,_context:a,_subProxy:n,_descriptors:r}=t;let o=i[e];return N(o)&&r.isScriptable(e)&&(o=function(t,e,s,i){const{_proxy:a,_context:n,_subProxy:r,_stack:o}=s;if(o.has(t))throw new Error("Recursion detected: "+Array.from(o).join("->")+"->"+t);return o.add(t),e=e(n,r||i),o.delete(t),Ee(t,e)&&(e=Ie(a._scopes,a,t,e)),e}(e,o,t,s)),k(o)&&o.length&&(o=function(t,e,s,i){const{_proxy:a,_context:n,_subProxy:r,_descriptors:o}=s;if(I(n.index)&&i(t))e=e[n.index%e.length];else if(D(e[0])){const s=e,i=a._scopes.filter((t=>t!==s));e=[];for(const d of s){const s=Ie(i,a,t,d);e.push(Oe(s,n,r&&r[t],o))}}return e}(e,o,t,r.isIndexable)),Ee(e,o)&&(o=Oe(o,a,n&&n[e],r)),o}(t,e,s))),getOwnPropertyDescriptor:(e,s)=>e._descriptors.allKeys?Reflect.has(t,s)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,s),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,s)=>Reflect.has(t,s),ownKeys:()=>Reflect.ownKeys(t),set:(e,s,i)=>(t[s]=i,delete e[s],!0)})}function Ae(t,e={scriptable:!0,indexable:!0}){const{_scriptable:s=e.scriptable,_indexable:i=e.indexable,_allKeys:a=e.allKeys}=t;return{allKeys:a,scriptable:s,indexable:i,isScriptable:N(s)?s:()=>s,isIndexable:N(i)?i:()=>i}}const Ce=(t,e)=>t?t+R(e):e,Ee=(t,e)=>D(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function We(t,e,s){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const i=s();return t[e]=i,i}function Fe(t,e,s){return N(t)?t(e,s):t}const ze=(t,e)=>!0===t?e:"string"==typeof t?z(e,t):void 0;function Re(t,e,s,i,a){for(const n of e){const e=ze(s,n);if(e){t.add(e);const n=Fe(e._fallback,s,a);if(I(n)&&n!==s&&n!==i)return n}else if(!1===e&&I(i)&&s!==i)return null}return!1}function Ie(t,e,s,i){const a=e._rootScopes,n=Fe(e._fallback,s,i),r=[...t,...a],o=new Set;o.add(i);let d=Ne(o,r,s,n||s,i);return null!==d&&(!I(n)||n===s||(d=Ne(o,r,n,d,i),null!==d))&&Pe(Array.from(o),[""],a,n,(()=>function(t,e,s){const i=t._getTarget();e in i||(i[e]={});const a=i[e];return k(a)&&D(s)?s:a}(e,s,i)))}function Ne(t,e,s,i,a){for(;s;)s=Re(t,e,s,i,a);return s}function Ve(t,e){for(const s of e){if(!s)continue;const e=s[t];if(I(e))return e}}function Be(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const s of t)for(const t of Object.keys(s).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}function Je(t,e,s,i){const{iScale:a}=t,{key:n="r"}=this._parsing,r=new Array(i);let o,d,l,_;for(o=0,d=i;o<d;++o)l=o+s,_=e[l],r[o]={r:a.parse(z(_,n),l)};return r}const $e=Number.EPSILON||1e-14,Ue=(t,e)=>e<t.length&&!t[e].skip&&t[e],Ge=t=>"x"===t?"y":"x";function qe(t,e,s,i){const a=t.skip?e:t,n=e,r=s.skip?e:s,o=dt(n,a),d=dt(r,n);let l=o/(o+d),_=d/(o+d);l=isNaN(l)?0:l,_=isNaN(_)?0:_;const h=i*l,u=i*_;return{previous:{x:n.x-h*(r.x-a.x),y:n.y-h*(r.y-a.y)},next:{x:n.x+u*(r.x-a.x),y:n.y+u*(r.y-a.y)}}}function Ke(t,e,s){return Math.max(Math.min(t,s),e)}function Ze(t,e,s,i,a){let n,r,o,d;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const s=Ge(e),i=t.length,a=Array(i).fill(0),n=Array(i);let r,o,d,l=Ue(t,0);for(r=0;r<i;++r)if(o=d,d=l,l=Ue(t,r+1),d){if(l){const t=l[e]-d[e];a[r]=0!==t?(l[s]-d[s])/t:0}n[r]=o?l?Q(a[r-1])!==Q(a[r])?0:(a[r-1]+a[r])/2:a[r-1]:a[r]}!function(t,e,s){const i=t.length;let a,n,r,o,d,l=Ue(t,0);for(let _=0;_<i-1;++_)d=l,l=Ue(t,_+1),d&&l&&(st(e[_],0,$e)?s[_]=s[_+1]=0:(a=s[_]/e[_],n=s[_+1]/e[_],o=Math.pow(a,2)+Math.pow(n,2),o<=9||(r=3/Math.sqrt(o),s[_]=a*r*e[_],s[_+1]=n*r*e[_])))}(t,a,n),function(t,e,s="x"){const i=Ge(s),a=t.length;let n,r,o,d=Ue(t,0);for(let l=0;l<a;++l){if(r=o,o=d,d=Ue(t,l+1),!o)continue;const a=o[s],_=o[i];r&&(n=(a-r[s])/3,o[`cp1${s}`]=a-n,o[`cp1${i}`]=_-n*e[l]),d&&(n=(d[s]-a)/3,o[`cp2${s}`]=a+n,o[`cp2${i}`]=_+n*e[l])}}(t,n,e)}(t,a);else{let s=i?t[t.length-1]:t[0];for(n=0,r=t.length;n<r;++n)o=t[n],d=qe(s,o,t[Math.min(n+1,r-(i?0:1))%r],e.tension),o.cp1x=d.previous.x,o.cp1y=d.previous.y,o.cp2x=d.next.x,o.cp2y=d.next.y,s=o}e.capBezierPoints&&function(t,e){let s,i,a,n,r,o=de(t[0],e);for(s=0,i=t.length;s<i;++s)r=n,n=o,o=s<i-1&&de(t[s+1],e),n&&(a=t[s],r&&(a.cp1x=Ke(a.cp1x,e.left,e.right),a.cp1y=Ke(a.cp1y,e.top,e.bottom)),o&&(a.cp2x=Ke(a.cp2x,e.left,e.right),a.cp2y=Ke(a.cp2y,e.top,e.bottom)))}(t,s)}function Xe(){return"undefined"!=typeof window&&"undefined"!=typeof document}function Qe(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function ts(t,e,s){let i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[s])):i=t,i}const es=t=>window.getComputedStyle(t,null),ss=["top","right","bottom","left"];function is(t,e,s){const i={};s=s?"-"+s:"";for(let a=0;a<4;a++){const n=ss[a];i[n]=parseFloat(t[e+"-"+n+s])||0}return i.width=i.left+i.right,i.height=i.top+i.bottom,i}function as(t,e){if("native"in t)return t;const{canvas:s,currentDevicePixelRatio:i}=e,a=es(s),n="border-box"===a.boxSizing,r=is(a,"padding"),o=is(a,"border","width"),{x:d,y:l,box:_}=function(t,e){const s=t.touches,i=s&&s.length?s[0]:t,{offsetX:a,offsetY:n}=i;let r,o,d=!1;if(((t,e,s)=>(t>0||e>0)&&(!s||!s.shadowRoot))(a,n,t.target))r=a,o=n;else{const t=e.getBoundingClientRect();r=i.clientX-t.left,o=i.clientY-t.top,d=!0}return{x:r,y:o,box:d}}(t,s),h=r.left+(_&&o.left),u=r.top+(_&&o.top);let{width:c,height:m}=e;return n&&(c-=r.width+o.width,m-=r.height+o.height),{x:Math.round((d-h)/c*s.width/i),y:Math.round((l-u)/m*s.height/i)}}const ns=t=>Math.round(10*t)/10;function rs(t,e,s){const i=e||1,a=Math.floor(t.height*i),n=Math.floor(t.width*i);t.height=a/i,t.width=n/i;const r=t.canvas;return r.style&&(s||!r.style.height&&!r.style.width)&&(r.style.height=`${t.height}px`,r.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==i||r.height!==a||r.width!==n)&&(t.currentDevicePixelRatio=i,r.height=a,r.width=n,t.ctx.setTransform(i,0,0,i,0,0),!0)}const os=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function ds(t,e){const s=function(t,e){return es(t).getPropertyValue(e)}(t,e),i=s&&s.match(/^(\d+)(\.\d+)?px$/);return i?+i[1]:void 0}function ls(t,e,s,i){return{x:t.x+s*(e.x-t.x),y:t.y+s*(e.y-t.y)}}function _s(t,e,s,i){return{x:t.x+s*(e.x-t.x),y:"middle"===i?s<.5?t.y:e.y:"after"===i?s<1?t.y:e.y:s>0?e.y:t.y}}function hs(t,e,s,i){const a={x:t.cp2x,y:t.cp2y},n={x:e.cp1x,y:e.cp1y},r=ls(t,a,s),o=ls(a,n,s),d=ls(n,e,s),l=ls(r,o,s),_=ls(o,d,s);return ls(l,_,s)}const us=new Map;function cs(t,e,s){return function(t,e){e=e||{};const s=t+JSON.stringify(e);let i=us.get(s);return i||(i=new Intl.NumberFormat(t,e),us.set(s,i)),i}(e,s).format(t)}function ms(t,e,s){return t?function(t,e){return{x:s=>t+t+e-s,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,s):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function fs(t,e){let s,i;"ltr"!==e&&"rtl"!==e||(s=t.canvas.style,i=[s.getPropertyValue("direction"),s.getPropertyPriority("direction")],s.setProperty("direction",e,"important"),t.prevTextDirection=i)}function ps(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function Ms(t){return"angle"===t?{between:ht,compare:lt,normalize:_t}:{between:ct,compare:(t,e)=>t-e,normalize:t=>t}}function gs({start:t,end:e,count:s,loop:i,style:a}){return{start:t%s,end:e%s,loop:i&&(e-t+1)%s==0,style:a}}function ys(t,e,s){if(!s)return[t];const{property:i,start:a,end:n}=s,r=e.length,{compare:o,between:d,normalize:l}=Ms(i),{start:_,end:h,loop:u,style:c}=function(t,e,s){const{property:i,start:a,end:n}=s,{between:r,normalize:o}=Ms(i),d=e.length;let l,_,{start:h,end:u,loop:c}=t;if(c){for(h+=d,u+=d,l=0,_=d;l<_&&r(o(e[h%d][i]),a,n);++l)h--,u--;h%=d,u%=d}return u<h&&(u+=d),{start:h,end:u,loop:c,style:t.style}}(t,e,s),m=[];let f,p,M,g=!1,y=null;for(let t=_,s=_;t<=h;++t)p=e[t%r],p.skip||(f=l(p[i]),f!==M&&(g=d(f,a,n),null===y&&(g||d(a,M,f)&&0!==o(a,M))&&(y=0===o(f,a)?t:s),null!==y&&(!g||0===o(n,f)||d(n,M,f))&&(m.push(gs({start:y,end:t,loop:u,count:r,style:c})),y=null),s=t,M=f));return null!==y&&m.push(gs({start:y,end:h,loop:u,count:r,style:c})),m}function Ls(t,e){const s=[],i=t.segments;for(let a=0;a<i.length;a++){const n=ys(i[a],t.points,e);n.length&&s.push(...n)}return s}function Ys(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function bs(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var ks=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,s,i){const a=e.listeners[i],n=e.duration;a.forEach((i=>i({chart:t,initial:e.initial,numSteps:n,currentStep:Math.min(s-e.start,n)})))}_refresh(){this._request||(this._running=!0,this._request=p.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((s,i)=>{if(!s.running||!s.items.length)return;const a=s.items;let n,r=a.length-1,o=!1;for(;r>=0;--r)n=a[r],n._active?(n._total>s.duration&&(s.duration=n._total),n.tick(t),o=!0):(a[r]=a[a.length-1],a.pop());o&&(i.draw(),this._notify(i,s,t,"progress")),a.length||(s.running=!1,this._notify(i,s,t,"complete"),s.initial=!1),e+=a.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let s=e.get(t);return s||(s={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,s)),s}listen(t,e,s){this._getAnims(t).listeners[e].push(s)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const s=e.items;let i=s.length-1;for(;i>=0;--i)s[i].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const Ds="transparent",vs={boolean:(t,e,s)=>s>.5?e:t,color(t,e,s){const i=Kt(t||Ds),a=i.valid&&Kt(e||Ds);return a&&a.valid?a.mix(i,s).hexString():e},number:(t,e,s)=>t+(e-t)*s};class xs{constructor(t,e,s,i){const a=e[s];i=De([t.to,i,a,t.from]);const n=De([t.from,a,i]);this._active=!0,this._fn=t.fn||vs[t.type||typeof n],this._easing=Mt[t.easing]||Mt.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=s,this._from=n,this._to=i,this._promises=void 0}active(){return this._active}update(t,e,s){if(this._active){this._notify(!1);const i=this._target[this._prop],a=s-this._start,n=this._duration-a;this._start=s,this._duration=Math.floor(Math.max(n,t.duration)),this._total+=a,this._loop=!!t.loop,this._to=De([t.to,e,i,t.from]),this._from=De([t.from,i,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,s=this._duration,i=this._prop,a=this._from,n=this._loop,r=this._to;let o;if(this._active=a!==r&&(n||e<s),!this._active)return this._target[i]=r,void this._notify(!0);e<0?this._target[i]=a:(o=e/s%2,o=n&&o>1?2-o:o,o=this._easing(Math.min(1,Math.max(0,o))),this._target[i]=this._fn(a,r,o))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,s)=>{t.push({res:e,rej:s})}))}_notify(t){const e=t?"res":"rej",s=this._promises||[];for(let t=0;t<s.length;t++)s[t][e]()}}se.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const ws=Object.keys(se.animation);se.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),se.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),se.describe("animations",{_fallback:"animation"}),se.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class Ts{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!D(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((s=>{const i=t[s];if(!D(i))return;const a={};for(const t of ws)a[t]=i[t];(k(i.properties)&&i.properties||[s]).forEach((t=>{t!==s&&e.has(t)||e.set(t,a)}))}))}_animateOptions(t,e){const s=e.options,i=function(t,e){if(!e)return;let s=t.options;if(s)return s.$shared&&(t.options=s=Object.assign({},s,{$shared:!1,$animations:{}})),s;t.options=e}(t,s);if(!i)return[];const a=this._createAnimations(i,s);return s.$shared&&function(t,e){const s=[],i=Object.keys(e);for(let e=0;e<i.length;e++){const a=t[i[e]];a&&a.active()&&s.push(a.wait())}return Promise.all(s)}(t.options.$animations,s).then((()=>{t.options=s}),(()=>{})),a}_createAnimations(t,e){const s=this._properties,i=[],a=t.$animations||(t.$animations={}),n=Object.keys(e),r=Date.now();let o;for(o=n.length-1;o>=0;--o){const d=n[o];if("$"===d.charAt(0))continue;if("options"===d){i.push(...this._animateOptions(t,e));continue}const l=e[d];let _=a[d];const h=s.get(d);if(_){if(h&&_.active()){_.update(h,l,r);continue}_.cancel()}h&&h.duration?(a[d]=_=new xs(h,t,d,l),i.push(_)):t[d]=l}return i}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const s=this._createAnimations(t,e);return s.length?(ks.add(this._chart,s),!0):void 0}}function Ss(t,e){const s=t&&t.options||{},i=s.reverse,a=void 0===s.min?e:0,n=void 0===s.max?e:0;return{start:i?n:a,end:i?a:n}}function Hs(t,e){const s=[],i=t._getSortedDatasetMetas(e);let a,n;for(a=0,n=i.length;a<n;++a)s.push(i[a].index);return s}function js(t,e,s,i={}){const a=t.keys,n="single"===i.mode;let r,o,d,l;if(null!==e){for(r=0,o=a.length;r<o;++r){if(d=+a[r],d===s){if(i.all)continue;break}l=t.values[d],v(l)&&(n||0===e||Q(e)===Q(l))&&(e+=l)}return e}}function Ps(t,e){const s=t&&t.options.stacked;return s||void 0===s&&void 0!==e.stack}function Os(t,e,s){const i=t[e]||(t[e]={});return i[s]||(i[s]={})}function As(t,e,s,i){for(const a of e.getMatchingVisibleMetas(i).reverse()){const e=t[a.index];if(s&&e>0||!s&&e<0)return a.index}return null}function Cs(t,e){const{chart:s,_cachedMeta:i}=t,a=s._stacks||(s._stacks={}),{iScale:n,vScale:r,index:o}=i,d=n.axis,l=r.axis,_=function(t,e,s){return`${t.id}.${e.id}.${s.stack||s.type}`}(n,r,i),h=e.length;let u;for(let t=0;t<h;++t){const s=e[t],{[d]:n,[l]:h}=s;u=(s._stacks||(s._stacks={}))[l]=Os(a,_,n),u[o]=h,u._top=As(u,r,!0,i.type),u._bottom=As(u,r,!1,i.type)}}function Es(t,e){const s=t.scales;return Object.keys(s).filter((t=>s[t].axis===e)).shift()}function Ws(t,e){const s=t.controller.index,i=t.vScale&&t.vScale.axis;if(i){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[i]||void 0===e[i][s])return;delete e[i][s]}}}const Fs=t=>"reset"===t||"none"===t,zs=(t,e)=>e?t:Object.assign({},t);class Rs{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=Ps(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&Ws(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,s=this.getDataset(),i=(t,e,s,i)=>"x"===t?e:"r"===t?i:s,a=e.xAxisID=w(s.xAxisID,Es(t,"x")),n=e.yAxisID=w(s.yAxisID,Es(t,"y")),r=e.rAxisID=w(s.rAxisID,Es(t,"r")),o=e.indexAxis,d=e.iAxisID=i(o,a,n,r),l=e.vAxisID=i(o,n,a,r);e.xScale=this.getScaleForId(a),e.yScale=this.getScaleForId(n),e.rScale=this.getScaleForId(r),e.iScale=this.getScaleForId(d),e.vScale=this.getScaleForId(l)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&He(this._data,this),t._stacked&&Ws(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),s=this._data;if(D(e))this._data=function(t){const e=Object.keys(t),s=new Array(e.length);let i,a,n;for(i=0,a=e.length;i<a;++i)n=e[i],s[i]={x:n,y:t[n]};return s}(e);else if(s!==e){if(s){He(s,this);const t=this._cachedMeta;Ws(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(i=e)._chartjs?i._chartjs.listeners.push(this):(Object.defineProperty(i,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),Se.forEach((t=>{const e="_onData"+R(t),s=i[t];Object.defineProperty(i,t,{configurable:!0,enumerable:!1,value(...t){const a=s.apply(this,t);return i._chartjs.listeners.forEach((s=>{"function"==typeof s[e]&&s[e](...t)})),a}})})))),this._syncList=[],this._data=e}var i}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,s=this.getDataset();let i=!1;this._dataCheck();const a=e._stacked;e._stacked=Ps(e.vScale,e),e.stack!==s.stack&&(i=!0,Ws(e),e.stack=s.stack),this._resyncElements(t),(i||a!==e._stacked)&&Cs(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),s=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(s,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:s,_data:i}=this,{iScale:a,_stacked:n}=s,r=a.axis;let o,d,l,_=0===t&&e===i.length||s._sorted,h=t>0&&s._parsed[t-1];if(!1===this._parsing)s._parsed=i,s._sorted=!0,l=i;else{l=k(i[t])?this.parseArrayData(s,i,t,e):D(i[t])?this.parseObjectData(s,i,t,e):this.parsePrimitiveData(s,i,t,e);const a=()=>null===d[r]||h&&d[r]<h[r];for(o=0;o<e;++o)s._parsed[o+t]=d=l[o],_&&(a()&&(_=!1),h=d);s._sorted=_}n&&Cs(this,l)}parsePrimitiveData(t,e,s,i){const{iScale:a,vScale:n}=t,r=a.axis,o=n.axis,d=a.getLabels(),l=a===n,_=new Array(i);let h,u,c;for(h=0,u=i;h<u;++h)c=h+s,_[h]={[r]:l||a.parse(d[c],c),[o]:n.parse(e[c],c)};return _}parseArrayData(t,e,s,i){const{xScale:a,yScale:n}=t,r=new Array(i);let o,d,l,_;for(o=0,d=i;o<d;++o)l=o+s,_=e[l],r[o]={x:a.parse(_[0],l),y:n.parse(_[1],l)};return r}parseObjectData(t,e,s,i){const{xScale:a,yScale:n}=t,{xAxisKey:r="x",yAxisKey:o="y"}=this._parsing,d=new Array(i);let l,_,h,u;for(l=0,_=i;l<_;++l)h=l+s,u=e[h],d[l]={x:a.parse(z(u,r),h),y:n.parse(z(u,o),h)};return d}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,s){const i=this.chart,a=this._cachedMeta,n=e[t.axis];return js({keys:Hs(i,!0),values:e._stacks[t.axis]},n,a.index,{mode:s})}updateRangeFromParsed(t,e,s,i){const a=s[e.axis];let n=null===a?NaN:a;const r=i&&s._stacks[e.axis];i&&r&&(i.values=r,n=js(i,a,this._cachedMeta.index)),t.min=Math.min(t.min,n),t.max=Math.max(t.max,n)}getMinMax(t,e){const s=this._cachedMeta,i=s._parsed,a=s._sorted&&t===s.iScale,n=i.length,r=this._getOtherScale(t),o=((t,e,s)=>t&&!e.hidden&&e._stacked&&{keys:Hs(s,!0),values:null})(e,s,this.chart),d={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:l,max:_}=function(t){const{min:e,max:s,minDefined:i,maxDefined:a}=t.getUserBounds();return{min:i?e:Number.NEGATIVE_INFINITY,max:a?s:Number.POSITIVE_INFINITY}}(r);let h,u;function c(){u=i[h];const e=u[r.axis];return!v(u[t.axis])||l>e||_<e}for(h=0;h<n&&(c()||(this.updateRangeFromParsed(d,t,u,o),!a));++h);if(a)for(h=n-1;h>=0;--h)if(!c()){this.updateRangeFromParsed(d,t,u,o);break}return d}getAllParsedValues(t){const e=this._cachedMeta._parsed,s=[];let i,a,n;for(i=0,a=e.length;i<a;++i)n=e[i][t.axis],v(n)&&s.push(n);return s}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,s=e.iScale,i=e.vScale,a=this.getParsed(t);return{label:s?""+s.getLabelForValue(a[s.axis]):"",value:i?""+i.getLabelForValue(a[i.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,s,i,a;return D(t)?(e=t.top,s=t.right,i=t.bottom,a=t.left):e=s=i=a=t,{top:e,right:s,bottom:i,left:a,disabled:!1===t}}(w(this.options.clip,function(t,e,s){if(!1===s)return!1;const i=Ss(t,s),a=Ss(e,s);return{top:a.end,right:i.end,bottom:a.start,left:i.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,s=this._cachedMeta,i=s.data||[],a=e.chartArea,n=[],r=this._drawStart||0,o=this._drawCount||i.length-r,d=this.options.drawActiveElementsOnTop;let l;for(s.dataset&&s.dataset.draw(t,a,r,o),l=r;l<r+o;++l){const e=i[l];e.hidden||(e.active&&d?n.push(e):e.draw(t,a))}for(l=0;l<n.length;++l)n[l].draw(t,a)}getStyle(t,e){const s=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(s):this.resolveDataElementOptions(t||0,s)}getContext(t,e,s){const i=this.getDataset();let a;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];a=e.$context||(e.$context=function(t,e,s){return ve(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:s,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),a.parsed=this.getParsed(t),a.raw=i.data[t],a.index=a.dataIndex=t}else a=this.$context||(this.$context=function(t,e){return ve(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),a.dataset=i,a.index=a.datasetIndex=this.index;return a.active=!!e,a.mode=s,a}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",s){const i="active"===e,a=this._cachedDataOpts,n=t+"-"+e,r=a[n],o=this.enableOptionSharing&&I(s);if(r)return zs(r,o);const d=this.chart.config,l=d.datasetElementScopeKeys(this._type,t),_=i?[`${t}Hover`,"hover",t,""]:[t,""],h=d.getOptionScopes(this.getDataset(),l),u=Object.keys(se.elements[t]),c=d.resolveNamedOptions(h,u,(()=>this.getContext(s,i)),_);return c.$shared&&(c.$shared=o,a[n]=Object.freeze(zs(c,o))),c}_resolveAnimations(t,e,s){const i=this.chart,a=this._cachedDataOpts,n=`animation-${e}`,r=a[n];if(r)return r;let o;if(!1!==i.options.animation){const i=this.chart.config,a=i.datasetAnimationScopeKeys(this._type,e),n=i.getOptionScopes(this.getDataset(),a);o=i.createResolver(n,this.getContext(t,s,e))}const d=new Ts(i,o&&o.animations);return o&&o._cacheable&&(a[n]=Object.freeze(d)),d}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Fs(t)||this.chart._animationsDisabled}updateElement(t,e,s,i){Fs(i)?Object.assign(t,s):this._resolveAnimations(e,i).update(t,s)}updateSharedOptions(t,e,s){t&&!Fs(e)&&this._resolveAnimations(void 0,e).update(t,s)}_setStyle(t,e,s,i){t.active=i;const a=this.getStyle(e,i);this._resolveAnimations(e,s,i).update(t,{options:!i&&this.getSharedOptions(a)||a})}removeHoverStyle(t,e,s){this._setStyle(t,s,"active",!1)}setHoverStyle(t,e,s){this._setStyle(t,s,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,s=this._cachedMeta.data;for(const[t,e,s]of this._syncList)this[t](e,s);this._syncList=[];const i=s.length,a=e.length,n=Math.min(a,i);n&&this.parse(0,n),a>i?this._insertElements(i,a-i,t):a<i&&this._removeElements(a,i-a)}_insertElements(t,e,s=!0){const i=this._cachedMeta,a=i.data,n=t+e;let r;const o=t=>{for(t.length+=e,r=t.length-1;r>=n;r--)t[r]=t[r-e]};for(o(a),r=t;r<n;++r)a[r]=new this.dataElementType;this._parsing&&o(i._parsed),this.parse(t,e),s&&this.updateElements(a,t,e,"reset")}updateElements(t,e,s,i){}_removeElements(t,e){const s=this._cachedMeta;if(this._parsing){const i=s._parsed.splice(t,e);s._stacked&&Ws(s,i)}s.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,s,i]=t;this[e](s,i)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const s=arguments.length-2;s&&this._sync(["_insertElements",t,s])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Is(t){const e=t.iScale,s=function(t,e){if(!t._cache.$bar){const s=t.getMatchingVisibleMetas(e);let i=[];for(let e=0,a=s.length;e<a;e++)i=i.concat(s[e].controller.getAllParsedValues(t));t._cache.$bar=je(i.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let i,a,n,r,o=e._length;const d=()=>{32767!==n&&-32768!==n&&(I(r)&&(o=Math.min(o,Math.abs(n-r)||o)),r=n)};for(i=0,a=s.length;i<a;++i)n=e.getPixelForValue(s[i]),d();for(r=void 0,i=0,a=e.ticks.length;i<a;++i)n=e.getPixelForTick(i),d();return o}function Ns(t,e,s,i){return k(t)?function(t,e,s,i){const a=s.parse(t[0],i),n=s.parse(t[1],i),r=Math.min(a,n),o=Math.max(a,n);let d=r,l=o;Math.abs(r)>Math.abs(o)&&(d=o,l=r),e[s.axis]=l,e._custom={barStart:d,barEnd:l,start:a,end:n,min:r,max:o}}(t,e,s,i):e[s.axis]=s.parse(t,i),e}function Vs(t,e,s,i){const a=t.iScale,n=t.vScale,r=a.getLabels(),o=a===n,d=[];let l,_,h,u;for(l=s,_=s+i;l<_;++l)u=e[l],h={},h[a.axis]=o||a.parse(r[l],l),d.push(Ns(u,h,n,l));return d}function Bs(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Js(t,e,s,i){let a=e.borderSkipped;const n={};if(!a)return void(t.borderSkipped=n);const{start:r,end:o,reverse:d,top:l,bottom:_}=function(t){let e,s,i,a,n;return t.horizontal?(e=t.base>t.x,s="left",i="right"):(e=t.base<t.y,s="bottom",i="top"),e?(a="end",n="start"):(a="start",n="end"),{start:s,end:i,reverse:e,top:a,bottom:n}}(t);"middle"===a&&s&&(t.enableBorderRadius=!0,(s._top||0)===i?a=l:(s._bottom||0)===i?a=_:(n[$s(_,r,o,d)]=!0,a=l)),n[$s(a,r,o,d)]=!0,t.borderSkipped=n}function $s(t,e,s,i){var a,n,r;return i?(r=s,t=Us(t=(a=t)===(n=e)?r:a===r?n:a,s,e)):t=Us(t,e,s),t}function Us(t,e,s){return"start"===t?e:"end"===t?s:t}function Gs(t,{inflateAmount:e},s){t.inflateAmount="auto"===e?1===s?.33:0:e}Rs.defaults={},Rs.prototype.datasetElementType=null,Rs.prototype.dataElementType=null;class qs extends Rs{parsePrimitiveData(t,e,s,i){return Vs(t,e,s,i)}parseArrayData(t,e,s,i){return Vs(t,e,s,i)}parseObjectData(t,e,s,i){const{iScale:a,vScale:n}=t,{xAxisKey:r="x",yAxisKey:o="y"}=this._parsing,d="x"===a.axis?r:o,l="x"===n.axis?r:o,_=[];let h,u,c,m;for(h=s,u=s+i;h<u;++h)m=e[h],c={},c[a.axis]=a.parse(z(m,d),h),_.push(Ns(z(m,l),c,n,h));return _}updateRangeFromParsed(t,e,s,i){super.updateRangeFromParsed(t,e,s,i);const a=s._custom;a&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,a.min),t.max=Math.max(t.max,a.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:s,vScale:i}=e,a=this.getParsed(t),n=a._custom,r=Bs(n)?"["+n.start+", "+n.end+"]":""+i.getLabelForValue(a[i.axis]);return{label:""+s.getLabelForValue(a[s.axis]),value:r}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,s,i){const a="reset"===i,{index:n,_cachedMeta:{vScale:r}}=this,o=r.getBasePixel(),d=r.isHorizontal(),l=this._getRuler(),_=this.resolveDataElementOptions(e,i),h=this.getSharedOptions(_),u=this.includeOptions(i,h);this.updateSharedOptions(h,i,_);for(let _=e;_<e+s;_++){const e=this.getParsed(_),s=a||b(e[r.axis])?{base:o,head:o}:this._calculateBarValuePixels(_),c=this._calculateBarIndexPixels(_,l),m=(e._stacks||{})[r.axis],f={horizontal:d,base:s.base,enableBorderRadius:!m||Bs(e._custom)||n===m._top||n===m._bottom,x:d?s.head:c.center,y:d?c.center:s.head,height:d?c.size:Math.abs(s.size),width:d?Math.abs(s.size):c.size};u&&(f.options=h||this.resolveDataElementOptions(_,t[_].active?"active":i));const p=f.options||t[_].options;Js(f,p,m,n),Gs(f,p,l.ratio),this.updateElement(t[_],_,f,i)}}_getStacks(t,e){const s=this._cachedMeta.iScale,i=s.getMatchingVisibleMetas(this._type),a=s.options.stacked,n=i.length,r=[];let o,d;for(o=0;o<n;++o)if(d=i[o],d.controller.options.grouped){if(void 0!==e){const t=d.controller.getParsed(e)[d.controller._cachedMeta.vScale.axis];if(b(t)||isNaN(t))continue}if((!1===a||-1===r.indexOf(d.stack)||void 0===a&&void 0===d.stack)&&r.push(d.stack),d.index===t)break}return r.length||r.push(void 0),r}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,s){const i=this._getStacks(t,s),a=void 0!==e?i.indexOf(e):-1;return-1===a?i.length-1:a}_getRuler(){const t=this.options,e=this._cachedMeta,s=e.iScale,i=[];let a,n;for(a=0,n=e.data.length;a<n;++a)i.push(s.getPixelForValue(this.getParsed(a)[s.axis],a));const r=t.barThickness;return{min:r||Is(e),pixels:i,start:s._startPixel,end:s._endPixel,stackCount:this._getStackCount(),scale:s,grouped:t.grouped,ratio:r?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:s},options:{base:i,minBarLength:a}}=this,n=i||0,r=this.getParsed(t),o=r._custom,d=Bs(o);let l,_,h=r[e.axis],u=0,c=s?this.applyStack(e,r,s):h;c!==h&&(u=c-h,c=h),d&&(h=o.barStart,c=o.barEnd-o.barStart,0!==h&&Q(h)!==Q(o.barEnd)&&(u=0),u+=h);const m=b(i)||d?u:i;let f=e.getPixelForValue(m);if(l=this.chart.getDataVisibility(t)?e.getPixelForValue(u+c):f,_=l-f,Math.abs(_)<a){_=function(t,e,s){return 0!==t?Q(t):(e.isHorizontal()?1:-1)*(e.min>=s?1:-1)}(_,e,n)*a,h===n&&(f-=_/2);const t=e.getPixelForDecimal(0),s=e.getPixelForDecimal(1),i=Math.min(t,s),r=Math.max(t,s);f=Math.max(Math.min(f,r),i),l=f+_}if(f===e.getPixelForValue(n)){const t=Q(_)*e.getLineWidthForValue(n)/2;f+=t,_-=t}return{size:_,base:f,head:l,center:l+_/2}}_calculateBarIndexPixels(t,e){const s=e.scale,i=this.options,a=i.skipNull,n=w(i.maxBarThickness,1/0);let r,o;if(e.grouped){const s=a?this._getStackCount(t):e.stackCount,d="flex"===i.barThickness?function(t,e,s,i){const a=e.pixels,n=a[t];let r=t>0?a[t-1]:null,o=t<a.length-1?a[t+1]:null;const d=s.categoryPercentage;null===r&&(r=n-(null===o?e.end-e.start:o-n)),null===o&&(o=n+n-r);const l=n-(n-Math.min(r,o))/2*d;return{chunk:Math.abs(o-r)/2*d/i,ratio:s.barPercentage,start:l}}(t,e,i,s):function(t,e,s,i){const a=s.barThickness;let n,r;return b(a)?(n=e.min*s.categoryPercentage,r=s.barPercentage):(n=a*i,r=1),{chunk:n/i,ratio:r,start:e.pixels[t]-n/2}}(t,e,i,s),l=this._getStackIndex(this.index,this._cachedMeta.stack,a?t:void 0);r=d.start+d.chunk*l+d.chunk/2,o=Math.min(n,d.chunk*d.ratio)}else r=s.getPixelForValue(this.getParsed(t)[s.axis],t),o=Math.min(n,e.min*e.ratio);return{base:r-o/2,head:r+o/2,center:r,size:o}}draw(){const t=this._cachedMeta,e=t.vScale,s=t.data,i=s.length;let a=0;for(;a<i;++a)null!==this.getParsed(a)[e.axis]&&s[a].draw(this._ctx)}}qs.id="bar",qs.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},qs.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class Ks extends Rs{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,s,i){const a=super.parsePrimitiveData(t,e,s,i);for(let t=0;t<a.length;t++)a[t]._custom=this.resolveDataElementOptions(t+s).radius;return a}parseArrayData(t,e,s,i){const a=super.parseArrayData(t,e,s,i);for(let t=0;t<a.length;t++){const i=e[s+t];a[t]._custom=w(i[2],this.resolveDataElementOptions(t+s).radius)}return a}parseObjectData(t,e,s,i){const a=super.parseObjectData(t,e,s,i);for(let t=0;t<a.length;t++){const i=e[s+t];a[t]._custom=w(i&&i.r&&+i.r,this.resolveDataElementOptions(t+s).radius)}return a}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let s=t.length-1;s>=0;--s)e=Math.max(e,t[s].size(this.resolveDataElementOptions(s))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:s,yScale:i}=e,a=this.getParsed(t),n=s.getLabelForValue(a.x),r=i.getLabelForValue(a.y),o=a._custom;return{label:e.label,value:"("+n+", "+r+(o?", "+o:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,s,i){const a="reset"===i,{iScale:n,vScale:r}=this._cachedMeta,o=this.resolveDataElementOptions(e,i),d=this.getSharedOptions(o),l=this.includeOptions(i,d),_=n.axis,h=r.axis;for(let o=e;o<e+s;o++){const e=t[o],s=!a&&this.getParsed(o),d={},u=d[_]=a?n.getPixelForDecimal(.5):n.getPixelForValue(s[_]),c=d[h]=a?r.getBasePixel():r.getPixelForValue(s[h]);d.skip=isNaN(u)||isNaN(c),l&&(d.options=this.resolveDataElementOptions(o,e.active?"active":i),a&&(d.options.radius=0)),this.updateElement(e,o,d,i)}this.updateSharedOptions(d,i,o)}resolveDataElementOptions(t,e){const s=this.getParsed(t);let i=super.resolveDataElementOptions(t,e);i.$shared&&(i=Object.assign({},i,{$shared:!1}));const a=i.radius;return"active"!==e&&(i.radius=0),i.radius+=w(s&&s._custom,a),i}}Ks.id="bubble",Ks.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},Ks.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class Zs extends Rs{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const s=this.getDataset().data,i=this._cachedMeta;if(!1===this._parsing)i._parsed=s;else{let a,n,r=t=>+s[t];if(D(s[t])){const{key:t="value"}=this._parsing;r=e=>+z(s[e],t)}for(a=t,n=t+e;a<n;++a)i._parsed[a]=r(a)}}_getRotation(){return at(this.options.rotation-90)}_getCircumference(){return at(this.options.circumference)}_getRotationExtents(){let t=J,e=-J;for(let s=0;s<this.chart.data.datasets.length;++s)if(this.chart.isDatasetVisible(s)){const i=this.chart.getDatasetMeta(s).controller,a=i._getRotation(),n=i._getCircumference();t=Math.min(t,a),e=Math.max(e,a+n)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:s}=e,i=this._cachedMeta,a=i.data,n=this.getMaxBorderWidth()+this.getMaxOffset(a)+this.options.spacing,r=Math.max((Math.min(s.width,s.height)-n)/2,0),o=Math.min((l=r,"string"==typeof(d=this.options.cutout)&&d.endsWith("%")?parseFloat(d)/100:d/l),1);var d,l;const _=this._getRingWeight(this.index),{circumference:h,rotation:u}=this._getRotationExtents(),{ratioX:c,ratioY:m,offsetX:f,offsetY:p}=function(t,e,s){let i=1,a=1,n=0,r=0;if(e<J){const o=t,d=o+e,l=Math.cos(o),_=Math.sin(o),h=Math.cos(d),u=Math.sin(d),c=(t,e,i)=>ht(t,o,d,!0)?1:Math.max(e,e*s,i,i*s),m=(t,e,i)=>ht(t,o,d,!0)?-1:Math.min(e,e*s,i,i*s),f=c(0,l,h),p=c(q,_,u),M=m(B,l,h),g=m(B+q,_,u);i=(f-M)/2,a=(p-g)/2,n=-(f+M)/2,r=-(p+g)/2}return{ratioX:i,ratioY:a,offsetX:n,offsetY:r}}(u,h,o),M=(s.width-n)/c,g=(s.height-n)/m,y=Math.max(Math.min(M,g)/2,0),L=T(this.options.radius,y),Y=(L-Math.max(L*o,0))/this._getVisibleDatasetWeightTotal();this.offsetX=f*L,this.offsetY=p*L,i.total=this.calculateTotal(),this.outerRadius=L-Y*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-Y*_,0),this.updateElements(a,0,a.length,t)}_circumference(t,e){const s=this.options,i=this._cachedMeta,a=this._getCircumference();return e&&s.animation.animateRotate||!this.chart.getDataVisibility(t)||null===i._parsed[t]||i.data[t].hidden?0:this.calculateCircumference(i._parsed[t]*a/J)}updateElements(t,e,s,i){const a="reset"===i,n=this.chart,r=n.chartArea,o=n.options.animation,d=(r.left+r.right)/2,l=(r.top+r.bottom)/2,_=a&&o.animateScale,h=_?0:this.innerRadius,u=_?0:this.outerRadius,c=this.resolveDataElementOptions(e,i),m=this.getSharedOptions(c),f=this.includeOptions(i,m);let p,M=this._getRotation();for(p=0;p<e;++p)M+=this._circumference(p,a);for(p=e;p<e+s;++p){const e=this._circumference(p,a),s=t[p],n={x:d+this.offsetX,y:l+this.offsetY,startAngle:M,endAngle:M+e,circumference:e,outerRadius:u,innerRadius:h};f&&(n.options=m||this.resolveDataElementOptions(p,s.active?"active":i)),M+=e,this.updateElement(s,p,n,i)}this.updateSharedOptions(m,i,c)}calculateTotal(){const t=this._cachedMeta,e=t.data;let s,i=0;for(s=0;s<e.length;s++){const a=t._parsed[s];null===a||isNaN(a)||!this.chart.getDataVisibility(s)||e[s].hidden||(i+=Math.abs(a))}return i}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?J*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,s=this.chart,i=s.data.labels||[],a=cs(e._parsed[t],s.options.locale);return{label:i[t]||"",value:a}}getMaxBorderWidth(t){let e=0;const s=this.chart;let i,a,n,r,o;if(!t)for(i=0,a=s.data.datasets.length;i<a;++i)if(s.isDatasetVisible(i)){n=s.getDatasetMeta(i),t=n.data,r=n.controller;break}if(!t)return 0;for(i=0,a=t.length;i<a;++i)o=r.resolveDataElementOptions(i),"inner"!==o.borderAlign&&(e=Math.max(e,o.borderWidth||0,o.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let s=0,i=t.length;s<i;++s){const t=this.resolveDataElementOptions(s);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let s=0;s<t;++s)this.chart.isDatasetVisible(s)&&(e+=this._getRingWeight(s));return e}_getRingWeight(t){return Math.max(w(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}Zs.id="doughnut",Zs.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},Zs.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},Zs.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:s}}=t.legend.options;return e.labels.map(((e,i)=>{const a=t.getDatasetMeta(0).controller.getStyle(i);return{text:e,fillStyle:a.backgroundColor,strokeStyle:a.borderColor,lineWidth:a.borderWidth,pointStyle:s,hidden:!t.getDataVisibility(i),index:i}}))}return[]}},onClick(t,e,s){s.chart.toggleDataVisibility(e.index),s.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const s=": "+t.formattedValue;return k(e)?(e=e.slice(),e[0]+=s):e+=s,e}}}}};class Xs extends Rs{initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:s,data:i=[],_dataset:a}=e,n=this.chart._animationsDisabled;let{start:r,count:o}=function(t,e,s){const i=e.length;let a=0,n=i;if(t._sorted){const{iScale:r,_parsed:o}=t,d=r.axis,{min:l,max:_,minDefined:h,maxDefined:u}=r.getUserBounds();h&&(a=ut(Math.min(we(o,r.axis,l).lo,s?i:we(e,d,r.getPixelForValue(l)).lo),0,i-1)),n=u?ut(Math.max(we(o,r.axis,_).hi+1,s?0:we(e,d,r.getPixelForValue(_)).hi+1),a,i)-a:i-a}return{start:a,count:n}}(e,i,n);this._drawStart=r,this._drawCount=o,function(t){const{xScale:e,yScale:s,_scaleRanges:i}=t,a={xmin:e.min,xmax:e.max,ymin:s.min,ymax:s.max};if(!i)return t._scaleRanges=a,!0;const n=i.xmin!==e.min||i.xmax!==e.max||i.ymin!==s.min||i.ymax!==s.max;return Object.assign(i,a),n}(e)&&(r=0,o=i.length),s._chart=this.chart,s._datasetIndex=this.index,s._decimated=!!a._decimated,s.points=i;const d=this.resolveDatasetElementOptions(t);this.options.showLine||(d.borderWidth=0),d.segment=this.options.segment,this.updateElement(s,void 0,{animated:!n,options:d},t),this.updateElements(i,r,o,t)}updateElements(t,e,s,i){const a="reset"===i,{iScale:n,vScale:r,_stacked:o,_dataset:d}=this._cachedMeta,l=this.resolveDataElementOptions(e,i),_=this.getSharedOptions(l),h=this.includeOptions(i,_),u=n.axis,c=r.axis,{spanGaps:m,segment:f}=this.options,p=et(m)?m:Number.POSITIVE_INFINITY,M=this.chart._animationsDisabled||a||"none"===i;let g=e>0&&this.getParsed(e-1);for(let l=e;l<e+s;++l){const e=t[l],s=this.getParsed(l),m=M?e:{},y=b(s[c]),L=m[u]=n.getPixelForValue(s[u],l),Y=m[c]=a||y?r.getBasePixel():r.getPixelForValue(o?this.applyStack(r,s,o):s[c],l);m.skip=isNaN(L)||isNaN(Y)||y,m.stop=l>0&&Math.abs(s[u]-g[u])>p,f&&(m.parsed=s,m.raw=d.data[l]),h&&(m.options=_||this.resolveDataElementOptions(l,e.active?"active":i)),M||this.updateElement(e,l,m,i),g=s}this.updateSharedOptions(_,i,l)}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,s=e.options&&e.options.borderWidth||0,i=t.data||[];if(!i.length)return s;const a=i[0].size(this.resolveDataElementOptions(0)),n=i[i.length-1].size(this.resolveDataElementOptions(i.length-1));return Math.max(s,a,n)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}Xs.id="line",Xs.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},Xs.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class Qs extends Rs{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,s=this.chart,i=s.data.labels||[],a=cs(e._parsed[t].r,s.options.locale);return{label:i[t]||"",value:a}}parseObjectData(t,e,s,i){return Je.bind(this)(t,e,s,i)}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}getMinMax(){const t=this._cachedMeta,e={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return t.data.forEach(((t,s)=>{const i=this.getParsed(s).r;!isNaN(i)&&this.chart.getDataVisibility(s)&&(i<e.min&&(e.min=i),i>e.max&&(e.max=i))})),e}_updateRadius(){const t=this.chart,e=t.chartArea,s=t.options,i=Math.min(e.right-e.left,e.bottom-e.top),a=Math.max(i/2,0),n=(a-Math.max(s.cutoutPercentage?a/100*s.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=a-n*this.index,this.innerRadius=this.outerRadius-n}updateElements(t,e,s,i){const a="reset"===i,n=this.chart,r=n.options.animation,o=this._cachedMeta.rScale,d=o.xCenter,l=o.yCenter,_=o.getIndexAngle(0)-.5*B;let h,u=_;const c=360/this.countVisibleElements();for(h=0;h<e;++h)u+=this._computeAngle(h,i,c);for(h=e;h<e+s;h++){const e=t[h];let s=u,m=u+this._computeAngle(h,i,c),f=n.getDataVisibility(h)?o.getDistanceFromCenterForValue(this.getParsed(h).r):0;u=m,a&&(r.animateScale&&(f=0),r.animateRotate&&(s=m=_));const p={x:d,y:l,innerRadius:0,outerRadius:f,startAngle:s,endAngle:m,options:this.resolveDataElementOptions(h,e.active?"active":i)};this.updateElement(e,h,p,i)}}countVisibleElements(){const t=this._cachedMeta;let e=0;return t.data.forEach(((t,s)=>{!isNaN(this.getParsed(s).r)&&this.chart.getDataVisibility(s)&&e++})),e}_computeAngle(t,e,s){return this.chart.getDataVisibility(t)?at(this.resolveDataElementOptions(t,e).angle||s):0}}Qs.id="polarArea",Qs.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},Qs.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:s}}=t.legend.options;return e.labels.map(((e,i)=>{const a=t.getDatasetMeta(0).controller.getStyle(i);return{text:e,fillStyle:a.backgroundColor,strokeStyle:a.borderColor,lineWidth:a.borderWidth,pointStyle:s,hidden:!t.getDataVisibility(i),index:i}}))}return[]}},onClick(t,e,s){s.chart.toggleDataVisibility(e.index),s.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class ti extends Zs{}ti.id="pie",ti.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class ei extends Rs{getLabelAndValue(t){const e=this._cachedMeta.vScale,s=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(s[e.axis])}}parseObjectData(t,e,s,i){return Je.bind(this)(t,e,s,i)}update(t){const e=this._cachedMeta,s=e.dataset,i=e.data||[],a=e.iScale.getLabels();if(s.points=i,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const n={_loop:!0,_fullLoop:a.length===i.length,options:e};this.updateElement(s,void 0,n,t)}this.updateElements(i,0,i.length,t)}updateElements(t,e,s,i){const a=this._cachedMeta.rScale,n="reset"===i;for(let r=e;r<e+s;r++){const e=t[r],s=this.resolveDataElementOptions(r,e.active?"active":i),o=a.getPointPositionForValue(r,this.getParsed(r).r),d=n?a.xCenter:o.x,l=n?a.yCenter:o.y,_={x:d,y:l,angle:o.angle,skip:isNaN(d)||isNaN(l),options:s};this.updateElement(e,r,_,i)}}}ei.id="radar",ei.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},ei.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class si extends Xs{}si.id="scatter",si.defaults={showLine:!1,fill:!1},si.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var ii=Object.freeze({__proto__:null,BarController:qs,BubbleController:Ks,DoughnutController:Zs,LineController:Xs,PolarAreaController:Qs,PieController:ti,RadarController:ei,ScatterController:si});function ai(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class ni{constructor(t){this.options=t||{}}formats(){return ai()}parse(t,e){return ai()}format(t,e){return ai()}add(t,e,s){return ai()}diff(t,e,s){return ai()}startOf(t,e,s){return ai()}endOf(t,e){return ai()}}ni.override=function(t){Object.assign(ni.prototype,t)};var ri={_date:ni};function oi(t,e,s,i){const{controller:a,data:n,_sorted:r}=t,o=a._cachedMeta.iScale;if(o&&e===o.axis&&"r"!==e&&r&&n.length){const t=o._reversePixels?Te:we;if(!i)return t(n,e,s);if(a._sharedOptions){const i=n[0],a="function"==typeof i.getRange&&i.getRange(e);if(a){const i=t(n,e,s-a),r=t(n,e,s+a);return{lo:i.lo,hi:r.hi}}}}return{lo:0,hi:n.length-1}}function di(t,e,s,i,a){const n=t.getSortedVisibleDatasetMetas(),r=s[e];for(let t=0,s=n.length;t<s;++t){const{index:s,data:o}=n[t],{lo:d,hi:l}=oi(n[t],e,r,a);for(let t=d;t<=l;++t){const e=o[t];e.skip||i(e,s,t)}}}function li(t,e,s,i,a){const n=[];return a||t.isPointInArea(e)?(di(t,s,e,(function(s,r,o){(a||de(s,t.chartArea,0))&&s.inRange(e.x,e.y,i)&&n.push({element:s,datasetIndex:r,index:o})}),!0),n):n}function _i(t,e,s,i,a,n){return n||t.isPointInArea(e)?"r"!==s||i?function(t,e,s,i,a,n){let r=[];const o=function(t){const e=-1!==t.indexOf("x"),s=-1!==t.indexOf("y");return function(t,i){const a=e?Math.abs(t.x-i.x):0,n=s?Math.abs(t.y-i.y):0;return Math.sqrt(Math.pow(a,2)+Math.pow(n,2))}}(s);let d=Number.POSITIVE_INFINITY;return di(t,s,e,(function(s,l,_){const h=s.inRange(e.x,e.y,a);if(i&&!h)return;const u=s.getCenterPoint(a);if(!n&&!t.isPointInArea(u)&&!h)return;const c=o(e,u);c<d?(r=[{element:s,datasetIndex:l,index:_}],d=c):c===d&&r.push({element:s,datasetIndex:l,index:_})})),r}(t,e,s,i,a,n):function(t,e,s,i){let a=[];return di(t,s,e,(function(t,s,n){const{startAngle:r,endAngle:o}=t.getProps(["startAngle","endAngle"],i),{angle:d}=ot(t,{x:e.x,y:e.y});ht(d,r,o)&&a.push({element:t,datasetIndex:s,index:n})})),a}(t,e,s,a):[]}function hi(t,e,s,i,a){const n=[],r="x"===s?"inXRange":"inYRange";let o=!1;return di(t,s,e,((t,i,d)=>{t[r](e[s],a)&&(n.push({element:t,datasetIndex:i,index:d}),o=o||t.inRange(e.x,e.y,a))})),i&&!o?[]:n}var ui={evaluateInteractionItems:di,modes:{index(t,e,s,i){const a=as(e,t),n=s.axis||"x",r=s.includeInvisible||!1,o=s.intersect?li(t,a,n,i,r):_i(t,a,n,!1,i,r),d=[];return o.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=o[0].index,s=t.data[e];s&&!s.skip&&d.push({element:s,datasetIndex:t.index,index:e})})),d):[]},dataset(t,e,s,i){const a=as(e,t),n=s.axis||"xy",r=s.includeInvisible||!1;let o=s.intersect?li(t,a,n,i,r):_i(t,a,n,!1,i,r);if(o.length>0){const e=o[0].datasetIndex,s=t.getDatasetMeta(e).data;o=[];for(let t=0;t<s.length;++t)o.push({element:s[t],datasetIndex:e,index:t})}return o},point:(t,e,s,i)=>li(t,as(e,t),s.axis||"xy",i,s.includeInvisible||!1),nearest(t,e,s,i){const a=as(e,t),n=s.axis||"xy",r=s.includeInvisible||!1;return _i(t,a,n,s.intersect,i,r)},x:(t,e,s,i)=>hi(t,as(e,t),"x",s.intersect,i),y:(t,e,s,i)=>hi(t,as(e,t),"y",s.intersect,i)}};const ci=["left","top","right","bottom"];function mi(t,e){return t.filter((t=>t.pos===e))}function fi(t,e){return t.filter((t=>-1===ci.indexOf(t.pos)&&t.box.axis===e))}function pi(t,e){return t.sort(((t,s)=>{const i=e?s:t,a=e?t:s;return i.weight===a.weight?i.index-a.index:i.weight-a.weight}))}function Mi(t,e,s,i){return Math.max(t[s],e[s])+Math.max(t[i],e[i])}function gi(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function yi(t,e,s,i){const{pos:a,box:n}=s,r=t.maxPadding;if(!D(a)){s.size&&(t[a]-=s.size);const e=i[s.stack]||{size:0,count:1};e.size=Math.max(e.size,s.horizontal?n.height:n.width),s.size=e.size/e.count,t[a]+=s.size}n.getPadding&&gi(r,n.getPadding());const o=Math.max(0,e.outerWidth-Mi(r,t,"left","right")),d=Math.max(0,e.outerHeight-Mi(r,t,"top","bottom")),l=o!==t.w,_=d!==t.h;return t.w=o,t.h=d,s.horizontal?{same:l,other:_}:{same:_,other:l}}function Li(t,e){const s=e.maxPadding;return function(t){const i={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{i[t]=Math.max(e[t],s[t])})),i}(t?["left","right"]:["top","bottom"])}function Yi(t,e,s,i){const a=[];let n,r,o,d,l,_;for(n=0,r=t.length,l=0;n<r;++n){o=t[n],d=o.box,d.update(o.width||e.w,o.height||e.h,Li(o.horizontal,e));const{same:r,other:h}=yi(e,s,o,i);l|=r&&a.length,_=_||h,d.fullSize||a.push(o)}return l&&Yi(a,e,s,i)||_}function bi(t,e,s,i,a){t.top=s,t.left=e,t.right=e+i,t.bottom=s+a,t.width=i,t.height=a}function ki(t,e,s,i){const a=s.padding;let{x:n,y:r}=e;for(const o of t){const t=o.box,d=i[o.stack]||{count:1,placed:0,weight:1},l=o.stackWeight/d.weight||1;if(o.horizontal){const i=e.w*l,n=d.size||t.height;I(d.start)&&(r=d.start),t.fullSize?bi(t,a.left,r,s.outerWidth-a.right-a.left,n):bi(t,e.left+d.placed,r,i,n),d.start=r,d.placed+=i,r=t.bottom}else{const i=e.h*l,r=d.size||t.width;I(d.start)&&(n=d.start),t.fullSize?bi(t,n,a.top,r,s.outerHeight-a.bottom-a.top):bi(t,n,e.top+d.placed,r,i),d.start=n,d.placed+=i,n=t.right}}e.x=n,e.y=r}se.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var Di={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const s=t.boxes?t.boxes.indexOf(e):-1;-1!==s&&t.boxes.splice(s,1)},configure(t,e,s){e.fullSize=s.fullSize,e.position=s.position,e.weight=s.weight},update(t,e,s,i){if(!t)return;const a=be(t.options.layout.padding),n=Math.max(e-a.width,0),r=Math.max(s-a.height,0),o=function(t){const e=function(t){const e=[];let s,i,a,n,r,o;for(s=0,i=(t||[]).length;s<i;++s)a=t[s],({position:n,options:{stack:r,stackWeight:o=1}}=a),e.push({index:s,box:a,pos:n,horizontal:a.isHorizontal(),weight:a.weight,stack:r&&n+r,stackWeight:o});return e}(t),s=pi(e.filter((t=>t.box.fullSize)),!0),i=pi(mi(e,"left"),!0),a=pi(mi(e,"right")),n=pi(mi(e,"top"),!0),r=pi(mi(e,"bottom")),o=fi(e,"x"),d=fi(e,"y");return{fullSize:s,leftAndTop:i.concat(n),rightAndBottom:a.concat(d).concat(r).concat(o),chartArea:mi(e,"chartArea"),vertical:i.concat(a).concat(d),horizontal:n.concat(r).concat(o)}}(t.boxes),d=o.vertical,l=o.horizontal;H(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const _=d.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,h=Object.freeze({outerWidth:e,outerHeight:s,padding:a,availableWidth:n,availableHeight:r,vBoxMaxWidth:n/2/_,hBoxMaxHeight:r/2}),u=Object.assign({},a);gi(u,be(i));const c=Object.assign({maxPadding:u,w:n,h:r,x:a.left,y:a.top},a),m=function(t,e){const s=function(t){const e={};for(const s of t){const{stack:t,pos:i,stackWeight:a}=s;if(!t||!ci.includes(i))continue;const n=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});n.count++,n.weight+=a}return e}(t),{vBoxMaxWidth:i,hBoxMaxHeight:a}=e;let n,r,o;for(n=0,r=t.length;n<r;++n){o=t[n];const{fullSize:r}=o.box,d=s[o.stack],l=d&&o.stackWeight/d.weight;o.horizontal?(o.width=l?l*i:r&&e.availableWidth,o.height=a):(o.width=i,o.height=l?l*a:r&&e.availableHeight)}return s}(d.concat(l),h);Yi(o.fullSize,c,h,m),Yi(d,c,h,m),Yi(l,c,h,m)&&Yi(d,c,h,m),function(t){const e=t.maxPadding;function s(s){const i=Math.max(e[s]-t[s],0);return t[s]+=i,i}t.y+=s("top"),t.x+=s("left"),s("right"),s("bottom")}(c),ki(o.leftAndTop,c,h,m),c.x+=c.w,c.y+=c.h,ki(o.rightAndBottom,c,h,m),t.chartArea={left:c.left,top:c.top,right:c.left+c.w,bottom:c.top+c.h,height:c.h,width:c.w},H(o.chartArea,(e=>{const s=e.box;Object.assign(s,t.chartArea),s.update(c.w,c.h,{left:0,top:0,right:0,bottom:0})}))}};class vi{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,s){}removeEventListener(t,e,s){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,s,i){return e=Math.max(0,e||t.width),s=s||t.height,{width:e,height:Math.max(0,i?Math.floor(e/i):s)}}isAttached(t){return!0}updateConfig(t){}}class xi extends vi{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const wi={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Ti=t=>null===t||""===t,Si=!!os&&{passive:!0};function Hi(t,e,s){t.canvas.removeEventListener(e,s,Si)}function ji(t,e){for(const s of t)if(s===e||s.contains(e))return!0}function Pi(t,e,s){const i=t.canvas,a=new MutationObserver((t=>{let e=!1;for(const s of t)e=e||ji(s.addedNodes,i),e=e&&!ji(s.removedNodes,i);e&&s()}));return a.observe(document,{childList:!0,subtree:!0}),a}function Oi(t,e,s){const i=t.canvas,a=new MutationObserver((t=>{let e=!1;for(const s of t)e=e||ji(s.removedNodes,i),e=e&&!ji(s.addedNodes,i);e&&s()}));return a.observe(document,{childList:!0,subtree:!0}),a}const Ai=new Map;let Ci=0;function Ei(){const t=window.devicePixelRatio;t!==Ci&&(Ci=t,Ai.forEach(((e,s)=>{s.currentDevicePixelRatio!==t&&e()})))}function Wi(t,e,s){const i=t.canvas,a=i&&Qe(i);if(!a)return;const n=M(((t,e)=>{const i=a.clientWidth;s(t,e),i<a.clientWidth&&s()}),window),r=new ResizeObserver((t=>{const e=t[0],s=e.contentRect.width,i=e.contentRect.height;0===s&&0===i||n(s,i)}));return r.observe(a),function(t,e){Ai.size||window.addEventListener("resize",Ei),Ai.set(t,e)}(t,n),r}function Fi(t,e,s){s&&s.disconnect(),"resize"===e&&function(t){Ai.delete(t),Ai.size||window.removeEventListener("resize",Ei)}(t)}function zi(t,e,s){const i=t.canvas,a=M((e=>{null!==t.ctx&&s(function(t,e){const s=wi[t.type]||t.type,{x:i,y:a}=as(t,e);return{type:s,chart:e,native:t,x:void 0!==i?i:null,y:void 0!==a?a:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,s){t.addEventListener(e,s,Si)}(i,e,a),a}class Ri extends vi{acquireContext(t,e){const s=t&&t.getContext&&t.getContext("2d");return s&&s.canvas===t?(function(t,e){const s=t.style,i=t.getAttribute("height"),a=t.getAttribute("width");if(t.$chartjs={initial:{height:i,width:a,style:{display:s.display,height:s.height,width:s.width}}},s.display=s.display||"block",s.boxSizing=s.boxSizing||"border-box",Ti(a)){const e=ds(t,"width");void 0!==e&&(t.width=e)}if(Ti(i))if(""===t.style.height)t.height=t.width/(e||2);else{const e=ds(t,"height");void 0!==e&&(t.height=e)}}(t,e),s):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const s=e.$chartjs.initial;["height","width"].forEach((t=>{const i=s[t];b(i)?e.removeAttribute(t):e.setAttribute(t,i)}));const i=s.style||{};return Object.keys(i).forEach((t=>{e.style[t]=i[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,s){this.removeEventListener(t,e);const i=t.$proxies||(t.$proxies={}),a={attach:Pi,detach:Oi,resize:Wi}[e]||zi;i[e]=a(t,e,s)}removeEventListener(t,e){const s=t.$proxies||(t.$proxies={}),i=s[e];i&&(({attach:Fi,detach:Fi,resize:Fi}[e]||Hi)(t,e,i),s[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,s,i){return function(t,e,s,i){const a=es(t),n=is(a,"margin"),r=ts(a.maxWidth,t,"clientWidth")||U,o=ts(a.maxHeight,t,"clientHeight")||U,d=function(t,e,s){let i,a;if(void 0===e||void 0===s){const n=Qe(t);if(n){const t=n.getBoundingClientRect(),r=es(n),o=is(r,"border","width"),d=is(r,"padding");e=t.width-d.width-o.width,s=t.height-d.height-o.height,i=ts(r.maxWidth,n,"clientWidth"),a=ts(r.maxHeight,n,"clientHeight")}else e=t.clientWidth,s=t.clientHeight}return{width:e,height:s,maxWidth:i||U,maxHeight:a||U}}(t,e,s);let{width:l,height:_}=d;if("content-box"===a.boxSizing){const t=is(a,"border","width"),e=is(a,"padding");l-=e.width+t.width,_-=e.height+t.height}return l=Math.max(0,l-n.width),_=Math.max(0,i?Math.floor(l/i):_-n.height),l=ns(Math.min(l,r,d.maxWidth)),_=ns(Math.min(_,o,d.maxHeight)),l&&!_&&(_=ns(l/2)),{width:l,height:_}}(t,e,s,i)}isAttached(t){const e=Qe(t);return!(!e||!e.isConnected)}}class Ii{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:s}=this.getProps(["x","y"],t);return{x:e,y:s}}hasValue(){return et(this.x)&&et(this.y)}getProps(t,e){const s=this.$animations;if(!e||!s)return this;const i={};return t.forEach((t=>{i[t]=s[t]&&s[t].active()?s[t]._to:this[t]})),i}}Ii.defaults={},Ii.defaultRoutes=void 0;const Ni={values:t=>k(t)?t:""+t,numeric(t,e,s){if(0===t)return"0";const i=this.chart.options.locale;let a,n=t;if(s.length>1){const e=Math.max(Math.abs(s[0].value),Math.abs(s[s.length-1].value));(e<1e-4||e>1e15)&&(a="scientific"),n=function(t,e){let s=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(s)>=1&&t!==Math.floor(t)&&(s=t-Math.floor(t)),s}(t,s)}const r=X(Math.abs(n)),o=Math.max(Math.min(-1*Math.floor(r),20),0),d={notation:a,minimumFractionDigits:o,maximumFractionDigits:o};return Object.assign(d,this.options.ticks.format),cs(t,i,d)},logarithmic(t,e,s){if(0===t)return"0";const i=t/Math.pow(10,Math.floor(X(t)));return 1===i||2===i||5===i?Ni.numeric.call(this,t,e,s):""}};var Vi={formatters:Ni};function Bi(t,e,s,i,a){const n=w(i,0),r=Math.min(w(a,t.length),t.length);let o,d,l,_=0;for(s=Math.ceil(s),a&&(o=a-i,s=o/Math.floor(o/s)),l=n;l<0;)_++,l=Math.round(n+_*s);for(d=Math.max(n,0);d<r;d++)d===l&&(e.push(t[d]),_++,l=Math.round(n+_*s))}se.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Vi.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),se.route("scale.ticks","color","","color"),se.route("scale.grid","color","","borderColor"),se.route("scale.grid","borderColor","","borderColor"),se.route("scale.title","color","","color"),se.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),se.describe("scales",{_fallback:"scale"}),se.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const Ji=(t,e,s)=>"top"===e||"left"===e?t[e]+s:t[e]-s;function $i(t,e){const s=[],i=t.length/e,a=t.length;let n=0;for(;n<a;n+=i)s.push(t[Math.floor(n)]);return s}function Ui(t,e,s){const i=t.ticks.length,a=Math.min(e,i-1),n=t._startPixel,r=t._endPixel,o=1e-6;let d,l=t.getPixelForTick(a);if(!(s&&(d=1===i?Math.max(l-n,r-l):0===e?(t.getPixelForTick(1)-l)/2:(l-t.getPixelForTick(a-1))/2,l+=a<e?d:-d,l<n-o||l>r+o)))return l}function Gi(t){return t.drawTicks?t.tickLength:0}function qi(t,e){if(!t.display)return 0;const s=ke(t.font,e),i=be(t.padding);return(k(t.text)?t.text.length:1)*s.lineHeight+i.height}function Ki(t,e,s){let i=g(t);return(s&&"right"!==e||!s&&"right"===e)&&(i=(t=>"left"===t?"right":"right"===t?"left":t)(i)),i}class Zi extends Ii{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:s,_suggestedMax:i}=this;return t=x(t,Number.POSITIVE_INFINITY),e=x(e,Number.NEGATIVE_INFINITY),s=x(s,Number.POSITIVE_INFINITY),i=x(i,Number.NEGATIVE_INFINITY),{min:x(t,s),max:x(e,i),minDefined:v(t),maxDefined:v(e)}}getMinMax(t){let e,{min:s,max:i,minDefined:a,maxDefined:n}=this.getUserBounds();if(a&&n)return{min:s,max:i};const r=this.getMatchingVisibleMetas();for(let o=0,d=r.length;o<d;++o)e=r[o].controller.getMinMax(this,t),a||(s=Math.min(s,e.min)),n||(i=Math.max(i,e.max));return s=n&&s>i?i:s,i=a&&s>i?s:i,{min:x(s,x(i,s)),max:x(i,x(s,i))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){S(this.options.beforeUpdate,[this])}update(t,e,s){const{beginAtZero:i,grace:a,ticks:n}=this.options,r=n.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=s=Object.assign({left:0,right:0,top:0,bottom:0},s),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+s.left+s.right:this.height+s.top+s.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,s){const{min:i,max:a}=t,n=T(e,(a-i)/2),r=(t,e)=>s&&0===t?0:t+e;return{min:r(i,-Math.abs(n)),max:r(a,n)}}(this,a,i),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const o=r<this.ticks.length;this._convertTicksToLabels(o?$i(this.ticks,r):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),n.display&&(n.autoSkip||"auto"===n.source)&&(this.ticks=function(t,e){const s=t.options.ticks,i=s.maxTicksLimit||function(t){const e=t.options.offset,s=t._tickSize(),i=t._length/s+(e?0:1),a=t._maxLength/s;return Math.floor(Math.min(i,a))}(t),a=s.major.enabled?function(t){const e=[];let s,i;for(s=0,i=t.length;s<i;s++)t[s].major&&e.push(s);return e}(e):[],n=a.length,r=a[0],o=a[n-1],d=[];if(n>i)return function(t,e,s,i){let a,n=0,r=s[0];for(i=Math.ceil(i),a=0;a<t.length;a++)a===r&&(e.push(t[a]),n++,r=s[n*i])}(e,d,a,n/i),d;const l=function(t,e,s){const i=function(t){const e=t.length;let s,i;if(e<2)return!1;for(i=t[0],s=1;s<e;++s)if(t[s]-t[s-1]!==i)return!1;return i}(t),a=e.length/s;if(!i)return Math.max(a,1);const n=function(t){const e=[],s=Math.sqrt(t);let i;for(i=1;i<s;i++)t%i==0&&(e.push(i),e.push(t/i));return s===(0|s)&&e.push(s),e.sort(((t,e)=>t-e)).pop(),e}(i);for(let t=0,e=n.length-1;t<e;t++){const e=n[t];if(e>a)return e}return Math.max(a,1)}(a,e,i);if(n>0){let t,s;const i=n>1?Math.round((o-r)/(n-1)):null;for(Bi(e,d,l,b(i)?0:r-i,r),t=0,s=n-1;t<s;t++)Bi(e,d,l,a[t],a[t+1]);return Bi(e,d,l,o,b(i)?e.length:o+i),d}return Bi(e,d,l),d}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),o&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,s=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,s=!s),this._startPixel=t,this._endPixel=e,this._reversePixels=s,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){S(this.options.afterUpdate,[this])}beforeSetDimensions(){S(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){S(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),S(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){S(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let s,i,a;for(s=0,i=t.length;s<i;s++)a=t[s],a.label=S(e.callback,[a.value,s,t],this)}afterTickToLabelConversion(){S(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){S(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,s=this.ticks.length,i=e.minRotation||0,a=e.maxRotation;let n,r,o,d=i;if(!this._isVisible()||!e.display||i>=a||s<=1||!this.isHorizontal())return void(this.labelRotation=i);const l=this._getLabelSizes(),_=l.widest.width,h=l.highest.height,u=ut(this.chart.width-_,0,this.maxWidth);n=t.offset?this.maxWidth/s:u/(s-1),_+6>n&&(n=u/(s-(t.offset?.5:1)),r=this.maxHeight-Gi(t.grid)-e.padding-qi(t.title,this.chart.options.font),o=Math.sqrt(_*_+h*h),d=nt(Math.min(Math.asin(ut((l.highest.height+6)/n,-1,1)),Math.asin(ut(r/o,-1,1))-Math.asin(ut(h/o,-1,1)))),d=Math.max(i,Math.min(a,d))),this.labelRotation=d}afterCalculateLabelRotation(){S(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){S(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:s,title:i,grid:a}}=this,n=this._isVisible(),r=this.isHorizontal();if(n){const n=qi(i,e.options.font);if(r?(t.width=this.maxWidth,t.height=Gi(a)+n):(t.height=this.maxHeight,t.width=Gi(a)+n),s.display&&this.ticks.length){const{first:e,last:i,widest:a,highest:n}=this._getLabelSizes(),o=2*s.padding,d=at(this.labelRotation),l=Math.cos(d),_=Math.sin(d);if(r){const e=s.mirror?0:_*a.width+l*n.height;t.height=Math.min(this.maxHeight,t.height+e+o)}else{const e=s.mirror?0:l*a.width+_*n.height;t.width=Math.min(this.maxWidth,t.width+e+o)}this._calculatePadding(e,i,_,l)}}this._handleMargins(),r?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,s,i){const{ticks:{align:a,padding:n},position:r}=this.options,o=0!==this.labelRotation,d="top"!==r&&"x"===this.axis;if(this.isHorizontal()){const r=this.getPixelForTick(0)-this.left,l=this.right-this.getPixelForTick(this.ticks.length-1);let _=0,h=0;o?d?(_=i*t.width,h=s*e.height):(_=s*t.height,h=i*e.width):"start"===a?h=e.width:"end"===a?_=t.width:"inner"!==a&&(_=t.width/2,h=e.width/2),this.paddingLeft=Math.max((_-r+n)*this.width/(this.width-r),0),this.paddingRight=Math.max((h-l+n)*this.width/(this.width-l),0)}else{let s=e.height/2,i=t.height/2;"start"===a?(s=0,i=t.height):"end"===a&&(s=e.height,i=0),this.paddingTop=s+n,this.paddingBottom=i+n}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){S(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,s;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,s=t.length;e<s;e++)b(t[e].label)&&(t.splice(e,1),s--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let s=this.ticks;e<s.length&&(s=$i(s,e)),this._labelSizes=t=this._computeLabelSizes(s,s.length)}return t}_computeLabelSizes(t,e){const{ctx:s,_longestTextCache:i}=this,a=[],n=[];let r,o,d,l,_,h,u,c,m,f,p,M=0,g=0;for(r=0;r<e;++r){if(l=t[r].label,_=this._resolveTickFontOptions(r),s.font=h=_.string,u=i[h]=i[h]||{data:{},gc:[]},c=_.lineHeight,m=f=0,b(l)||k(l)){if(k(l))for(o=0,d=l.length;o<d;++o)p=l[o],b(p)||k(p)||(m=ie(s,u.data,u.gc,m,p),f+=c)}else m=ie(s,u.data,u.gc,m,l),f=c;a.push(m),n.push(f),M=Math.max(m,M),g=Math.max(f,g)}!function(t,e){H(t,(t=>{const s=t.gc,i=s.length/2;let a;if(i>e){for(a=0;a<i;++a)delete t.data[s[a]];s.splice(0,i)}}))}(i,e);const y=a.indexOf(M),L=n.indexOf(g),Y=t=>({width:a[t]||0,height:n[t]||0});return{first:Y(0),last:Y(e-1),widest:Y(y),highest:Y(L),widths:a,heights:n}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return ut(this._alignToPixels?ne(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const s=e[t];return s.$context||(s.$context=function(t,e,s){return ve(t,{tick:s,index:e,type:"tick"})}(this.getContext(),t,s))}return this.$context||(this.$context=ve(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=at(this.labelRotation),s=Math.abs(Math.cos(e)),i=Math.abs(Math.sin(e)),a=this._getLabelSizes(),n=t.autoSkipPadding||0,r=a?a.widest.width+n:0,o=a?a.highest.height+n:0;return this.isHorizontal()?o*s>r*i?r/s:o/i:o*i<r*s?o/s:r/i}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,s=this.chart,i=this.options,{grid:a,position:n}=i,r=a.offset,o=this.isHorizontal(),d=this.ticks.length+(r?1:0),l=Gi(a),_=[],h=a.setContext(this.getContext()),u=h.drawBorder?h.borderWidth:0,c=u/2,m=function(t){return ne(s,t,u)};let f,p,M,g,y,L,Y,b,k,v,x,T;if("top"===n)f=m(this.bottom),L=this.bottom-l,b=f-c,v=m(t.top)+c,T=t.bottom;else if("bottom"===n)f=m(this.top),v=t.top,T=m(t.bottom)-c,L=f+c,b=this.top+l;else if("left"===n)f=m(this.right),y=this.right-l,Y=f-c,k=m(t.left)+c,x=t.right;else if("right"===n)f=m(this.left),k=t.left,x=m(t.right)-c,y=f+c,Y=this.left+l;else if("x"===e){if("center"===n)f=m((t.top+t.bottom)/2+.5);else if(D(n)){const t=Object.keys(n)[0],e=n[t];f=m(this.chart.scales[t].getPixelForValue(e))}v=t.top,T=t.bottom,L=f+c,b=L+l}else if("y"===e){if("center"===n)f=m((t.left+t.right)/2);else if(D(n)){const t=Object.keys(n)[0],e=n[t];f=m(this.chart.scales[t].getPixelForValue(e))}y=f-c,Y=y-l,k=t.left,x=t.right}const S=w(i.ticks.maxTicksLimit,d),H=Math.max(1,Math.ceil(d/S));for(p=0;p<d;p+=H){const t=a.setContext(this.getContext(p)),e=t.lineWidth,i=t.color,n=a.borderDash||[],d=t.borderDashOffset,l=t.tickWidth,h=t.tickColor,u=t.tickBorderDash||[],c=t.tickBorderDashOffset;M=Ui(this,p,r),void 0!==M&&(g=ne(s,M,e),o?y=Y=k=x=g:L=b=v=T=g,_.push({tx1:y,ty1:L,tx2:Y,ty2:b,x1:k,y1:v,x2:x,y2:T,width:e,color:i,borderDash:n,borderDashOffset:d,tickWidth:l,tickColor:h,tickBorderDash:u,tickBorderDashOffset:c}))}return this._ticksLength=d,this._borderValue=f,_}_computeLabelItems(t){const e=this.axis,s=this.options,{position:i,ticks:a}=s,n=this.isHorizontal(),r=this.ticks,{align:o,crossAlign:d,padding:l,mirror:_}=a,h=Gi(s.grid),u=h+l,c=_?-l:u,m=-at(this.labelRotation),f=[];let p,M,g,y,L,Y,b,v,x,w,T,S,H="middle";if("top"===i)Y=this.bottom-c,b=this._getXAxisLabelAlignment();else if("bottom"===i)Y=this.top+c,b=this._getXAxisLabelAlignment();else if("left"===i){const t=this._getYAxisLabelAlignment(h);b=t.textAlign,L=t.x}else if("right"===i){const t=this._getYAxisLabelAlignment(h);b=t.textAlign,L=t.x}else if("x"===e){if("center"===i)Y=(t.top+t.bottom)/2+u;else if(D(i)){const t=Object.keys(i)[0],e=i[t];Y=this.chart.scales[t].getPixelForValue(e)+u}b=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===i)L=(t.left+t.right)/2-u;else if(D(i)){const t=Object.keys(i)[0],e=i[t];L=this.chart.scales[t].getPixelForValue(e)}b=this._getYAxisLabelAlignment(h).textAlign}"y"===e&&("start"===o?H="top":"end"===o&&(H="bottom"));const j=this._getLabelSizes();for(p=0,M=r.length;p<M;++p){g=r[p],y=g.label;const t=a.setContext(this.getContext(p));v=this.getPixelForTick(p)+a.labelOffset,x=this._resolveTickFontOptions(p),w=x.lineHeight,T=k(y)?y.length:1;const e=T/2,s=t.color,o=t.textStrokeColor,l=t.textStrokeWidth;let h,u=b;if(n?(L=v,"inner"===b&&(u=p===M-1?this.options.reverse?"left":"right":0===p?this.options.reverse?"right":"left":"center"),S="top"===i?"near"===d||0!==m?-T*w+w/2:"center"===d?-j.highest.height/2-e*w+w:-j.highest.height+w/2:"near"===d||0!==m?w/2:"center"===d?j.highest.height/2-e*w:j.highest.height-T*w,_&&(S*=-1)):(Y=v,S=(1-T)*w/2),t.showLabelBackdrop){const e=be(t.backdropPadding),s=j.heights[p],i=j.widths[p];let a=Y+S-e.top,n=L-e.left;switch(H){case"middle":a-=s/2;break;case"bottom":a-=s}switch(b){case"center":n-=i/2;break;case"right":n-=i}h={left:n,top:a,width:i+e.width,height:s+e.height,color:t.backdropColor}}f.push({rotation:m,label:y,font:x,color:s,strokeColor:o,strokeWidth:l,textOffset:S,textAlign:u,textBaseline:H,translation:[L,Y],backdrop:h})}return f}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-at(this.labelRotation))return"top"===t?"left":"right";let s="center";return"start"===e.align?s="left":"end"===e.align?s="right":"inner"===e.align&&(s="inner"),s}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:s,mirror:i,padding:a}}=this.options,n=t+a,r=this._getLabelSizes().widest.width;let o,d;return"left"===e?i?(d=this.right+a,"near"===s?o="left":"center"===s?(o="center",d+=r/2):(o="right",d+=r)):(d=this.right-n,"near"===s?o="right":"center"===s?(o="center",d-=r/2):(o="left",d=this.left)):"right"===e?i?(d=this.left+a,"near"===s?o="right":"center"===s?(o="center",d-=r/2):(o="left",d-=r)):(d=this.left+n,"near"===s?o="left":"center"===s?(o="center",d+=r/2):(o="right",d=this.right)):o="right",{textAlign:o,x:d}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:s,top:i,width:a,height:n}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(s,i,a,n),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const s=this.ticks.findIndex((e=>e.value===t));return s>=0?e.setContext(this.getContext(s)).lineWidth:0}drawGrid(t){const e=this.options.grid,s=this.ctx,i=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let a,n;const r=(t,e,i)=>{i.width&&i.color&&(s.save(),s.lineWidth=i.width,s.strokeStyle=i.color,s.setLineDash(i.borderDash||[]),s.lineDashOffset=i.borderDashOffset,s.beginPath(),s.moveTo(t.x,t.y),s.lineTo(e.x,e.y),s.stroke(),s.restore())};if(e.display)for(a=0,n=i.length;a<n;++a){const t=i[a];e.drawOnChartArea&&r({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&r({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:s}}=this,i=s.setContext(this.getContext()),a=s.drawBorder?i.borderWidth:0;if(!a)return;const n=s.setContext(this.getContext(0)).lineWidth,r=this._borderValue;let o,d,l,_;this.isHorizontal()?(o=ne(t,this.left,a)-a/2,d=ne(t,this.right,n)+n/2,l=_=r):(l=ne(t,this.top,a)-a/2,_=ne(t,this.bottom,n)+n/2,o=d=r),e.save(),e.lineWidth=i.borderWidth,e.strokeStyle=i.borderColor,e.beginPath(),e.moveTo(o,l),e.lineTo(d,_),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,s=this._computeLabelArea();s&&le(e,s);const i=this._labelItems||(this._labelItems=this._computeLabelItems(t));let a,n;for(a=0,n=i.length;a<n;++a){const t=i[a],s=t.font,n=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),ce(e,n,0,t.textOffset,s,t)}s&&_e(e)}drawTitle(){const{ctx:t,options:{position:e,title:s,reverse:i}}=this;if(!s.display)return;const a=ke(s.font),n=be(s.padding),r=s.align;let o=a.lineHeight/2;"bottom"===e||"center"===e||D(e)?(o+=n.bottom,k(s.text)&&(o+=a.lineHeight*(s.text.length-1))):o+=n.top;const{titleX:d,titleY:l,maxWidth:_,rotation:h}=function(t,e,s,i){const{top:a,left:n,bottom:r,right:o,chart:d}=t,{chartArea:l,scales:_}=d;let h,u,c,m=0;const f=r-a,p=o-n;if(t.isHorizontal()){if(u=y(i,n,o),D(s)){const t=Object.keys(s)[0],i=s[t];c=_[t].getPixelForValue(i)+f-e}else c="center"===s?(l.bottom+l.top)/2+f-e:Ji(t,s,e);h=o-n}else{if(D(s)){const t=Object.keys(s)[0],i=s[t];u=_[t].getPixelForValue(i)-p+e}else u="center"===s?(l.left+l.right)/2-p+e:Ji(t,s,e);c=y(i,r,a),m="left"===s?-q:q}return{titleX:u,titleY:c,maxWidth:h,rotation:m}}(this,o,e,r);ce(t,s.text,0,0,a,{color:s.color,maxWidth:_,rotation:h,textAlign:Ki(r,e,i),textBaseline:"middle",translation:[d,l]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,s=w(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===Zi.prototype.draw?[{z:s,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:s+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),s=this.axis+"AxisID",i=[];let a,n;for(a=0,n=e.length;a<n;++a){const n=e[a];n[s]!==this.id||t&&n.type!==t||i.push(n)}return i}_resolveTickFontOptions(t){return ke(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class Xi{constructor(t,e,s){this.type=t,this.scope=e,this.override=s,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let s;(function(t){return"id"in t&&"defaults"in t})(e)&&(s=this.register(e));const i=this.items,a=t.id,n=this.scope+"."+a;if(!a)throw new Error("class does not have id: "+t);return a in i||(i[a]=t,function(t,e,s){const i=C(Object.create(null),[s?se.get(s):{},se.get(e),t.defaults]);se.set(e,i),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((s=>{const i=s.split("."),a=i.pop(),n=[t].concat(i).join("."),r=e[s].split("."),o=r.pop(),d=r.join(".");se.route(n,a,d,o)}))}(e,t.defaultRoutes),t.descriptors&&se.describe(e,t.descriptors)}(t,n,s),this.override&&se.override(t.id,t.overrides)),n}get(t){return this.items[t]}unregister(t){const e=this.items,s=t.id,i=this.scope;s in e&&delete e[s],i&&s in se[i]&&(delete se[i][s],this.override&&delete Xt[s])}}var Qi=new class{constructor(){this.controllers=new Xi(Rs,"datasets",!0),this.elements=new Xi(Ii,"elements"),this.plugins=new Xi(Object,"plugins"),this.scales=new Xi(Zi,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,s){[...e].forEach((e=>{const i=s||this._getRegistryForType(e);s||i.isForType(e)||i===this.plugins&&e.id?this._exec(t,i,e):H(e,(e=>{const i=s||this._getRegistryForType(e);this._exec(t,i,e)}))}))}_exec(t,e,s){const i=R(t);S(s["before"+i],[],s),e[t](s),S(s["after"+i],[],s)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const s=this._typedRegistries[e];if(s.isForType(t))return s}return this.plugins}_get(t,e,s){const i=e.get(t);if(void 0===i)throw new Error('"'+t+'" is not a registered '+s+".");return i}};class ta{constructor(){this._init=[]}notify(t,e,s,i){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const a=i?this._descriptors(t).filter(i):this._descriptors(t),n=this._notify(a,t,e,s);return"afterDestroy"===e&&(this._notify(a,t,"stop"),this._notify(this._init,t,"uninstall")),n}_notify(t,e,s,i){i=i||{};for(const a of t){const t=a.plugin;if(!1===S(t[s],[e,i,a.options],t)&&i.cancelable)return!1}return!0}invalidate(){b(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const s=t&&t.config,i=w(s.options&&s.options.plugins,{}),a=function(t){const e=[],s=Object.keys(Qi.plugins.items);for(let t=0;t<s.length;t++)e.push(Qi.getPlugin(s[t]));const i=t.plugins||[];for(let t=0;t<i.length;t++){const s=i[t];-1===e.indexOf(s)&&e.push(s)}return e}(s);return!1!==i||e?function(t,e,s,i){const a=[],n=t.getContext();for(let r=0;r<e.length;r++){const o=e[r],d=ea(s[o.id],i);null!==d&&a.push({plugin:o,options:sa(t.config,o,d,n)})}return a}(t,a,i,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],s=this._cache,i=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(i(e,s),t,"stop"),this._notify(i(s,e),t,"start")}}function ea(t,e){return e||!1!==t?!0===t?{}:t:null}function sa(t,e,s,i){const a=t.pluginScopeKeys(e),n=t.getOptionScopes(s,a);return t.createResolver(n,i,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function ia(t,e){const s=se.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||s.indexAxis||"x"}function aa(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(s=e.position)||"bottom"===s?"x":"left"===s||"right"===s?"y":void 0)||t.charAt(0).toLowerCase();var s}function na(t){const e=t.options||(t.options={});e.plugins=w(e.plugins,{}),e.scales=function(t,e){const s=Xt[t.type]||{scales:{}},i=e.scales||{},a=ia(t.type,e),n=Object.create(null),r=Object.create(null);return Object.keys(i).forEach((t=>{const e=i[t];if(!D(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const o=aa(t,e),d=function(t,e){return t===e?"_index_":"_value_"}(o,a),l=s.scales||{};n[o]=n[o]||t,r[t]=E(Object.create(null),[{axis:o},e,l[o],l[d]])})),t.data.datasets.forEach((s=>{const a=s.type||t.type,o=s.indexAxis||ia(a,e),d=(Xt[a]||{}).scales||{};Object.keys(d).forEach((t=>{const e=function(t,e){let s=t;return"_index_"===t?s=e:"_value_"===t&&(s="x"===e?"y":"x"),s}(t,o),a=s[e+"AxisID"]||n[e]||e;r[a]=r[a]||Object.create(null),E(r[a],[{axis:e},i[a],d[t]])}))})),Object.keys(r).forEach((t=>{const e=r[t];E(e,[se.scales[e.type],se.scale])})),r}(t,e)}function ra(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const oa=new Map,da=new Set;function la(t,e){let s=oa.get(t);return s||(s=e(),oa.set(t,s),da.add(s)),s}const _a=(t,e,s)=>{const i=z(e,s);void 0!==i&&t.add(i)};class ha{constructor(t){this._config=function(t){return(t=t||{}).data=ra(t.data),na(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=ra(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),na(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return la(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return la(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return la(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return la(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const s=this._scopeCache;let i=s.get(t);return i&&!e||(i=new Map,s.set(t,i)),i}getOptionScopes(t,e,s){const{options:i,type:a}=this,n=this._cachedScopes(t,s),r=n.get(e);if(r)return r;const o=new Set;e.forEach((e=>{t&&(o.add(t),e.forEach((e=>_a(o,t,e)))),e.forEach((t=>_a(o,i,t))),e.forEach((t=>_a(o,Xt[a]||{},t))),e.forEach((t=>_a(o,se,t))),e.forEach((t=>_a(o,Qt,t)))}));const d=Array.from(o);return 0===d.length&&d.push(Object.create(null)),da.has(e)&&n.set(e,d),d}chartOptionScopes(){const{options:t,type:e}=this;return[t,Xt[e]||{},se.datasets[e]||{},{type:e},se,Qt]}resolveNamedOptions(t,e,s,i=[""]){const a={$shared:!0},{resolver:n,subPrefixes:r}=ua(this._resolverCache,t,i);let o=n;(function(t,e){const{isScriptable:s,isIndexable:i}=Ae(t);for(const a of e){const e=s(a),n=i(a),r=(n||e)&&t[a];if(e&&(N(r)||ca(r))||n&&k(r))return!0}return!1})(n,e)&&(a.$shared=!1,o=Oe(n,s=N(s)?s():s,this.createResolver(t,s,r)));for(const t of e)a[t]=o[t];return a}createResolver(t,e,s=[""],i){const{resolver:a}=ua(this._resolverCache,t,s);return D(e)?Oe(a,e,void 0,i):a}}function ua(t,e,s){let i=t.get(e);i||(i=new Map,t.set(e,i));const a=s.join();let n=i.get(a);return n||(n={resolver:Pe(e,s),subPrefixes:s.filter((t=>!t.toLowerCase().includes("hover")))},i.set(a,n)),n}const ca=t=>D(t)&&Object.getOwnPropertyNames(t).reduce(((e,s)=>e||N(t[s])),!1),ma=["top","bottom","left","right","chartArea"];function fa(t,e){return"top"===t||"bottom"===t||-1===ma.indexOf(t)&&"x"===e}function pa(t,e){return function(s,i){return s[t]===i[t]?s[e]-i[e]:s[t]-i[t]}}function Ma(t){const e=t.chart,s=e.options.animation;e.notifyPlugins("afterRender"),S(s&&s.onComplete,[t],e)}function ga(t){const e=t.chart,s=e.options.animation;S(s&&s.onProgress,[t],e)}function ya(t){return Xe()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const La={},Ya=t=>{const e=ya(t);return Object.values(La).filter((t=>t.canvas===e)).pop()};function ba(t,e,s){const i=Object.keys(t);for(const a of i){const i=+a;if(i>=e){const n=t[a];delete t[a],(s>0||i>e)&&(t[i+s]=n)}}}class ka{constructor(t,e){const s=this.config=new ha(e),i=ya(t),a=Ya(i);if(a)throw new Error("Canvas is already in use. Chart with ID '"+a.id+"' must be destroyed before the canvas can be reused.");const n=s.createResolver(s.chartOptionScopes(),this.getContext());this.platform=new(s.platform||function(t){return!Xe()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?xi:Ri}(i)),this.platform.updateConfig(s);const r=this.platform.acquireContext(i,n.aspectRatio),o=r&&r.canvas,d=o&&o.height,l=o&&o.width;this.id=Y(),this.ctx=r,this.canvas=o,this.width=l,this.height=d,this._options=n,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new ta,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let s;return function(...i){return e?(clearTimeout(s),s=setTimeout(t,e,i)):t.apply(this,i),e}}((t=>this.update(t)),n.resizeDelay||0),this._dataChanges=[],La[this.id]=this,r&&o?(ks.listen(this,"complete",Ma),ks.listen(this,"progress",ga),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:s,height:i,_aspectRatio:a}=this;return b(t)?e&&a?a:i?s/i:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():rs(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return re(this.canvas,this.ctx),this}stop(){return ks.stop(this),this}resize(t,e){ks.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const s=this.options,i=this.canvas,a=s.maintainAspectRatio&&this.aspectRatio,n=this.platform.getMaximumSize(i,t,e,a),r=s.devicePixelRatio||this.platform.getDevicePixelRatio(),o=this.width?"resize":"attach";this.width=n.width,this.height=n.height,this._aspectRatio=this.aspectRatio,rs(this,r,!0)&&(this.notifyPlugins("resize",{size:n}),S(s.onResize,[this,n],this),this.attached&&this._doResize(o)&&this.render())}ensureScalesHaveIDs(){H(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,s=this.scales,i=Object.keys(s).reduce(((t,e)=>(t[e]=!1,t)),{});let a=[];e&&(a=a.concat(Object.keys(e).map((t=>{const s=e[t],i=aa(t,s),a="r"===i,n="x"===i;return{options:s,dposition:a?"chartArea":n?"bottom":"left",dtype:a?"radialLinear":n?"category":"linear"}})))),H(a,(e=>{const a=e.options,n=a.id,r=aa(n,a),o=w(a.type,e.dtype);void 0!==a.position&&fa(a.position,r)===fa(e.dposition)||(a.position=e.dposition),i[n]=!0;let d=null;n in s&&s[n].type===o?d=s[n]:(d=new(Qi.getScale(o))({id:n,type:o,ctx:this.ctx,chart:this}),s[d.id]=d),d.init(a,t)})),H(i,((t,e)=>{t||delete s[e]})),H(s,(t=>{Di.configure(this,t,t.options),Di.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,s=t.length;if(t.sort(((t,e)=>t.index-e.index)),s>e){for(let t=e;t<s;++t)this._destroyDatasetMeta(t);t.splice(e,s-e)}this._sortedMetasets=t.slice(0).sort(pa("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,s)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(s)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let s,i;for(this._removeUnreferencedMetasets(),s=0,i=e.length;s<i;s++){const i=e[s];let a=this.getDatasetMeta(s);const n=i.type||this.config.type;if(a.type&&a.type!==n&&(this._destroyDatasetMeta(s),a=this.getDatasetMeta(s)),a.type=n,a.indexAxis=i.indexAxis||ia(n,this.options),a.order=i.order||0,a.index=s,a.label=""+i.label,a.visible=this.isDatasetVisible(s),a.controller)a.controller.updateIndex(s),a.controller.linkScales();else{const e=Qi.getController(n),{datasetElementType:i,dataElementType:r}=se.datasets[n];Object.assign(e.prototype,{dataElementType:Qi.getElement(r),datasetElementType:i&&Qi.getElement(i)}),a.controller=new e(this,s),t.push(a.controller)}}return this._updateMetasets(),t}_resetElements(){H(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const s=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),i=this._animationsDisabled=!s.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const a=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let n=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),s=!i&&-1===a.indexOf(e);e.buildOrUpdateElements(s),n=Math.max(+e.getMaxOverflow(),n)}n=this._minPadding=s.layout.autoPadding?n:0,this._updateLayout(n),i||H(a,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(pa("z","_idx"));const{_active:r,_lastEvent:o}=this;o?this._eventHandler(o,!0):r.length&&this._updateHoverStyles(r,r,!0),this.render()}_updateScales(){H(this.scales,(t=>{Di.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),s=new Set(t.events);V(e,s)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:s,start:i,count:a}of e)ba(t,i,"_removeElements"===s?-a:a)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,s=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),i=s(0);for(let t=1;t<e;t++)if(!V(i,s(t)))return;return Array.from(i).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Di.update(this,this.width,this.height,t);const e=this.chartArea,s=e.width<=0||e.height<=0;this._layers=[],H(this.boxes,(t=>{s&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,s=this.data.datasets.length;e<s;++e)this._updateDataset(e,N(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const s=this.getDatasetMeta(t),i={meta:s,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",i)&&(s.controller._update(e),i.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",i))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(ks.has(this)?this.attached&&!ks.running(this)&&ks.start(this):(this.draw(),Ma({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,s=[];let i,a;for(i=0,a=e.length;i<a;++i){const a=e[i];t&&!a.visible||s.push(a)}return s}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,s=t._clip,i=!s.disabled,a=this.chartArea,n={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",n)&&(i&&le(e,{left:!1===s.left?0:a.left-s.left,right:!1===s.right?this.width:a.right+s.right,top:!1===s.top?0:a.top-s.top,bottom:!1===s.bottom?this.height:a.bottom+s.bottom}),t.controller.draw(),i&&_e(e),n.cancelable=!1,this.notifyPlugins("afterDatasetDraw",n))}isPointInArea(t){return de(t,this.chartArea,this._minPadding)}getElementsAtEventForMode(t,e,s,i){const a=ui.modes[e];return"function"==typeof a?a(this,t,s,i):[]}getDatasetMeta(t){const e=this.data.datasets[t],s=this._metasets;let i=s.filter((t=>t&&t._dataset===e)).pop();return i||(i={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},s.push(i)),i}getContext(){return this.$context||(this.$context=ve(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const s=this.getDatasetMeta(t);return"boolean"==typeof s.hidden?!s.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,s){const i=s?"show":"hide",a=this.getDatasetMeta(t),n=a.controller._resolveAnimations(void 0,i);I(e)?(a.data[e].hidden=!s,this.update()):(this.setDatasetVisibility(t,s),n.update(a,{visible:s}),this.update((e=>e.datasetIndex===t?i:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),ks.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),re(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete La[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,s=(s,i)=>{e.addEventListener(this,s,i),t[s]=i},i=(t,e,s)=>{t.offsetX=e,t.offsetY=s,this._eventHandler(t)};H(this.options.events,(t=>s(t,i)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,s=(s,i)=>{e.addEventListener(this,s,i),t[s]=i},i=(s,i)=>{t[s]&&(e.removeEventListener(this,s,i),delete t[s])},a=(t,e)=>{this.canvas&&this.resize(t,e)};let n;const r=()=>{i("attach",r),this.attached=!0,this.resize(),s("resize",a),s("detach",n)};n=()=>{this.attached=!1,i("resize",a),this._stop(),this._resize(0,0),s("attach",r)},e.isAttached(this.canvas)?r():n()}unbindEvents(){H(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},H(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,s){const i=s?"set":"remove";let a,n,r,o;for("dataset"===e&&(a=this.getDatasetMeta(t[0].datasetIndex),a.controller["_"+i+"DatasetHoverStyle"]()),r=0,o=t.length;r<o;++r){n=t[r];const e=n&&this.getDatasetMeta(n.datasetIndex).controller;e&&e[i+"HoverStyle"](n.element,n.datasetIndex,n.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],s=t.map((({datasetIndex:t,index:e})=>{const s=this.getDatasetMeta(t);if(!s)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:s.data[e],index:e}}));!j(s,e)&&(this._active=s,this._lastEvent=null,this._updateHoverStyles(s,e))}notifyPlugins(t,e,s){return this._plugins.notify(this,t,e,s)}_updateHoverStyles(t,e,s){const i=this.options.hover,a=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),n=a(e,t),r=s?t:a(t,e);n.length&&this.updateHoverStyle(n,i.mode,!1),r.length&&i.mode&&this.updateHoverStyle(r,i.mode,!0)}_eventHandler(t,e){const s={event:t,replay:e,cancelable:!0,inChartArea:this.isPointInArea(t)},i=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",s,i))return;const a=this._handleEvent(t,e,s.inChartArea);return s.cancelable=!1,this.notifyPlugins("afterEvent",s,i),(a||s.changed)&&this.render(),this}_handleEvent(t,e,s){const{_active:i=[],options:a}=this,n=e,r=this._getActiveElements(t,i,s,n),o=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),d=function(t,e,s,i){return s&&"mouseout"!==t.type?i?e:t:null}(t,this._lastEvent,s,o);s&&(this._lastEvent=null,S(a.onHover,[t,r,this],this),o&&S(a.onClick,[t,r,this],this));const l=!j(r,i);return(l||e)&&(this._active=r,this._updateHoverStyles(r,i,e)),this._lastEvent=d,l}_getActiveElements(t,e,s,i){if("mouseout"===t.type)return[];if(!s)return e;const a=this.options.hover;return this.getElementsAtEventForMode(t,a.mode,a,i)}}const Da=()=>H(ka.instances,(t=>t._plugins.invalidate())),va=!0;function xa(t,e,s){const{startAngle:i,pixelMargin:a,x:n,y:r,outerRadius:o,innerRadius:d}=e;let l=a/o;t.beginPath(),t.arc(n,r,o,i-l,s+l),d>a?(l=a/d,t.arc(n,r,d,s+l,i-l,!0)):t.arc(n,r,a,s+q,i-q),t.closePath(),t.clip()}function wa(t,e,s,i){return{x:s+t*Math.cos(e),y:i+t*Math.sin(e)}}function Ta(t,e,s,i,a){const{x:n,y:r,startAngle:o,pixelMargin:d,innerRadius:l}=e,_=Math.max(e.outerRadius+i+s-d,0),h=l>0?l+i+s+d:0;let u=0;const c=a-o;if(i){const t=((l>0?l-i:0)+(_>0?_-i:0))/2;u=(c-(0!==t?c*t/(t+i):c))/2}const m=(c-Math.max(.001,c*_-s/B)/_)/2,f=o+m+u,p=a-m-u,{outerStart:M,outerEnd:g,innerStart:y,innerEnd:L}=function(t,e,s,i){const a=ye(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),n=(s-e)/2,r=Math.min(n,i*e/2),o=t=>{const e=(s-Math.min(n,t))*i/2;return ut(t,0,Math.min(n,e))};return{outerStart:o(a.outerStart),outerEnd:o(a.outerEnd),innerStart:ut(a.innerStart,0,r),innerEnd:ut(a.innerEnd,0,r)}}(e,h,_,p-f),Y=_-M,b=_-g,k=f+M/Y,D=p-g/b,v=h+y,x=h+L,w=f+y/v,T=p-L/x;if(t.beginPath(),t.arc(n,r,_,k,D),g>0){const e=wa(b,D,n,r);t.arc(e.x,e.y,g,D,p+q)}const S=wa(x,p,n,r);if(t.lineTo(S.x,S.y),L>0){const e=wa(x,T,n,r);t.arc(e.x,e.y,L,p+q,T+Math.PI)}if(t.arc(n,r,h,p-L/h,f+y/h,!0),y>0){const e=wa(v,w,n,r);t.arc(e.x,e.y,y,w+Math.PI,f-q)}const H=wa(Y,f,n,r);if(t.lineTo(H.x,H.y),M>0){const e=wa(Y,k,n,r);t.arc(e.x,e.y,M,f-q,k)}t.closePath()}Object.defineProperties(ka,{defaults:{enumerable:va,value:se},instances:{enumerable:va,value:La},overrides:{enumerable:va,value:Xt},registry:{enumerable:va,value:Qi},version:{enumerable:va,value:"3.8.0"},getChart:{enumerable:va,value:Ya},register:{enumerable:va,value:(...t)=>{Qi.add(...t),Da()}},unregister:{enumerable:va,value:(...t)=>{Qi.remove(...t),Da()}}});class Sa extends Ii{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,s){const i=this.getProps(["x","y"],s),{angle:a,distance:n}=ot(i,{x:t,y:e}),{startAngle:r,endAngle:o,innerRadius:d,outerRadius:l,circumference:_}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],s),h=this.options.spacing/2,u=w(_,o-r)>=J||ht(a,r,o),c=ct(n,d+h,l+h);return u&&c}getCenterPoint(t){const{x:e,y:s,startAngle:i,endAngle:a,innerRadius:n,outerRadius:r}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:o,spacing:d}=this.options,l=(i+a)/2,_=(n+r+d+o)/2;return{x:e+Math.cos(l)*_,y:s+Math.sin(l)*_}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:s}=this,i=(e.offset||0)/2,a=(e.spacing||0)/2;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=s>J?Math.floor(s/J):0,0===s||this.innerRadius<0||this.outerRadius<0)return;t.save();let n=0;if(i){n=i/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*n,Math.sin(e)*n),this.circumference>=B&&(n=i)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const r=function(t,e,s,i){const{fullCircles:a,startAngle:n,circumference:r}=e;let o=e.endAngle;if(a){Ta(t,e,s,i,n+J);for(let e=0;e<a;++e)t.fill();isNaN(r)||(o=n+r%J,r%J==0&&(o+=J))}return Ta(t,e,s,i,o),t.fill(),o}(t,this,n,a);(function(t,e,s,i,a){const{options:n}=e,{borderWidth:r,borderJoinStyle:o}=n,d="inner"===n.borderAlign;r&&(d?(t.lineWidth=2*r,t.lineJoin=o||"round"):(t.lineWidth=r,t.lineJoin=o||"bevel"),e.fullCircles&&function(t,e,s){const{x:i,y:a,startAngle:n,pixelMargin:r,fullCircles:o}=e,d=Math.max(e.outerRadius-r,0),l=e.innerRadius+r;let _;for(s&&xa(t,e,n+J),t.beginPath(),t.arc(i,a,l,n+J,n,!0),_=0;_<o;++_)t.stroke();for(t.beginPath(),t.arc(i,a,d,n,n+J),_=0;_<o;++_)t.stroke()}(t,e,d),d&&xa(t,e,a),Ta(t,e,s,i,a),t.stroke())})(t,this,n,a,r),t.restore()}}function Ha(t,e,s=e){t.lineCap=w(s.borderCapStyle,e.borderCapStyle),t.setLineDash(w(s.borderDash,e.borderDash)),t.lineDashOffset=w(s.borderDashOffset,e.borderDashOffset),t.lineJoin=w(s.borderJoinStyle,e.borderJoinStyle),t.lineWidth=w(s.borderWidth,e.borderWidth),t.strokeStyle=w(s.borderColor,e.borderColor)}function ja(t,e,s){t.lineTo(s.x,s.y)}function Pa(t,e,s={}){const i=t.length,{start:a=0,end:n=i-1}=s,{start:r,end:o}=e,d=Math.max(a,r),l=Math.min(n,o),_=a<r&&n<r||a>o&&n>o;return{count:i,start:d,loop:e.loop,ilen:l<d&&!_?i+l-d:l-d}}function Oa(t,e,s,i){const{points:a,options:n}=e,{count:r,start:o,loop:d,ilen:l}=Pa(a,s,i),_=function(t){return t.stepped?he:t.tension||"monotone"===t.cubicInterpolationMode?ue:ja}(n);let h,u,c,{move:m=!0,reverse:f}=i||{};for(h=0;h<=l;++h)u=a[(o+(f?l-h:h))%r],u.skip||(m?(t.moveTo(u.x,u.y),m=!1):_(t,c,u,f,n.stepped),c=u);return d&&(u=a[(o+(f?l:0))%r],_(t,c,u,f,n.stepped)),!!d}function Aa(t,e,s,i){const a=e.points,{count:n,start:r,ilen:o}=Pa(a,s,i),{move:d=!0,reverse:l}=i||{};let _,h,u,c,m,f,p=0,M=0;const g=t=>(r+(l?o-t:t))%n,y=()=>{c!==m&&(t.lineTo(p,m),t.lineTo(p,c),t.lineTo(p,f))};for(d&&(h=a[g(0)],t.moveTo(h.x,h.y)),_=0;_<=o;++_){if(h=a[g(_)],h.skip)continue;const e=h.x,s=h.y,i=0|e;i===u?(s<c?c=s:s>m&&(m=s),p=(M*p+e)/++M):(y(),t.lineTo(e,s),u=i,M=0,c=m=s),f=s}y()}function Ca(t){const e=t.options,s=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||s?Oa:Aa}Sa.id="arc",Sa.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},Sa.defaultRoutes={backgroundColor:"backgroundColor"};const Ea="function"==typeof Path2D;class Wa extends Ii{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const s=this.options;if((s.tension||"monotone"===s.cubicInterpolationMode)&&!s.stepped&&!this._pointsUpdated){const i=s.spanGaps?this._loop:this._fullLoop;Ze(this._points,s,t,i,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const s=t.points,i=t.options.spanGaps,a=s.length;if(!a)return[];const n=!!t._loop,{start:r,end:o}=function(t,e,s,i){let a=0,n=e-1;if(s&&!i)for(;a<e&&!t[a].skip;)a++;for(;a<e&&t[a].skip;)a++;for(a%=e,s&&(n+=a);n>a&&t[n%e].skip;)n--;return n%=e,{start:a,end:n}}(s,a,n,i);return function(t,e,s,i){return i&&i.setContext&&s?function(t,e,s,i){const a=t._chart.getContext(),n=Ys(t.options),{_datasetIndex:r,options:{spanGaps:o}}=t,d=s.length,l=[];let _=n,h=e[0].start,u=h;function c(t,e,i,a){const n=o?-1:1;if(t!==e){for(t+=d;s[t%d].skip;)t-=n;for(;s[e%d].skip;)e+=n;t%d!=e%d&&(l.push({start:t%d,end:e%d,loop:i,style:a}),_=a,h=e%d)}}for(const t of e){h=o?h:t.start;let e,n=s[h%d];for(u=h+1;u<=t.end;u++){const o=s[u%d];e=Ys(i.setContext(ve(a,{type:"segment",p0:n,p1:o,p0DataIndex:(u-1)%d,p1DataIndex:u%d,datasetIndex:r}))),bs(e,_)&&c(h,u-1,t.loop,_),n=o,_=e}h<u-1&&c(h,u-1,t.loop,_)}return l}(t,e,s,i):e}(t,!0===i?[{start:r,end:o,loop:n}]:function(t,e,s,i){const a=t.length,n=[];let r,o=e,d=t[e];for(r=e+1;r<=s;++r){const s=t[r%a];s.skip||s.stop?d.skip||(i=!1,n.push({start:e%a,end:(r-1)%a,loop:i}),e=o=s.stop?r:null):(o=r,d.skip&&(e=r)),d=s}return null!==o&&n.push({start:e%a,end:o%a,loop:i}),n}(s,r,o<r?o+a:o,!!t._fullLoop&&0===r&&o===a-1),s,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,s=t.length;return s&&e[t[s-1].end]}interpolate(t,e){const s=this.options,i=t[e],a=this.points,n=Ls(this,{property:e,start:i,end:i});if(!n.length)return;const r=[],o=function(t){return t.stepped?_s:t.tension||"monotone"===t.cubicInterpolationMode?hs:ls}(s);let d,l;for(d=0,l=n.length;d<l;++d){const{start:l,end:_}=n[d],h=a[l],u=a[_];if(h===u){r.push(h);continue}const c=o(h,u,Math.abs((i-h[e])/(u[e]-h[e])),s.stepped);c[e]=t[e],r.push(c)}return 1===r.length?r[0]:r}pathSegment(t,e,s){return Ca(this)(t,this,e,s)}path(t,e,s){const i=this.segments,a=Ca(this);let n=this._loop;e=e||0,s=s||this.points.length-e;for(const r of i)n&=a(t,this,r,{start:e,end:e+s-1});return!!n}draw(t,e,s,i){const a=this.options||{};(this.points||[]).length&&a.borderWidth&&(t.save(),function(t,e,s,i){Ea&&!e.options.segment?function(t,e,s,i){let a=e._path;a||(a=e._path=new Path2D,e.path(a,s,i)&&a.closePath()),Ha(t,e.options),t.stroke(a)}(t,e,s,i):function(t,e,s,i){const{segments:a,options:n}=e,r=Ca(e);for(const o of a)Ha(t,n,o.style),t.beginPath(),r(t,e,o,{start:s,end:s+i-1})&&t.closePath(),t.stroke()}(t,e,s,i)}(t,this,s,i),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function Fa(t,e,s,i){const a=t.options,{[s]:n}=t.getProps([s],i);return Math.abs(e-n)<a.radius+a.hitRadius}Wa.id="line",Wa.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Wa.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Wa.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class za extends Ii{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,s){const i=this.options,{x:a,y:n}=this.getProps(["x","y"],s);return Math.pow(t-a,2)+Math.pow(e-n,2)<Math.pow(i.hitRadius+i.radius,2)}inXRange(t,e){return Fa(this,t,"x",e)}inYRange(t,e){return Fa(this,t,"y",e)}getCenterPoint(t){const{x:e,y:s}=this.getProps(["x","y"],t);return{x:e,y:s}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const s=this.options;this.skip||s.radius<.1||!de(this,e,this.size(s)/2)||(t.strokeStyle=s.borderColor,t.lineWidth=s.borderWidth,t.fillStyle=s.backgroundColor,oe(t,s,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Ra(t,e){const{x:s,y:i,base:a,width:n,height:r}=t.getProps(["x","y","base","width","height"],e);let o,d,l,_,h;return t.horizontal?(h=r/2,o=Math.min(s,a),d=Math.max(s,a),l=i-h,_=i+h):(h=n/2,o=s-h,d=s+h,l=Math.min(i,a),_=Math.max(i,a)),{left:o,top:l,right:d,bottom:_}}function Ia(t,e,s,i){return t?0:ut(e,s,i)}function Na(t,e,s,i){const a=null===e,n=null===s,r=t&&!(a&&n)&&Ra(t,i);return r&&(a||ct(e,r.left,r.right))&&(n||ct(s,r.top,r.bottom))}function Va(t,e){t.rect(e.x,e.y,e.w,e.h)}function Ba(t,e,s={}){const i=t.x!==s.x?-e:0,a=t.y!==s.y?-e:0,n=(t.x+t.w!==s.x+s.w?e:0)-i,r=(t.y+t.h!==s.y+s.h?e:0)-a;return{x:t.x+i,y:t.y+a,w:t.w+n,h:t.h+r,radius:t.radius}}za.id="point",za.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},za.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Ja extends Ii{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:s,backgroundColor:i}}=this,{inner:a,outer:n}=function(t){const e=Ra(t),s=e.right-e.left,i=e.bottom-e.top,a=function(t,e,s){const i=t.options.borderWidth,a=t.borderSkipped,n=Le(i);return{t:Ia(a.top,n.top,0,s),r:Ia(a.right,n.right,0,e),b:Ia(a.bottom,n.bottom,0,s),l:Ia(a.left,n.left,0,e)}}(t,s/2,i/2),n=function(t,e,s){const{enableBorderRadius:i}=t.getProps(["enableBorderRadius"]),a=t.options.borderRadius,n=Ye(a),r=Math.min(e,s),o=t.borderSkipped,d=i||D(a);return{topLeft:Ia(!d||o.top||o.left,n.topLeft,0,r),topRight:Ia(!d||o.top||o.right,n.topRight,0,r),bottomLeft:Ia(!d||o.bottom||o.left,n.bottomLeft,0,r),bottomRight:Ia(!d||o.bottom||o.right,n.bottomRight,0,r)}}(t,s/2,i/2);return{outer:{x:e.left,y:e.top,w:s,h:i,radius:n},inner:{x:e.left+a.l,y:e.top+a.t,w:s-a.l-a.r,h:i-a.t-a.b,radius:{topLeft:Math.max(0,n.topLeft-Math.max(a.t,a.l)),topRight:Math.max(0,n.topRight-Math.max(a.t,a.r)),bottomLeft:Math.max(0,n.bottomLeft-Math.max(a.b,a.l)),bottomRight:Math.max(0,n.bottomRight-Math.max(a.b,a.r))}}}}(this),r=(o=n.radius).topLeft||o.topRight||o.bottomLeft||o.bottomRight?fe:Va;var o;t.save(),n.w===a.w&&n.h===a.h||(t.beginPath(),r(t,Ba(n,e,a)),t.clip(),r(t,Ba(a,-e,n)),t.fillStyle=s,t.fill("evenodd")),t.beginPath(),r(t,Ba(a,e)),t.fillStyle=i,t.fill(),t.restore()}inRange(t,e,s){return Na(this,t,e,s)}inXRange(t,e){return Na(this,t,null,e)}inYRange(t,e){return Na(this,null,t,e)}getCenterPoint(t){const{x:e,y:s,base:i,horizontal:a}=this.getProps(["x","y","base","horizontal"],t);return{x:a?(e+i)/2:e,y:a?s:(s+i)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}Ja.id="bar",Ja.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Ja.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var $a=Object.freeze({__proto__:null,ArcElement:Sa,LineElement:Wa,PointElement:za,BarElement:Ja});function Ua(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function Ga(t){t.data.datasets.forEach((t=>{Ua(t)}))}var qa={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,s)=>{if(!s.enabled)return void Ga(t);const i=t.width;t.data.datasets.forEach(((e,a)=>{const{_data:n,indexAxis:r}=e,o=t.getDatasetMeta(a),d=n||e.data;if("y"===De([r,t.options.indexAxis]))return;if(!o.controller.supportsDecimation)return;const l=t.scales[o.xAxisID];if("linear"!==l.type&&"time"!==l.type)return;if(t.options.parsing)return;let _,{start:h,count:u}=function(t,e){const s=e.length;let i,a=0;const{iScale:n}=t,{min:r,max:o,minDefined:d,maxDefined:l}=n.getUserBounds();return d&&(a=ut(we(e,n.axis,r).lo,0,s-1)),i=l?ut(we(e,n.axis,o).hi+1,a,s)-a:s-a,{start:a,count:i}}(o,d);if(u<=(s.threshold||4*i))Ua(e);else{switch(b(n)&&(e._data=d,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),s.algorithm){case"lttb":_=function(t,e,s,i,a){const n=a.samples||i;if(n>=s)return t.slice(e,e+s);const r=[],o=(s-2)/(n-2);let d=0;const l=e+s-1;let _,h,u,c,m,f=e;for(r[d++]=t[f],_=0;_<n-2;_++){let i,a=0,n=0;const l=Math.floor((_+1)*o)+1+e,p=Math.min(Math.floor((_+2)*o)+1,s)+e,M=p-l;for(i=l;i<p;i++)a+=t[i].x,n+=t[i].y;a/=M,n/=M;const g=Math.floor(_*o)+1+e,y=Math.min(Math.floor((_+1)*o)+1,s)+e,{x:L,y:Y}=t[f];for(u=c=-1,i=g;i<y;i++)c=.5*Math.abs((L-a)*(t[i].y-Y)-(L-t[i].x)*(n-Y)),c>u&&(u=c,h=t[i],m=i);r[d++]=h,f=m}return r[d++]=t[l],r}(d,h,u,i,s);break;case"min-max":_=function(t,e,s,i){let a,n,r,o,d,l,_,h,u,c,m=0,f=0;const p=[],M=e+s-1,g=t[e].x,y=t[M].x-g;for(a=e;a<e+s;++a){n=t[a],r=(n.x-g)/y*i,o=n.y;const e=0|r;if(e===d)o<u?(u=o,l=a):o>c&&(c=o,_=a),m=(f*m+n.x)/++f;else{const s=a-1;if(!b(l)&&!b(_)){const e=Math.min(l,_),i=Math.max(l,_);e!==h&&e!==s&&p.push({...t[e],x:m}),i!==h&&i!==s&&p.push({...t[i],x:m})}a>0&&s!==h&&p.push(t[s]),p.push(n),d=e,f=0,u=c=o,l=_=h=a}}return p}(d,h,u,i);break;default:throw new Error(`Unsupported decimation algorithm '${s.algorithm}'`)}e._decimated=_}}))},destroy(t){Ga(t)}};function Ka(t,e,s,i){if(i)return;let a=e[t],n=s[t];return"angle"===t&&(a=_t(a),n=_t(n)),{property:t,start:a,end:n}}function Za(t,e,s){for(;e>t;e--){const t=s[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function Xa(t,e,s,i){return t&&e?i(t[s],e[s]):t?t[s]:e?e[s]:0}function Qa(t,e){let s=[],i=!1;return k(t)?(i=!0,s=t):s=function(t,e){const{x:s=null,y:i=null}=t||{},a=e.points,n=[];return e.segments.forEach((({start:t,end:e})=>{e=Za(t,e,a);const r=a[t],o=a[e];null!==i?(n.push({x:r.x,y:i}),n.push({x:o.x,y:i})):null!==s&&(n.push({x:s,y:r.y}),n.push({x:s,y:o.y}))})),n}(t,e),s.length?new Wa({points:s,options:{tension:0},_loop:i,_fullLoop:i}):null}function tn(t,e,s){let i=t[e].fill;const a=[e];let n;if(!s)return i;for(;!1!==i&&-1===a.indexOf(i);){if(!v(i))return i;if(n=t[i],!n)return!1;if(n.visible)return i;a.push(i),i=n.fill}return!1}function en(t,e,s){const i=function(t){const e=t.options,s=e.fill;let i=w(s&&s.target,s);return void 0===i&&(i=!!e.backgroundColor),!1!==i&&null!==i&&(!0===i?"origin":i)}(t);if(D(i))return!isNaN(i.value)&&i;let a=parseFloat(i);return v(a)&&Math.floor(a)===a?function(t,e,s,i){return"-"!==t&&"+"!==t||(s=e+s),!(s===e||s<0||s>=i)&&s}(i[0],e,a,s):["origin","start","end","stack","shape"].indexOf(i)>=0&&i}function sn(t,e,s){const i=[];for(let a=0;a<s.length;a++){const n=s[a],{first:r,last:o,point:d}=an(n,e,"x");if(!(!d||r&&o))if(r)i.unshift(d);else if(t.push(d),!o)break}t.push(...i)}function an(t,e,s){const i=t.interpolate(e,s);if(!i)return{};const a=i[s],n=t.segments,r=t.points;let o=!1,d=!1;for(let t=0;t<n.length;t++){const e=n[t],i=r[e.start][s],l=r[e.end][s];if(ct(a,i,l)){o=a===i,d=a===l;break}}return{first:o,last:d,point:i}}class nn{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,s){const{x:i,y:a,radius:n}=this;return e=e||{start:0,end:J},t.arc(i,a,n,e.end,e.start,!0),!s.bounds}interpolate(t){const{x:e,y:s,radius:i}=this,a=t.angle;return{x:e+Math.cos(a)*i,y:s+Math.sin(a)*i,angle:a}}}function rn(t,e,s){const i=function(t){const{chart:e,fill:s,line:i}=t;if(v(s))return function(t,e){const s=t.getDatasetMeta(e);return s&&t.isDatasetVisible(e)?s.dataset:null}(e,s);if("stack"===s)return function(t){const{scale:e,index:s,line:i}=t,a=[],n=i.segments,r=i.points,o=function(t,e){const s=[],i=t.getMatchingVisibleMetas("line");for(let t=0;t<i.length;t++){const a=i[t];if(a.index===e)break;a.hidden||s.unshift(a.dataset)}return s}(e,s);o.push(Qa({x:null,y:e.bottom},i));for(let t=0;t<n.length;t++){const e=n[t];for(let t=e.start;t<=e.end;t++)sn(a,r[t],o)}return new Wa({points:a,options:{}})}(t);if("shape"===s)return!0;const a=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:s}=t,i=e.options,a=e.getLabels().length,n=i.reverse?e.max:e.min,r=function(t,e,s){let i;return i="start"===t?s:"end"===t?e.options.reverse?e.min:e.max:D(t)?t.value:e.getBaseValue(),i}(s,e,n),o=[];if(i.grid.circular){const t=e.getPointPositionForValue(0,n);return new nn({x:t.x,y:t.y,radius:e.getDistanceFromCenterForValue(r)})}for(let t=0;t<a;++t)o.push(e.getPointPositionForValue(t,r));return o}(t):function(t){const{scale:e={},fill:s}=t,i=function(t,e){let s=null;return"start"===t?s=e.bottom:"end"===t?s=e.top:D(t)?s=e.getPixelForValue(t.value):e.getBasePixel&&(s=e.getBasePixel()),s}(s,e);if(v(i)){const t=e.isHorizontal();return{x:t?i:null,y:t?null:i}}return null}(t)}(t);return a instanceof nn?a:Qa(a,i)}(e),{line:a,scale:n,axis:r}=e,o=a.options,d=o.fill,l=o.backgroundColor,{above:_=l,below:h=l}=d||{};i&&a.points.length&&(le(t,s),function(t,e){const{line:s,target:i,above:a,below:n,area:r,scale:o}=e,d=s._loop?"angle":e.axis;t.save(),"x"===d&&n!==a&&(on(t,i,r.top),dn(t,{line:s,target:i,color:a,scale:o,property:d}),t.restore(),t.save(),on(t,i,r.bottom)),dn(t,{line:s,target:i,color:n,scale:o,property:d}),t.restore()}(t,{line:a,target:i,above:_,below:h,area:s,scale:n,axis:r}),_e(t))}function on(t,e,s){const{segments:i,points:a}=e;let n=!0,r=!1;t.beginPath();for(const o of i){const{start:i,end:d}=o,l=a[i],_=a[Za(i,d,a)];n?(t.moveTo(l.x,l.y),n=!1):(t.lineTo(l.x,s),t.lineTo(l.x,l.y)),r=!!e.pathSegment(t,o,{move:r}),r?t.closePath():t.lineTo(_.x,s)}t.lineTo(e.first().x,s),t.closePath(),t.clip()}function dn(t,e){const{line:s,target:i,property:a,color:n,scale:r}=e,o=function(t,e,s){const i=t.segments,a=t.points,n=e.points,r=[];for(const t of i){let{start:i,end:o}=t;o=Za(i,o,a);const d=Ka(s,a[i],a[o],t.loop);if(!e.segments){r.push({source:t,target:d,start:a[i],end:a[o]});continue}const l=Ls(e,d);for(const e of l){const i=Ka(s,n[e.start],n[e.end],e.loop),o=ys(t,a,i);for(const t of o)r.push({source:t,target:e,start:{[s]:Xa(d,i,"start",Math.max)},end:{[s]:Xa(d,i,"end",Math.min)}})}}return r}(s,i,a);for(const{source:e,target:d,start:l,end:_}of o){const{style:{backgroundColor:o=n}={}}=e,h=!0!==i;t.save(),t.fillStyle=o,ln(t,r,h&&Ka(a,l,_)),t.beginPath();const u=!!s.pathSegment(t,e);let c;if(h){u?t.closePath():_n(t,i,_,a);const e=!!i.pathSegment(t,d,{move:u,reverse:!0});c=u&&e,c||_n(t,i,l,a)}t.closePath(),t.fill(c?"evenodd":"nonzero"),t.restore()}}function ln(t,e,s){const{top:i,bottom:a}=e.chart.chartArea,{property:n,start:r,end:o}=s||{};"x"===n&&(t.beginPath(),t.rect(r,i,o-r,a-i),t.clip())}function _n(t,e,s,i){const a=e.interpolate(s,i);a&&t.lineTo(a.x,a.y)}var hn={id:"filler",afterDatasetsUpdate(t,e,s){const i=(t.data.datasets||[]).length,a=[];let n,r,o,d;for(r=0;r<i;++r)n=t.getDatasetMeta(r),o=n.dataset,d=null,o&&o.options&&o instanceof Wa&&(d={visible:t.isDatasetVisible(r),index:r,fill:en(o,r,i),chart:t,axis:n.controller.options.indexAxis,scale:n.vScale,line:o}),n.$filler=d,a.push(d);for(r=0;r<i;++r)d=a[r],d&&!1!==d.fill&&(d.fill=tn(a,r,s.propagate))},beforeDraw(t,e,s){const i="beforeDraw"===s.drawTime,a=t.getSortedVisibleDatasetMetas(),n=t.chartArea;for(let e=a.length-1;e>=0;--e){const s=a[e].$filler;s&&(s.line.updateControlPoints(n,s.axis),i&&rn(t.ctx,s,n))}},beforeDatasetsDraw(t,e,s){if("beforeDatasetsDraw"!==s.drawTime)return;const i=t.getSortedVisibleDatasetMetas();for(let e=i.length-1;e>=0;--e){const s=i[e].$filler;s&&rn(t.ctx,s,t.chartArea)}},beforeDatasetDraw(t,e,s){const i=e.meta.$filler;i&&!1!==i.fill&&"beforeDatasetDraw"===s.drawTime&&rn(t.ctx,i,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const un=(t,e)=>{let{boxHeight:s=e,boxWidth:i=e}=t;return t.usePointStyle&&(s=Math.min(s,e),i=Math.min(i,e)),{boxWidth:i,boxHeight:s,itemHeight:Math.max(e,s)}};class cn extends Ii{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,s){this.maxWidth=t,this.maxHeight=e,this._margins=s,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=S(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,s)=>t.sort(e,s,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const s=t.labels,i=ke(s.font),a=i.size,n=this._computeTitleHeight(),{boxWidth:r,itemHeight:o}=un(s,a);let d,l;e.font=i.string,this.isHorizontal()?(d=this.maxWidth,l=this._fitRows(n,a,r,o)+10):(l=this.maxHeight,d=this._fitCols(n,a,r,o)+10),this.width=Math.min(d,t.maxWidth||this.maxWidth),this.height=Math.min(l,t.maxHeight||this.maxHeight)}_fitRows(t,e,s,i){const{ctx:a,maxWidth:n,options:{labels:{padding:r}}}=this,o=this.legendHitBoxes=[],d=this.lineWidths=[0],l=i+r;let _=t;a.textAlign="left",a.textBaseline="middle";let h=-1,u=-l;return this.legendItems.forEach(((t,c)=>{const m=s+e/2+a.measureText(t.text).width;(0===c||d[d.length-1]+m+2*r>n)&&(_+=l,d[d.length-(c>0?0:1)]=0,u+=l,h++),o[c]={left:0,top:u,row:h,width:m,height:i},d[d.length-1]+=m+r})),_}_fitCols(t,e,s,i){const{ctx:a,maxHeight:n,options:{labels:{padding:r}}}=this,o=this.legendHitBoxes=[],d=this.columnSizes=[],l=n-t;let _=r,h=0,u=0,c=0,m=0;return this.legendItems.forEach(((t,n)=>{const f=s+e/2+a.measureText(t.text).width;n>0&&u+i+2*r>l&&(_+=h+r,d.push({width:h,height:u}),c+=h+r,m++,h=u=0),o[n]={left:c,top:u,col:m,width:f,height:i},h=Math.max(h,f),u+=i+r})),_+=h,d.push({width:h,height:u}),_}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:s,labels:{padding:i},rtl:a}}=this,n=ms(a,this.left,this.width);if(this.isHorizontal()){let a=0,r=y(s,this.left+i,this.right-this.lineWidths[a]);for(const o of e)a!==o.row&&(a=o.row,r=y(s,this.left+i,this.right-this.lineWidths[a])),o.top+=this.top+t+i,o.left=n.leftForLtr(n.x(r),o.width),r+=o.width+i}else{let a=0,r=y(s,this.top+t+i,this.bottom-this.columnSizes[a].height);for(const o of e)o.col!==a&&(a=o.col,r=y(s,this.top+t+i,this.bottom-this.columnSizes[a].height)),o.top=r,o.left+=this.left+i,o.left=n.leftForLtr(n.x(o.left),o.width),r+=o.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;le(t,this),this._draw(),_e(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:s,ctx:i}=this,{align:a,labels:n}=t,r=se.color,o=ms(t.rtl,this.left,this.width),d=ke(n.font),{color:l,padding:_}=n,h=d.size,u=h/2;let c;this.drawTitle(),i.textAlign=o.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=d.string;const{boxWidth:m,boxHeight:f,itemHeight:p}=un(n,h),M=this.isHorizontal(),g=this._computeTitleHeight();c=M?{x:y(a,this.left+_,this.right-s[0]),y:this.top+_+g,line:0}:{x:this.left+_,y:y(a,this.top+g+_,this.bottom-e[0].height),line:0},fs(this.ctx,t.textDirection);const L=p+_;this.legendItems.forEach(((Y,b)=>{i.strokeStyle=Y.fontColor||l,i.fillStyle=Y.fontColor||l;const k=i.measureText(Y.text).width,D=o.textAlign(Y.textAlign||(Y.textAlign=n.textAlign)),v=m+u+k;let x=c.x,T=c.y;o.setWidth(this.width),M?b>0&&x+v+_>this.right&&(T=c.y+=L,c.line++,x=c.x=y(a,this.left+_,this.right-s[c.line])):b>0&&T+L>this.bottom&&(x=c.x=x+e[c.line].width+_,c.line++,T=c.y=y(a,this.top+g+_,this.bottom-e[c.line].height)),function(t,e,s){if(isNaN(m)||m<=0||isNaN(f)||f<0)return;i.save();const a=w(s.lineWidth,1);if(i.fillStyle=w(s.fillStyle,r),i.lineCap=w(s.lineCap,"butt"),i.lineDashOffset=w(s.lineDashOffset,0),i.lineJoin=w(s.lineJoin,"miter"),i.lineWidth=a,i.strokeStyle=w(s.strokeStyle,r),i.setLineDash(w(s.lineDash,[])),n.usePointStyle){const n={radius:m*Math.SQRT2/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:a},r=o.xPlus(t,m/2);oe(i,n,r,e+u)}else{const n=e+Math.max((h-f)/2,0),r=o.leftForLtr(t,m),d=Ye(s.borderRadius);i.beginPath(),Object.values(d).some((t=>0!==t))?fe(i,{x:r,y:n,w:m,h:f,radius:d}):i.rect(r,n,m,f),i.fill(),0!==a&&i.stroke()}i.restore()}(o.x(x),T,Y),x=((t,e,s,i)=>t===(i?"left":"right")?s:"center"===t?(e+s)/2:e)(D,x+m+u,M?x+v:this.right,t.rtl),function(t,e,s){ce(i,s.text,t,e+p/2,d,{strikethrough:s.hidden,textAlign:o.textAlign(s.textAlign)})}(o.x(x),T,Y),M?c.x+=v+_:c.y+=L})),ps(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,s=ke(e.font),i=be(e.padding);if(!e.display)return;const a=ms(t.rtl,this.left,this.width),n=this.ctx,r=e.position,o=s.size/2,d=i.top+o;let l,_=this.left,h=this.width;if(this.isHorizontal())h=Math.max(...this.lineWidths),l=this.top+d,_=y(t.align,_,this.right-h);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);l=d+y(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const u=y(r,_,_+h);n.textAlign=a.textAlign(g(r)),n.textBaseline="middle",n.strokeStyle=e.color,n.fillStyle=e.color,n.font=s.string,ce(n,e.text,u,l,s)}_computeTitleHeight(){const t=this.options.title,e=ke(t.font),s=be(t.padding);return t.display?e.lineHeight+s.height:0}_getLegendItemAt(t,e){let s,i,a;if(ct(t,this.left,this.right)&&ct(e,this.top,this.bottom))for(a=this.legendHitBoxes,s=0;s<a.length;++s)if(i=a[s],ct(t,i.left,i.left+i.width)&&ct(e,i.top,i.top+i.height))return this.legendItems[s];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t&&"mouseout"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const s=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type||"mouseout"===t.type){const n=this._hoveredItem,r=(a=s,null!==(i=n)&&null!==a&&i.datasetIndex===a.datasetIndex&&i.index===a.index);n&&!r&&S(e.onLeave,[t,n,this],this),this._hoveredItem=s,s&&!r&&S(e.onHover,[t,s,this],this)}else s&&S(e.onClick,[t,s,this],this);var i,a}}var mn={id:"legend",_element:cn,start(t,e,s){const i=t.legend=new cn({ctx:t.ctx,options:s,chart:t});Di.configure(t,i,s),Di.addBox(t,i)},stop(t){Di.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,s){const i=t.legend;Di.configure(t,i,s),i.options=s},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,s){const i=e.datasetIndex,a=s.chart;a.isDatasetVisible(i)?(a.hide(i),e.hidden=!0):(a.show(i),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:s,pointStyle:i,textAlign:a,color:n}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const r=t.controller.getStyle(s?0:void 0),o=be(r.borderWidth);return{text:e[t.index].label,fillStyle:r.backgroundColor,fontColor:n,hidden:!t.visible,lineCap:r.borderCapStyle,lineDash:r.borderDash,lineDashOffset:r.borderDashOffset,lineJoin:r.borderJoinStyle,lineWidth:(o.width+o.height)/4,strokeStyle:r.borderColor,pointStyle:i||r.pointStyle,rotation:r.rotation,textAlign:a||r.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class fn extends Ii{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const s=this.options;if(this.left=0,this.top=0,!s.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const i=k(s.text)?s.text.length:1;this._padding=be(s.padding);const a=i*ke(s.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=a:this.width=a}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:s,bottom:i,right:a,options:n}=this,r=n.align;let o,d,l,_=0;return this.isHorizontal()?(d=y(r,s,a),l=e+t,o=a-s):("left"===n.position?(d=s+t,l=y(r,i,e),_=-.5*B):(d=a-t,l=y(r,e,i),_=.5*B),o=i-e),{titleX:d,titleY:l,maxWidth:o,rotation:_}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const s=ke(e.font),i=s.lineHeight/2+this._padding.top,{titleX:a,titleY:n,maxWidth:r,rotation:o}=this._drawArgs(i);ce(t,e.text,0,0,s,{color:e.color,maxWidth:r,rotation:o,textAlign:g(e.align),textBaseline:"middle",translation:[a,n]})}}var pn={id:"title",_element:fn,start(t,e,s){!function(t,e){const s=new fn({ctx:t.ctx,options:e,chart:t});Di.configure(t,s,e),Di.addBox(t,s),t.titleBlock=s}(t,s)},stop(t){const e=t.titleBlock;Di.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,s){const i=t.titleBlock;Di.configure(t,i,s),i.options=s},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Mn=new WeakMap;var gn={id:"subtitle",start(t,e,s){const i=new fn({ctx:t.ctx,options:s,chart:t});Di.configure(t,i,s),Di.addBox(t,i),Mn.set(t,i)},stop(t){Di.removeBox(t,Mn.get(t)),Mn.delete(t)},beforeUpdate(t,e,s){const i=Mn.get(t);Di.configure(t,i,s),i.options=s},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const yn={average(t){if(!t.length)return!1;let e,s,i=0,a=0,n=0;for(e=0,s=t.length;e<s;++e){const s=t[e].element;if(s&&s.hasValue()){const t=s.tooltipPosition();i+=t.x,a+=t.y,++n}}return{x:i/n,y:a/n}},nearest(t,e){if(!t.length)return!1;let s,i,a,n=e.x,r=e.y,o=Number.POSITIVE_INFINITY;for(s=0,i=t.length;s<i;++s){const i=t[s].element;if(i&&i.hasValue()){const t=dt(e,i.getCenterPoint());t<o&&(o=t,a=i)}}if(a){const t=a.tooltipPosition();n=t.x,r=t.y}return{x:n,y:r}}};function Ln(t,e){return e&&(k(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function Yn(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function bn(t,e){const{element:s,datasetIndex:i,index:a}=e,n=t.getDatasetMeta(i).controller,{label:r,value:o}=n.getLabelAndValue(a);return{chart:t,label:r,parsed:n.getParsed(a),raw:t.data.datasets[i].data[a],formattedValue:o,dataset:n.getDataset(),dataIndex:a,datasetIndex:i,element:s}}function kn(t,e){const s=t.chart.ctx,{body:i,footer:a,title:n}=t,{boxWidth:r,boxHeight:o}=e,d=ke(e.bodyFont),l=ke(e.titleFont),_=ke(e.footerFont),h=n.length,u=a.length,c=i.length,m=be(e.padding);let f=m.height,p=0,M=i.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);M+=t.beforeBody.length+t.afterBody.length,h&&(f+=h*l.lineHeight+(h-1)*e.titleSpacing+e.titleMarginBottom),M&&(f+=c*(e.displayColors?Math.max(o,d.lineHeight):d.lineHeight)+(M-c)*d.lineHeight+(M-1)*e.bodySpacing),u&&(f+=e.footerMarginTop+u*_.lineHeight+(u-1)*e.footerSpacing);let g=0;const y=function(t){p=Math.max(p,s.measureText(t).width+g)};return s.save(),s.font=l.string,H(t.title,y),s.font=d.string,H(t.beforeBody.concat(t.afterBody),y),g=e.displayColors?r+2+e.boxPadding:0,H(i,(t=>{H(t.before,y),H(t.lines,y),H(t.after,y)})),g=0,s.font=_.string,H(t.footer,y),s.restore(),p+=m.width,{width:p,height:f}}function Dn(t,e,s,i){const{x:a,width:n}=s,{width:r,chartArea:{left:o,right:d}}=t;let l="center";return"center"===i?l=a<=(o+d)/2?"left":"right":a<=n/2?l="left":a>=r-n/2&&(l="right"),function(t,e,s,i){const{x:a,width:n}=i,r=s.caretSize+s.caretPadding;return"left"===t&&a+n+r>e.width||"right"===t&&a-n-r<0||void 0}(l,t,e,s)&&(l="center"),l}function vn(t,e,s){const i=s.yAlign||e.yAlign||function(t,e){const{y:s,height:i}=e;return s<i/2?"top":s>t.height-i/2?"bottom":"center"}(t,s);return{xAlign:s.xAlign||e.xAlign||Dn(t,e,s,i),yAlign:i}}function xn(t,e,s,i){const{caretSize:a,caretPadding:n,cornerRadius:r}=t,{xAlign:o,yAlign:d}=s,l=a+n,{topLeft:_,topRight:h,bottomLeft:u,bottomRight:c}=Ye(r);let m=function(t,e){let{x:s,width:i}=t;return"right"===e?s-=i:"center"===e&&(s-=i/2),s}(e,o);const f=function(t,e,s){let{y:i,height:a}=t;return"top"===e?i+=s:i-="bottom"===e?a+s:a/2,i}(e,d,l);return"center"===d?"left"===o?m+=l:"right"===o&&(m-=l):"left"===o?m-=Math.max(_,u)+a:"right"===o&&(m+=Math.max(h,c)+a),{x:ut(m,0,i.width-e.width),y:ut(f,0,i.height-e.height)}}function wn(t,e,s){const i=be(s.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-i.right:t.x+i.left}function Tn(t){return Ln([],Yn(t))}function Sn(t,e){const s=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return s?t.override(s):t}class Hn extends Ii{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,s=this.options.setContext(this.getContext()),i=s.enabled&&e.options.animation&&s.animations,a=new Ts(this.chart,i);return i._cacheable&&(this._cachedAnimations=Object.freeze(a)),a}getContext(){return this.$context||(this.$context=(this,ve(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:s}=e,i=s.beforeTitle.apply(this,[t]),a=s.title.apply(this,[t]),n=s.afterTitle.apply(this,[t]);let r=[];return r=Ln(r,Yn(i)),r=Ln(r,Yn(a)),r=Ln(r,Yn(n)),r}getBeforeBody(t,e){return Tn(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:s}=e,i=[];return H(t,(t=>{const e={before:[],lines:[],after:[]},a=Sn(s,t);Ln(e.before,Yn(a.beforeLabel.call(this,t))),Ln(e.lines,a.label.call(this,t)),Ln(e.after,Yn(a.afterLabel.call(this,t))),i.push(e)})),i}getAfterBody(t,e){return Tn(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:s}=e,i=s.beforeFooter.apply(this,[t]),a=s.footer.apply(this,[t]),n=s.afterFooter.apply(this,[t]);let r=[];return r=Ln(r,Yn(i)),r=Ln(r,Yn(a)),r=Ln(r,Yn(n)),r}_createItems(t){const e=this._active,s=this.chart.data,i=[],a=[],n=[];let r,o,d=[];for(r=0,o=e.length;r<o;++r)d.push(bn(this.chart,e[r]));return t.filter&&(d=d.filter(((e,i,a)=>t.filter(e,i,a,s)))),t.itemSort&&(d=d.sort(((e,i)=>t.itemSort(e,i,s)))),H(d,(e=>{const s=Sn(t.callbacks,e);i.push(s.labelColor.call(this,e)),a.push(s.labelPointStyle.call(this,e)),n.push(s.labelTextColor.call(this,e))})),this.labelColors=i,this.labelPointStyles=a,this.labelTextColors=n,this.dataPoints=d,d}update(t,e){const s=this.options.setContext(this.getContext()),i=this._active;let a,n=[];if(i.length){const t=yn[s.position].call(this,i,this._eventPosition);n=this._createItems(s),this.title=this.getTitle(n,s),this.beforeBody=this.getBeforeBody(n,s),this.body=this.getBody(n,s),this.afterBody=this.getAfterBody(n,s),this.footer=this.getFooter(n,s);const e=this._size=kn(this,s),r=Object.assign({},t,e),o=vn(this.chart,s,r),d=xn(s,r,o,this.chart);this.xAlign=o.xAlign,this.yAlign=o.yAlign,a={opacity:1,x:d.x,y:d.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(a={opacity:0});this._tooltipItems=n,this.$context=void 0,a&&this._resolveAnimations().update(this,a),t&&s.external&&s.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,s,i){const a=this.getCaretPosition(t,s,i);e.lineTo(a.x1,a.y1),e.lineTo(a.x2,a.y2),e.lineTo(a.x3,a.y3)}getCaretPosition(t,e,s){const{xAlign:i,yAlign:a}=this,{caretSize:n,cornerRadius:r}=s,{topLeft:o,topRight:d,bottomLeft:l,bottomRight:_}=Ye(r),{x:h,y:u}=t,{width:c,height:m}=e;let f,p,M,g,y,L;return"center"===a?(y=u+m/2,"left"===i?(f=h,p=f-n,g=y+n,L=y-n):(f=h+c,p=f+n,g=y-n,L=y+n),M=f):(p="left"===i?h+Math.max(o,l)+n:"right"===i?h+c-Math.max(d,_)-n:this.caretX,"top"===a?(g=u,y=g-n,f=p-n,M=p+n):(g=u+m,y=g+n,f=p+n,M=p-n),L=g),{x1:f,x2:p,x3:M,y1:g,y2:y,y3:L}}drawTitle(t,e,s){const i=this.title,a=i.length;let n,r,o;if(a){const d=ms(s.rtl,this.x,this.width);for(t.x=wn(this,s.titleAlign,s),e.textAlign=d.textAlign(s.titleAlign),e.textBaseline="middle",n=ke(s.titleFont),r=s.titleSpacing,e.fillStyle=s.titleColor,e.font=n.string,o=0;o<a;++o)e.fillText(i[o],d.x(t.x),t.y+n.lineHeight/2),t.y+=n.lineHeight+r,o+1===a&&(t.y+=s.titleMarginBottom-r)}}_drawColorBox(t,e,s,i,a){const n=this.labelColors[s],r=this.labelPointStyles[s],{boxHeight:o,boxWidth:d,boxPadding:l}=a,_=ke(a.bodyFont),h=wn(this,"left",a),u=i.x(h),c=o<_.lineHeight?(_.lineHeight-o)/2:0,m=e.y+c;if(a.usePointStyle){const e={radius:Math.min(d,o)/2,pointStyle:r.pointStyle,rotation:r.rotation,borderWidth:1},s=i.leftForLtr(u,d)+d/2,l=m+o/2;t.strokeStyle=a.multiKeyBackground,t.fillStyle=a.multiKeyBackground,oe(t,e,s,l),t.strokeStyle=n.borderColor,t.fillStyle=n.backgroundColor,oe(t,e,s,l)}else{t.lineWidth=n.borderWidth||1,t.strokeStyle=n.borderColor,t.setLineDash(n.borderDash||[]),t.lineDashOffset=n.borderDashOffset||0;const e=i.leftForLtr(u,d-l),s=i.leftForLtr(i.xPlus(u,1),d-l-2),r=Ye(n.borderRadius);Object.values(r).some((t=>0!==t))?(t.beginPath(),t.fillStyle=a.multiKeyBackground,fe(t,{x:e,y:m,w:d,h:o,radius:r}),t.fill(),t.stroke(),t.fillStyle=n.backgroundColor,t.beginPath(),fe(t,{x:s,y:m+1,w:d-2,h:o-2,radius:r}),t.fill()):(t.fillStyle=a.multiKeyBackground,t.fillRect(e,m,d,o),t.strokeRect(e,m,d,o),t.fillStyle=n.backgroundColor,t.fillRect(s,m+1,d-2,o-2))}t.fillStyle=this.labelTextColors[s]}drawBody(t,e,s){const{body:i}=this,{bodySpacing:a,bodyAlign:n,displayColors:r,boxHeight:o,boxWidth:d,boxPadding:l}=s,_=ke(s.bodyFont);let h=_.lineHeight,u=0;const c=ms(s.rtl,this.x,this.width),m=function(s){e.fillText(s,c.x(t.x+u),t.y+h/2),t.y+=h+a},f=c.textAlign(n);let p,M,g,y,L,Y,b;for(e.textAlign=n,e.textBaseline="middle",e.font=_.string,t.x=wn(this,f,s),e.fillStyle=s.bodyColor,H(this.beforeBody,m),u=r&&"right"!==f?"center"===n?d/2+l:d+2+l:0,y=0,Y=i.length;y<Y;++y){for(p=i[y],M=this.labelTextColors[y],e.fillStyle=M,H(p.before,m),g=p.lines,r&&g.length&&(this._drawColorBox(e,t,y,c,s),h=Math.max(_.lineHeight,o)),L=0,b=g.length;L<b;++L)m(g[L]),h=_.lineHeight;H(p.after,m)}u=0,h=_.lineHeight,H(this.afterBody,m),t.y-=a}drawFooter(t,e,s){const i=this.footer,a=i.length;let n,r;if(a){const o=ms(s.rtl,this.x,this.width);for(t.x=wn(this,s.footerAlign,s),t.y+=s.footerMarginTop,e.textAlign=o.textAlign(s.footerAlign),e.textBaseline="middle",n=ke(s.footerFont),e.fillStyle=s.footerColor,e.font=n.string,r=0;r<a;++r)e.fillText(i[r],o.x(t.x),t.y+n.lineHeight/2),t.y+=n.lineHeight+s.footerSpacing}}drawBackground(t,e,s,i){const{xAlign:a,yAlign:n}=this,{x:r,y:o}=t,{width:d,height:l}=s,{topLeft:_,topRight:h,bottomLeft:u,bottomRight:c}=Ye(i.cornerRadius);e.fillStyle=i.backgroundColor,e.strokeStyle=i.borderColor,e.lineWidth=i.borderWidth,e.beginPath(),e.moveTo(r+_,o),"top"===n&&this.drawCaret(t,e,s,i),e.lineTo(r+d-h,o),e.quadraticCurveTo(r+d,o,r+d,o+h),"center"===n&&"right"===a&&this.drawCaret(t,e,s,i),e.lineTo(r+d,o+l-c),e.quadraticCurveTo(r+d,o+l,r+d-c,o+l),"bottom"===n&&this.drawCaret(t,e,s,i),e.lineTo(r+u,o+l),e.quadraticCurveTo(r,o+l,r,o+l-u),"center"===n&&"left"===a&&this.drawCaret(t,e,s,i),e.lineTo(r,o+_),e.quadraticCurveTo(r,o,r+_,o),e.closePath(),e.fill(),i.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,s=this.$animations,i=s&&s.x,a=s&&s.y;if(i||a){const s=yn[t.position].call(this,this._active,this._eventPosition);if(!s)return;const n=this._size=kn(this,t),r=Object.assign({},s,this._size),o=vn(e,t,r),d=xn(t,r,o,e);i._to===d.x&&a._to===d.y||(this.xAlign=o.xAlign,this.yAlign=o.yAlign,this.width=n.width,this.height=n.height,this.caretX=s.x,this.caretY=s.y,this._resolveAnimations().update(this,d))}}_willRender(){return!!this.opacity}draw(t){const e=this.options.setContext(this.getContext());let s=this.opacity;if(!s)return;this._updateAnimationTarget(e);const i={width:this.width,height:this.height},a={x:this.x,y:this.y};s=Math.abs(s)<.001?0:s;const n=be(e.padding),r=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&r&&(t.save(),t.globalAlpha=s,this.drawBackground(a,t,i,e),fs(t,e.textDirection),a.y+=n.top,this.drawTitle(a,t,e),this.drawBody(a,t,e),this.drawFooter(a,t,e),ps(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const s=this._active,i=t.map((({datasetIndex:t,index:e})=>{const s=this.chart.getDatasetMeta(t);if(!s)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:s.data[e],index:e}})),a=!j(s,i),n=this._positionChanged(i,e);(a||n)&&(this._active=i,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,s=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const i=this.options,a=this._active||[],n=this._getActiveElements(t,a,e,s),r=this._positionChanged(n,t),o=e||!j(n,a)||r;return o&&(this._active=n,(i.enabled||i.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),o}_getActiveElements(t,e,s,i){const a=this.options;if("mouseout"===t.type)return[];if(!i)return e;const n=this.chart.getElementsAtEventForMode(t,a.mode,a,s);return a.reverse&&n.reverse(),n}_positionChanged(t,e){const{caretX:s,caretY:i,options:a}=this,n=yn[a.position].call(this,t,e);return!1!==n&&(s!==n.x||i!==n.y)}}Hn.positioners=yn;var jn={id:"tooltip",_element:Hn,positioners:yn,afterInit(t,e,s){s&&(t.tooltip=new Hn({chart:t,options:s}))},beforeUpdate(t,e,s){t.tooltip&&t.tooltip.initialize(s)},reset(t,e,s){t.tooltip&&t.tooltip.initialize(s)},afterDraw(t){const e=t.tooltip;if(e&&e._willRender()){const s={tooltip:e};if(!1===t.notifyPlugins("beforeTooltipDraw",s))return;e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",s)}},afterEvent(t,e){if(t.tooltip){const s=e.replay;t.tooltip.handleEvent(e.event,s,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:L,title(t){if(t.length>0){const e=t[0],s=e.chart.data.labels,i=s?s.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(i>0&&e.dataIndex<i)return s[e.dataIndex]}return""},afterTitle:L,beforeBody:L,beforeLabel:L,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const s=t.formattedValue;return b(s)||(e+=s),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:L,afterBody:L,beforeFooter:L,footer:L,afterFooter:L}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Pn=Object.freeze({__proto__:null,Decimation:qa,Filler:hn,Legend:mn,SubTitle:gn,Title:pn,Tooltip:jn});class On extends Zi{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:s,label:i}of e)t[s]===i&&t.splice(s,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(b(t))return null;const s=this.getLabels();return((t,e)=>null===t?null:ut(Math.round(t),0,e))(e=isFinite(e)&&s[e]===t?e:function(t,e,s,i){const a=t.indexOf(e);return-1===a?((t,e,s,i)=>("string"==typeof e?(s=t.push(e)-1,i.unshift({index:s,label:e})):isNaN(e)&&(s=null),s))(t,e,s,i):a!==t.lastIndexOf(e)?s:a}(s,t,w(e,t),this._addedLabels),s.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:s,max:i}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(s=0),e||(i=this.getLabels().length-1)),this.min=s,this.max=i}buildTicks(){const t=this.min,e=this.max,s=this.options.offset,i=[];let a=this.getLabels();a=0===t&&e===a.length-1?a:a.slice(t,e+1),this._valueRange=Math.max(a.length-(s?0:1),1),this._startValue=this.min-(s?.5:0);for(let s=t;s<=e;s++)i.push({value:s});return i}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function An(t,e,{horizontal:s,minRotation:i}){const a=at(i),n=(s?Math.sin(a):Math.cos(a))||.001,r=.75*e*(""+t).length;return Math.min(e/n,r)}On.id="category",On.defaults={ticks:{callback:On.prototype.getLabelForValue}};class Cn extends Zi{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return b(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:s}=this.getUserBounds();let{min:i,max:a}=this;const n=t=>i=e?i:t,r=t=>a=s?a:t;if(t){const t=Q(i),e=Q(a);t<0&&e<0?r(0):t>0&&e>0&&n(0)}if(i===a){let e=1;(a>=Number.MAX_SAFE_INTEGER||i<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*a)),r(a+e),t||n(i-e)}this.min=i,this.max=a}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:s,stepSize:i}=t;return i?(e=Math.ceil(this.max/i)-Math.floor(this.min/i)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${i} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),s=s||11),s&&(e=Math.min(s,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let s=this.getTickLimit();s=Math.max(2,s);const i=function(t,e){const s=[],{bounds:i,step:a,min:n,max:r,precision:o,count:d,maxTicks:l,maxDigits:_,includeBounds:h}=t,u=a||1,c=l-1,{min:m,max:f}=e,p=!b(n),M=!b(r),g=!b(d),y=(f-m)/(_+1);let L,Y,k,D,v=tt((f-m)/c/u)*u;if(v<1e-14&&!p&&!M)return[{value:m},{value:f}];D=Math.ceil(f/v)-Math.floor(m/v),D>c&&(v=tt(D*v/c/u)*u),b(o)||(L=Math.pow(10,o),v=Math.ceil(v*L)/L),"ticks"===i?(Y=Math.floor(m/v)*v,k=Math.ceil(f/v)*v):(Y=m,k=f),p&&M&&a&&function(t,e){const s=Math.round(t);return s-e<=t&&s+e>=t}((r-n)/a,v/1e3)?(D=Math.round(Math.min((r-n)/v,l)),v=(r-n)/D,Y=n,k=r):g?(Y=p?n:Y,k=M?r:k,D=d-1,v=(k-Y)/D):(D=(k-Y)/v,D=st(D,Math.round(D),v/1e3)?Math.round(D):Math.ceil(D));const x=Math.max(rt(v),rt(Y));L=Math.pow(10,b(o)?x:o),Y=Math.round(Y*L)/L,k=Math.round(k*L)/L;let w=0;for(p&&(h&&Y!==n?(s.push({value:n}),Y<n&&w++,st(Math.round((Y+w*v)*L)/L,n,An(n,y,t))&&w++):Y<n&&w++);w<D;++w)s.push({value:Math.round((Y+w*v)*L)/L});return M&&h&&k!==r?s.length&&st(s[s.length-1].value,r,An(r,y,t))?s[s.length-1].value=r:s.push({value:r}):M&&k!==r||s.push({value:k}),s}({maxTicks:s,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&it(i,this,"value"),t.reverse?(i.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),i}configure(){const t=this.ticks;let e=this.min,s=this.max;if(super.configure(),this.options.offset&&t.length){const i=(s-e)/Math.max(t.length-1,1)/2;e-=i,s+=i}this._startValue=e,this._endValue=s,this._valueRange=s-e}getLabelForValue(t){return cs(t,this.chart.options.locale,this.options.ticks.format)}}class En extends Cn{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=v(t)?t:0,this.max=v(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,s=at(this.options.ticks.minRotation),i=(t?Math.sin(s):Math.cos(s))||.001,a=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,a.lineHeight/i))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function Wn(t){return 1==t/Math.pow(10,Math.floor(X(t)))}En.id="linear",En.defaults={ticks:{callback:Vi.formatters.numeric}};class Fn extends Zi{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const s=Cn.prototype.parse.apply(this,[t,e]);if(0!==s)return v(s)&&s>0?s:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=v(t)?Math.max(0,t):null,this.max=v(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let s=this.min,i=this.max;const a=e=>s=t?s:e,n=t=>i=e?i:t,r=(t,e)=>Math.pow(10,Math.floor(X(t))+e);s===i&&(s<=0?(a(1),n(10)):(a(r(s,-1)),n(r(i,1)))),s<=0&&a(r(i,-1)),i<=0&&n(r(s,1)),this._zero&&this.min!==this._suggestedMin&&s===r(this.min,0)&&a(r(s,-1)),this.min=s,this.max=i}buildTicks(){const t=this.options,e=function(t,e){const s=Math.floor(X(e.max)),i=Math.ceil(e.max/Math.pow(10,s)),a=[];let n=x(t.min,Math.pow(10,Math.floor(X(e.min)))),r=Math.floor(X(n)),o=Math.floor(n/Math.pow(10,r)),d=r<0?Math.pow(10,Math.abs(r)):1;do{a.push({value:n,major:Wn(n)}),++o,10===o&&(o=1,++r,d=r>=0?1:d),n=Math.round(o*Math.pow(10,r)*d)/d}while(r<s||r===s&&o<i);const l=x(t.max,n);return a.push({value:l,major:Wn(n)}),a}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&it(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":cs(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=X(t),this._valueRange=X(this.max)-X(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(X(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function zn(t){const e=t.ticks;if(e.display&&t.display){const t=be(e.backdropPadding);return w(e.font&&e.font.size,se.font.size)+t.height}return 0}function Rn(t,e,s,i,a){return t===i||t===a?{start:e-s/2,end:e+s/2}:t<i||t>a?{start:e-s,end:e}:{start:e,end:e+s}}function In(t,e,s,i,a){const n=Math.abs(Math.sin(s)),r=Math.abs(Math.cos(s));let o=0,d=0;i.start<e.l?(o=(e.l-i.start)/n,t.l=Math.min(t.l,e.l-o)):i.end>e.r&&(o=(i.end-e.r)/n,t.r=Math.max(t.r,e.r+o)),a.start<e.t?(d=(e.t-a.start)/r,t.t=Math.min(t.t,e.t-d)):a.end>e.b&&(d=(a.end-e.b)/r,t.b=Math.max(t.b,e.b+d))}function Nn(t){return 0===t||180===t?"center":t<180?"left":"right"}function Vn(t,e,s){return 90===s||270===s?t-=e/2:(s>270||s<90)&&(t-=e),t}function Bn(t,e,s,i){const{ctx:a}=t;if(s)a.arc(t.xCenter,t.yCenter,e,0,J);else{let s=t.getPointPosition(0,e);a.moveTo(s.x,s.y);for(let n=1;n<i;n++)s=t.getPointPosition(n,e),a.lineTo(s.x,s.y)}}Fn.id="logarithmic",Fn.defaults={ticks:{callback:Vi.formatters.logarithmic,major:{enabled:!0}}};class Jn extends Cn{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=be(zn(this.options)/2),e=this.width=this.maxWidth-t.width,s=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+s/2+t.top),this.drawingArea=Math.floor(Math.min(e,s)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=v(t)&&!isNaN(t)?t:0,this.max=v(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/zn(this.options))}generateTickLabels(t){Cn.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const s=S(this.options.pointLabels.callback,[t,e],this);return s||0===s?s:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},s=Object.assign({},e),i=[],a=[],n=t._pointLabels.length,r=t.options.pointLabels,o=r.centerPointLabels?B/n:0;for(let h=0;h<n;h++){const n=r.setContext(t.getPointLabelContext(h));a[h]=n.padding;const u=t.getPointPosition(h,t.drawingArea+a[h],o),c=ke(n.font),m=(d=t.ctx,l=c,_=k(_=t._pointLabels[h])?_:[_],{w:ae(d,l.string,_),h:_.length*l.lineHeight});i[h]=m;const f=_t(t.getIndexAngle(h)+o),p=Math.round(nt(f));In(s,e,f,Rn(p,u.x,m.w,0,180),Rn(p,u.y,m.h,90,270))}var d,l,_;t.setCenterPoint(e.l-s.l,s.r-e.r,e.t-s.t,s.b-e.b),t._pointLabelItems=function(t,e,s){const i=[],a=t._pointLabels.length,n=t.options,r=zn(n)/2,o=t.drawingArea,d=n.pointLabels.centerPointLabels?B/a:0;for(let n=0;n<a;n++){const a=t.getPointPosition(n,o+r+s[n],d),u=Math.round(nt(_t(a.angle+q))),c=e[n],m=Vn(a.y,c.h,u),f=Nn(u),p=(l=a.x,_=c.w,"right"===(h=f)?l-=_:"center"===h&&(l-=_/2),l);i.push({x:a.x,y:m,textAlign:f,left:p,top:m,right:p+c.w,bottom:m+c.h})}var l,_,h;return i}(t,i,a)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,s,i){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((s-i)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,s,i))}getIndexAngle(t){return _t(t*(J/(this._pointLabels.length||1))+at(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(b(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(b(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const s=e[t];return function(t,e,s){return ve(t,{label:s,index:e,type:"pointLabel"})}(this.getContext(),t,s)}}getPointPosition(t,e,s=0){const i=this.getIndexAngle(t)-q+s;return{x:Math.cos(i)*e+this.xCenter,y:Math.sin(i)*e+this.yCenter,angle:i}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:s,right:i,bottom:a}=this._pointLabelItems[t];return{left:e,top:s,right:i,bottom:a}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const s=this.ctx;s.save(),s.beginPath(),Bn(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),s.closePath(),s.fillStyle=t,s.fill(),s.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:s,grid:i}=e,a=this._pointLabels.length;let n,r,o;if(e.pointLabels.display&&function(t,e){const{ctx:s,options:{pointLabels:i}}=t;for(let a=e-1;a>=0;a--){const e=i.setContext(t.getPointLabelContext(a)),n=ke(e.font),{x:r,y:o,textAlign:d,left:l,top:_,right:h,bottom:u}=t._pointLabelItems[a],{backdropColor:c}=e;if(!b(c)){const t=Ye(e.borderRadius),i=be(e.backdropPadding);s.fillStyle=c;const a=l-i.left,n=_-i.top,r=h-l+i.width,o=u-_+i.height;Object.values(t).some((t=>0!==t))?(s.beginPath(),fe(s,{x:a,y:n,w:r,h:o,radius:t}),s.fill()):s.fillRect(a,n,r,o)}ce(s,t._pointLabels[a],r,o+n.lineHeight/2,n,{color:e.color,textAlign:d,textBaseline:"middle"})}}(this,a),i.display&&this.ticks.forEach(((t,e)=>{0!==e&&(r=this.getDistanceFromCenterForValue(t.value),function(t,e,s,i){const a=t.ctx,n=e.circular,{color:r,lineWidth:o}=e;!n&&!i||!r||!o||s<0||(a.save(),a.strokeStyle=r,a.lineWidth=o,a.setLineDash(e.borderDash),a.lineDashOffset=e.borderDashOffset,a.beginPath(),Bn(t,s,n,i),a.closePath(),a.stroke(),a.restore())}(this,i.setContext(this.getContext(e-1)),r,a))})),s.display){for(t.save(),n=a-1;n>=0;n--){const i=s.setContext(this.getPointLabelContext(n)),{color:a,lineWidth:d}=i;d&&a&&(t.lineWidth=d,t.strokeStyle=a,t.setLineDash(i.borderDash),t.lineDashOffset=i.borderDashOffset,r=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),o=this.getPointPosition(n,r),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(o.x,o.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,s=e.ticks;if(!s.display)return;const i=this.getIndexAngle(0);let a,n;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(i),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((i,r)=>{if(0===r&&!e.reverse)return;const o=s.setContext(this.getContext(r)),d=ke(o.font);if(a=this.getDistanceFromCenterForValue(this.ticks[r].value),o.showLabelBackdrop){t.font=d.string,n=t.measureText(i.label).width,t.fillStyle=o.backdropColor;const e=be(o.backdropPadding);t.fillRect(-n/2-e.left,-a-d.size/2-e.top,n+e.width,d.size+e.height)}ce(t,i.label,0,-a,d,{color:o.color})})),t.restore()}drawTitle(){}}Jn.id="radialLinear",Jn.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Vi.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},Jn.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Jn.descriptors={angleLines:{_fallback:"grid"}};const $n={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Un=Object.keys($n);function Gn(t,e){return t-e}function qn(t,e){if(b(e))return null;const s=t._adapter,{parser:i,round:a,isoWeekday:n}=t._parseOpts;let r=e;return"function"==typeof i&&(r=i(r)),v(r)||(r="string"==typeof i?s.parse(r,i):s.parse(r)),null===r?null:(a&&(r="week"!==a||!et(n)&&!0!==n?s.startOf(r,a):s.startOf(r,"isoWeek",n)),+r)}function Kn(t,e,s,i){const a=Un.length;for(let n=Un.indexOf(t);n<a-1;++n){const t=$n[Un[n]],a=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((s-e)/(a*t.size))<=i)return Un[n]}return Un[a-1]}function Zn(t,e,s){if(s){if(s.length){const{lo:i,hi:a}=xe(s,e);t[s[i]>=e?s[i]:s[a]]=!0}}else t[e]=!0}function Xn(t,e,s){const i=[],a={},n=e.length;let r,o;for(r=0;r<n;++r)o=e[r],a[o]=r,i.push({value:o,major:!1});return 0!==n&&s?function(t,e,s,i){const a=t._adapter,n=+a.startOf(e[0].value,i),r=e[e.length-1].value;let o,d;for(o=n;o<=r;o=+a.add(o,1,i))d=s[o],d>=0&&(e[d].major=!0);return e}(t,i,a,s):i}class Qn extends Zi{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const s=t.time||(t.time={}),i=this._adapter=new ri._date(t.adapters.date);E(s.displayFormats,i.formats()),this._parseOpts={parser:s.parser,round:s.round,isoWeekday:s.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:qn(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,s=t.time.unit||"day";let{min:i,max:a,minDefined:n,maxDefined:r}=this.getUserBounds();function o(t){n||isNaN(t.min)||(i=Math.min(i,t.min)),r||isNaN(t.max)||(a=Math.max(a,t.max))}n&&r||(o(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||o(this.getMinMax(!1))),i=v(i)&&!isNaN(i)?i:+e.startOf(Date.now(),s),a=v(a)&&!isNaN(a)?a:+e.endOf(Date.now(),s)+1,this.min=Math.min(i,a-1),this.max=Math.max(i+1,a)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,s=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],s=t[t.length-1]),{min:e,max:s}}buildTicks(){const t=this.options,e=t.time,s=t.ticks,i="labels"===s.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&i.length&&(this.min=this._userMin||i[0],this.max=this._userMax||i[i.length-1]);const a=this.min,n=function(t,e,s){let i=0,a=t.length;for(;i<a&&t[i]<e;)i++;for(;a>i&&t[a-1]>s;)a--;return i>0||a<t.length?t.slice(i,a):t}(i,a,this.max);return this._unit=e.unit||(s.autoSkip?Kn(e.minUnit,this.min,this.max,this._getLabelCapacity(a)):function(t,e,s,i,a){for(let n=Un.length-1;n>=Un.indexOf(s);n--){const s=Un[n];if($n[s].common&&t._adapter.diff(a,i,s)>=e-1)return s}return Un[s?Un.indexOf(s):0]}(this,n.length,e.minUnit,this.min,this.max)),this._majorUnit=s.major.enabled&&"year"!==this._unit?function(t){for(let e=Un.indexOf(t)+1,s=Un.length;e<s;++e)if($n[Un[e]].common)return Un[e]}(this._unit):void 0,this.initOffsets(i),t.reverse&&n.reverse(),Xn(this,n,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((t=>+t.value)))}initOffsets(t){let e,s,i=0,a=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),i=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,s=this.getDecimalForValue(t[t.length-1]),a=1===t.length?s:(s-this.getDecimalForValue(t[t.length-2]))/2);const n=t.length<3?.5:.25;i=ut(i,0,n),a=ut(a,0,n),this._offsets={start:i,end:a,factor:1/(i+1+a)}}_generate(){const t=this._adapter,e=this.min,s=this.max,i=this.options,a=i.time,n=a.unit||Kn(a.minUnit,e,s,this._getLabelCapacity(e)),r=w(a.stepSize,1),o="week"===n&&a.isoWeekday,d=et(o)||!0===o,l={};let _,h,u=e;if(d&&(u=+t.startOf(u,"isoWeek",o)),u=+t.startOf(u,d?"day":n),t.diff(s,e,n)>1e5*r)throw new Error(e+" and "+s+" are too far apart with stepSize of "+r+" "+n);const c="data"===i.ticks.source&&this.getDataTimestamps();for(_=u,h=0;_<s;_=+t.add(_,r,n),h++)Zn(l,_,c);return _!==s&&"ticks"!==i.bounds&&1!==h||Zn(l,_,c),Object.keys(l).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,s=this.options.time;return s.tooltipFormat?e.format(t,s.tooltipFormat):e.format(t,s.displayFormats.datetime)}_tickFormatFunction(t,e,s,i){const a=this.options,n=a.time.displayFormats,r=this._unit,o=this._majorUnit,d=r&&n[r],l=o&&n[o],_=s[e],h=o&&l&&_&&_.major,u=this._adapter.format(t,i||(h?l:d)),c=a.ticks.callback;return c?S(c,[u,e,s],this):u}generateTickLabels(t){let e,s,i;for(e=0,s=t.length;e<s;++e)i=t[e],i.label=this._tickFormatFunction(i.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,s=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+s)*e.factor)}getValueForPixel(t){const e=this._offsets,s=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+s*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,s=this.ctx.measureText(t).width,i=at(this.isHorizontal()?e.maxRotation:e.minRotation),a=Math.cos(i),n=Math.sin(i),r=this._resolveTickFontOptions(0).size;return{w:s*a+r*n,h:s*n+r*a}}_getLabelCapacity(t){const e=this.options.time,s=e.displayFormats,i=s[e.unit]||s.millisecond,a=this._tickFormatFunction(t,0,Xn(this,[t],this._majorUnit),i),n=this._getLabelSize(a),r=Math.floor(this.isHorizontal()?this.width/n.w:this.height/n.h)-1;return r>0?r:1}getDataTimestamps(){let t,e,s=this._cache.data||[];if(s.length)return s;const i=this.getMatchingVisibleMetas();if(this._normalized&&i.length)return this._cache.data=i[0].controller.getAllParsedValues(this);for(t=0,e=i.length;t<e;++t)s=s.concat(i[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(s)}getLabelTimestamps(){const t=this._cache.labels||[];let e,s;if(t.length)return t;const i=this.getLabels();for(e=0,s=i.length;e<s;++e)t.push(qn(this,i[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return je(t.sort(Gn))}}function tr(t,e,s){let i,a,n,r,o=0,d=t.length-1;s?(e>=t[o].pos&&e<=t[d].pos&&({lo:o,hi:d}=we(t,"pos",e)),({pos:i,time:n}=t[o]),({pos:a,time:r}=t[d])):(e>=t[o].time&&e<=t[d].time&&({lo:o,hi:d}=we(t,"time",e)),({time:i,pos:n}=t[o]),({time:a,pos:r}=t[d]));const l=a-i;return l?n+(r-n)*(e-i)/l:n}Qn.id="time",Qn.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class er extends Qn{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=tr(e,this.min),this._tableRange=tr(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:s}=this,i=[],a=[];let n,r,o,d,l;for(n=0,r=t.length;n<r;++n)d=t[n],d>=e&&d<=s&&i.push(d);if(i.length<2)return[{time:e,pos:0},{time:s,pos:1}];for(n=0,r=i.length;n<r;++n)l=i[n+1],o=i[n-1],d=i[n],Math.round((l+o)/2)!==d&&a.push({time:d,pos:n/(r-1)});return a}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),s=this.getLabelTimestamps();return t=e.length&&s.length?this.normalize(e.concat(s)):e.length?e:s,t=this._cache.all=t,t}getDecimalForValue(t){return(tr(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,s=this.getDecimalForPixel(t)/e.factor-e.end;return tr(this._table,s*this._tableRange+this._minPos,!0)}}er.id="timeseries",er.defaults=Qn.defaults;const sr=[ii,$a,Pn,Object.freeze({__proto__:null,CategoryScale:On,LinearScale:En,LogarithmicScale:Fn,RadialLinearScale:Jn,TimeScale:Qn,TimeSeriesScale:er})];ka.register(...sr);const ir=ka,ar=(t,e,s)=>{t>=0?(e.setAttribute("class","fa-solid fa-caret-up positive"),s.classList.add("positive")):(e.setAttribute("class","fa-solid fa-caret-down negative"),s.classList.add("negative"))},nr={responsive:!0,maintainAspectRatio:!1,borderWidth:2,plugins:{legend:{display:!1}},scales:{x:{display:!1},y:{display:!1}},elements:{point:{radius:0}},events:[]},rr=t=>{const e=document.querySelector("main");e.replaceChildren(),e.removeAttribute("class"),e.classList.add(t)},or=async t=>{rr("main-single"),await(async t=>{const e=await(async t=>(await fetch(`https://api.coingecko.com/api/v3/coins/${t}?localization=false&tickers=false&market_data=true&community_data=false&developer_data=false&sparkline=false`,{mode:"cors"})).json())(t),s=await(async t=>(await fetch(`https://api.coingecko.com/api/v3/coins/${t}/market_chart?vs_currency=usd&days=7`,{mode:"cors"})).json())(t);((t,e)=>{document.title=`${t.name} - Off The Grid`;const s=document.querySelector("main"),i=c()("div","coin__category"),a=c()("a",!1,"Coins",{href:""});i.appendChild(a);const n=c()("i","fa-solid fa-chevron-right");i.appendChild(n);const r=c()("span","coin__category__value",t.name);i.appendChild(r),s.appendChild(i);const o=c()("div","coin__info"),d=c()("div","coin__info__basic"),l=t.market_cap_rank?`Rank #${t.market_cap_rank}`:"Rank #N/A",h=c()("div","coin__rank",l);d.appendChild(h);const u=c()("div","coin__identifier"),m=c()("img",!1,!1,{src:t.image.small});u.appendChild(m);const f=c()("div","coin__name",t.name);u.appendChild(f);const p=c()("div","coin__symbol",t.symbol);u.appendChild(p),d.appendChild(u);const M=c()("div","coin__links");if(t.links.homepage[0]){const e=c()("a","coin__link",!1,{href:t.links.homepage[0],target:"_blank"}),s=c()("i","fa-solid fa-link");e.appendChild(s);const i=c()("span",!1,"Website");e.appendChild(i),M.appendChild(e)}if(t.links.blockchain_site[0]){const e=c()("a","coin__link",!1,{href:t.links.blockchain_site[0],target:"_blank"}),s=c()("i","fa-solid fa-magnifying-glass");e.appendChild(s);const i=c()("span",!1,"Explorer");e.appendChild(i),M.appendChild(e)}let g=t.links.official_forum_url[0]||t.links.subreddit_url||t.links.telegram_channel_identifier;if(g){t.links.official_forum_url[0]||t.links.subreddit_url||(g=`https://t.me/${t.links.telegram_channel_identifier}`);const e=c()("a","coin__link",!1,{href:g,target:"_blank"}),s=c()("i","fa-solid fa-user");e.appendChild(s);const i=c()("span",!1,"Community");e.appendChild(i),M.appendChild(e)}if(t.links.repos_url.github[0]){const e=c()("a","coin__link",!1,{href:t.links.repos_url.github[0],target:"_blank"}),s=c()("i","fa-solid fa-code");e.appendChild(s);const i=c()("span",!1,"Source Code");e.appendChild(i),M.appendChild(e)}d.appendChild(M),o.appendChild(d);const y=c()("div","coin__info__price"),L=c()("div","coin__price__title",`${t.name} Price (${t.symbol.toUpperCase()})`);y.appendChild(L);const Y=c()("div","coin__price"),b=c()("div","coin__price__value",`$${t.market_data.current_price.usd.toLocaleString(void 0,{maximumFractionDigits:7})}`);Y.appendChild(b);const k=c()("div","coin__price__change"),D=document.createElement("i");t.market_data.price_change_percentage_24h>=0?(D.setAttribute("class","fa-solid fa-caret-up"),k.style.background="#41d9ab"):(D.setAttribute("class","fa-solid fa-caret-down"),k.style.background="#ea3943");const v=t.market_data.price_change_percentage_24h?`${t.market_data.price_change_percentage_24h.toFixed(2).replace("-","")}%`:"-",x=c()("div",!1,v);k.appendChild(D),k.appendChild(x),Y.appendChild(k),y.appendChild(Y);const w=c()("div","coin__price-range"),T=c()("div","coin__range"),S=c()("div","coin__range__title","Low:");T.appendChild(S);const H=t.market_data.low_24h.usd?`$${t.market_data.low_24h.usd.toLocaleString(void 0,{maximumFractionDigits:7})}`:"-",j=c()("div","coin__range__value",H);T.appendChild(j),w.appendChild(T);const P=c()("div","coin__range__bar");if(t.market_data.low_24h.usd&&t.market_data.high_24h.usd){const e=`${((t.market_data.current_price.usd-t.market_data.low_24h.usd)/(t.market_data.high_24h.usd-t.market_data.low_24h.usd)*100).toFixed(0)}%`;P.style.background=`linear-gradient(to right, #21c9b8 0%, #21c9b8 ${e}, #e1e1e1 ${e}, #e1e1e1 100%)`}w.appendChild(P);const O=c()("div","coin__range"),A=c()("div","coin__range__title","High:");O.appendChild(A);const C=t.market_data.high_24h.usd?`$${t.market_data.high_24h.usd.toLocaleString(void 0,{maximumFractionDigits:7})}`:"-",E=c()("div","coin__range__value",C);O.appendChild(E),w.appendChild(O);const W=c()("div","coin__range__indicator","24h");w.appendChild(W),y.appendChild(w),o.appendChild(y),s.appendChild(o);const F=c()("div","coin__indicators"),z=c()("div","coin__indicator-section"),R=c()("div","coin__indicator"),I=c()("div","coin__indicator__title","Market Cap");R.appendChild(I);const N=c()("div","coin__indicator__value",`$${t.market_data.market_cap.usd.toLocaleString()}`);R.appendChild(N),z.appendChild(R),F.appendChild(z);const V=c()("div","coin__indicator-section"),B=c()("div","coin__indicator"),J=c()("div","coin__indicator__title","Fully Diluted Valuation");B.appendChild(J);const $=t.market_data.fully_diluted_valuation.usd?`$${t.market_data.fully_diluted_valuation.usd.toLocaleString()}`:"-",U=c()("div","coin__indicator__value",$);B.appendChild(U),V.appendChild(B),F.appendChild(V);const G=c()("div","coin__indicator-section"),q=c()("div","coin__indicator"),K=c()("div","coin__indicator__title","24h Volume");q.appendChild(K);const Z=c()("div","coin__indicator__value",`$${t.market_data.total_volume.usd.toLocaleString()}`);q.appendChild(Z),G.appendChild(q);const X=c()("div","coin__indicator"),Q=c()("div","coin__indicator__title","Volume / Market Cap");X.appendChild(Q);const tt=0!==t.market_data.market_cap.usd?`${(t.market_data.total_volume.usd/t.market_data.market_cap.usd).toLocaleString(void 0,{minimumFractionDigits:5})}`:"-",et=c()("div","coin__indicator__value",tt);X.appendChild(et),G.appendChild(X),F.appendChild(G);const st=c()("div","coin__indicator-section"),it=c()("div","coin__indicator"),at=c()("div","coin__indicator__title","Circulating Supply");it.appendChild(at);const nt=c()("div","coin__indicator_horizontal"),rt=c()("div","coin__indicator__value",`${t.market_data.circulating_supply.toLocaleString()} ${t.symbol.toUpperCase()}`);nt.appendChild(rt),it.appendChild(nt);const ot=c()("div","coin__supply__bar");if(t.market_data.circulating_supply&&t.market_data.max_supply){const e=`${(t.market_data.circulating_supply/t.market_data.max_supply*100).toFixed(0)}%`;ot.style.background=`linear-gradient(to right, #21c9b8 0%, #21c9b8 ${e}, #e1e1e1 ${e}, #e1e1e1 100%)`;const s=c()("div","coin__indicator__title",e);nt.appendChild(s)}it.appendChild(ot),st.appendChild(it);const dt=c()("div","coin__indicator"),lt=c()("div","coin__indicator_horizontal"),_t=c()("div","coin__indicator__title","Total Supply");lt.appendChild(_t);const ht=t.market_data.total_supply?t.market_data.total_supply.toLocaleString():"-",ut=c()("div","coin__indicator__value",ht);lt.appendChild(ut),dt.appendChild(lt);const ct=c()("div","coin__indicator_horizontal"),mt=c()("div","coin__indicator__title","Max Supply");ct.appendChild(mt);const ft=t.market_data.max_supply?t.market_data.max_supply.toLocaleString():"-",pt=c()("div","coin__indicator__value",ft);ct.appendChild(pt),dt.appendChild(ct),st.appendChild(dt),F.appendChild(st),s.appendChild(F);const Mt=c()("div","coin__chart-stats"),gt=c()("div","coin__chart-section"),yt=c()("div","coin__chart__title",`${t.name} Price Chart (${t.symbol.toUpperCase()}/USD)`);gt.appendChild(yt);const Lt=c()("div","coin__chart"),Yt=document.createElement("canvas"),bt=[],kt=[];e.prices.forEach((t=>{bt.push(t[1]),kt.push(_()(t[0]).format("ddd DD MMM YYYY, HH:mm:ss"))})),new ir(Yt,{type:"line",data:{labels:kt,datasets:[{data:bt,borderColor:"#21c9b8",fill:{target:"origin",above:"#21c9b833"},tension:.1}]},options:{responsive:!0,maintainAspectRatio:!1,borderWidth:2,plugins:{legend:{display:!1}},scales:{x:{display:!1},y:{ticks:{callback:function(t,e,s){return"$"+t.toLocaleString()}}}},elements:{point:{radius:0}}}}),Lt.appendChild(Yt),gt.appendChild(Lt),Mt.appendChild(gt);const Dt=c()("div","coin__statistics"),vt=c()("div","coin__statistics__title",`${t.symbol.toUpperCase()} Price Statistics`);Dt.appendChild(vt);const xt=c()("div","coin__statistic"),wt=c()("div","coin__statistic__title",`${t.name} Price`);xt.appendChild(wt);const Tt=c()("div","coin__statistic__value",`$${t.market_data.current_price.usd.toLocaleString(void 0,{maximumFractionDigits:7})}`);xt.appendChild(Tt),Dt.appendChild(xt);let St=c()("div","coin__statistics__separator");Dt.appendChild(St);const Ht=c()("div","coin__statistic"),jt=c()("div","coin__statistic__title","24h Low / 24h High");Ht.appendChild(jt);const Pt=c()("div","coin__statistic__value",`${H} / ${C}`);Ht.appendChild(Pt),Dt.appendChild(Ht),St=c()("div","coin__statistics__separator"),Dt.appendChild(St);const Ot=c()("div","coin__statistic"),At=c()("div","coin__statistic__title","Trading Volume");Ot.appendChild(At);const Ct=c()("div","coin__statistic__value",`$${t.market_data.total_volume.usd.toLocaleString()}`);Ot.appendChild(Ct),Dt.appendChild(Ot),St=c()("div","coin__statistics__separator"),Dt.appendChild(St);const Et=c()("div","coin__statistic"),Wt=c()("div","coin__statistic__title","Market Cap Rank");Et.appendChild(Wt);const Ft=c()("div","coin__statistic__value",l);Et.appendChild(Ft),Dt.appendChild(Et),St=c()("div","coin__statistics__separator"),Dt.appendChild(St);const zt=c()("div","coin__statistic"),Rt=c()("div","coin__statistic__title","Market Cap");zt.appendChild(Rt);const It=c()("div","coin__statistic__value",`$${t.market_data.market_cap.usd.toLocaleString()}`);zt.appendChild(It),Dt.appendChild(zt),St=c()("div","coin__statistics__separator"),Dt.appendChild(St);const Nt=c()("div","coin__statistic"),Vt=c()("div","coin__statistic__title","Volume / Market Cap");Nt.appendChild(Vt);const Bt=c()("div","coin__statistic__value",tt);Nt.appendChild(Bt),Dt.appendChild(Nt),St=c()("div","coin__statistics__separator"),Dt.appendChild(St);const Jt=c()("div","coin__statistic"),$t=c()("div","coin__statistic__title","All-Time Low");Jt.appendChild($t);const Ut=c()("div","coin__statistic__value_div"),Gt=c()("div","coin__statistic__value",`$${t.market_data.atl.usd.toLocaleString(void 0,{maximumFractionDigits:7})}`);Ut.appendChild(Gt);const qt=c()("div","coin__statistic__date",`${_()(t.market_data.atl_date.usd).format("MMMM DD, YYYY")} (${_()(t.market_data.atl_date.usd).fromNow()})`);Ut.appendChild(qt),Jt.appendChild(Ut),Dt.appendChild(Jt),St=c()("div","coin__statistics__separator"),Dt.appendChild(St);const Kt=c()("div","coin__statistic"),Zt=c()("div","coin__statistic__title","All-Time High");Kt.appendChild(Zt);const Xt=c()("div","coin__statistic__value_div"),Qt=c()("div","coin__statistic__value",`$${t.market_data.ath.usd.toLocaleString(void 0,{maximumFractionDigits:7})}`);Xt.appendChild(Qt);const te=c()("div","coin__statistic__date",`${_()(t.market_data.ath_date.usd).format("MMMM DD, YYYY")} (${_()(t.market_data.ath_date.usd).fromNow()})`);Xt.appendChild(te),Kt.appendChild(Xt),Dt.appendChild(Kt),Mt.appendChild(Dt),s.appendChild(Mt)})(e,s)})(t)};document.querySelector(".search__btn").addEventListener("click",(()=>(async()=>{const t=document.querySelector("#search"),e=await(async t=>(await fetch(`https://api.coingecko.com/api/v3/search?query=${t}`,{mode:"cors"})).json())(t.value);e.coins.length>0?(h(),or(e.coins[0].id)):(t.value="No results found",setTimeout((()=>h()),2e3))})())),document.querySelector(".date").textContent=_()().format("dddd, MMMM Do YYYY"),(async()=>{rr("main-list"),await(async()=>{(t=>{const e=document.querySelector("main"),s=c()("div","description"),i=c()("h1",!1,"Cryptocurrency Prices by Market Cap");s.appendChild(i);const a=document.createElement("p");let n=c()("span",!1,"The global crypto market cap is ");a.appendChild(n);const r=c()("span","description__market-cap",`$${(t=>{const e=Math.floor(Math.log10(Math.abs(t))/3);if(0==e)return t;const s=f[e];return(t/Math.pow(10,3*e)).toFixed(2)+s})(t.data.total_market_cap.usd)}`);a.appendChild(r),n=c()("span",!1,", a "),a.appendChild(n);const o=c()("span","description__percentage",`${t.data.market_cap_change_percentage_24h_usd.toFixed(2).replace("-","")}%`),d=c()("span","description__change");t.data.market_cap_change_percentage_24h_usd>=0?(o.classList.add("positive"),d.textContent="increase"):(o.classList.add("negative"),d.textContent="decrease"),a.appendChild(o),n=c()("span",!1," "),a.appendChild(n),a.appendChild(d),n=c()("span",!1," over the last day."),a.appendChild(n),s.appendChild(a),e.appendChild(s)})(await m())})(),await(async()=>{(t=>{const e=document.querySelector("main"),s=document.createElement("table"),i=c()("caption",!1,"Cryptocurrency Prices by Market Cap");s.appendChild(i);const a=document.createElement("thead"),n=document.createElement("tr"),r=c()("th","outer-left","#",{scope:"col"});n.append(r);const o=c()("th","coin-th","Coin",{scope:"col"});n.append(o);const d=c()("th",!1,"Price",{scope:"col"});n.append(d);const l=c()("th",!1,"24h",{scope:"col"});n.append(l);const _=c()("th",!1,"7d",{scope:"col"});n.append(_);const h=c()("th",!1,"Market Cap",{scope:"col"});n.append(h);const u=c()("th","outer-right","Last 7 Days",{scope:"col"});n.append(u),a.appendChild(n),s.appendChild(a);const m=c()("tbody","coins");t.forEach((t=>{const{id:e,market_cap_rank:s,image:i,name:a,symbol:n,current_price:r,price_change_percentage_24h:o,price_change_percentage_7d_in_currency:d,market_cap:l,sparkline_in_7d:_}=t,h=c()("tr","coin-row",!1,{"data-id":e}),u=c()("td","coin-row__rank outer-left",s);h.appendChild(u);const f=document.createElement("td"),p=c()("div","coin-row__identifier"),M=c()("img",!1,!1,{src:i,alt:`${a} logo`});p.appendChild(M);const g=c()("div","coin-row__name",a);p.appendChild(g);const y=c()("div","coin-row__symbol",n);p.appendChild(y),f.appendChild(p),h.appendChild(f);const L=c()("td","coin-row__price",`$${r.toLocaleString(void 0,{maximumFractionDigits:7})}`);h.appendChild(L);const Y=document.createElement("td"),b=c()("div","coin-row__change"),k=document.createElement("i"),D=c()("div",!1,`${o.toFixed(2).replace("-","")}%`);ar(o,k,D),b.appendChild(k),b.appendChild(D),Y.appendChild(b),h.appendChild(Y);const v=document.createElement("td"),x=c()("div","coin-row__change"),w=document.createElement("i"),T=c()("div",!1,`${d.toFixed(2).replace("-","")}%`);ar(d,w,T),x.appendChild(w),x.appendChild(T),v.appendChild(x),h.appendChild(v);const S=c()("td","coin-row__cap",`$${l.toLocaleString()}`);h.appendChild(S);const H=c()("td","coin-row__last-days outer-right"),j=document.createElement("canvas"),P=_.price,O=[];for(let t=1;t<=P.length;t+=1)O.push(t);new ir(j,{type:"line",data:{labels:O,datasets:[{data:P,fill:!1,borderColor:d>=0?"#41d9ab":"#ea3943",tension:.1}]},options:nr}),H.appendChild(j),h.appendChild(H),m.appendChild(h)})),s.appendChild(m),e.appendChild(s)})(await(async()=>{const t=await fetch("https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=20&page=1&sparkline=true&price_change_percentage=7d",{mode:"cors"});return await t.json()})())})(),document.querySelectorAll(".coin-row").forEach((t=>{t.addEventListener("click",(()=>or(t.getAttribute("data-id"))))}))})(),(async()=>{(t=>{document.querySelector(".cryptos-indicator").textContent=t.data.active_cryptocurrencies.toLocaleString(),document.querySelector(".markets-indicator").textContent=t.data.markets.toLocaleString(),document.querySelector(".market-cap-indicator").textContent=`$${t.data.total_market_cap.usd.toLocaleString()}`;const e=document.querySelector(".dominance-indicator"),s=t.data.market_cap_percentage;let i="",a=0;for(let t in s){if(a>=2)break;i+=` ${t}: ${s[t].toFixed(1)}%`,a+=1}e.textContent=i.trim().toUpperCase()})(await m())})()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,